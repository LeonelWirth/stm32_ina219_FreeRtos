
stm32_ina219.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094c0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  080095d0  080095d0  000195d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a34  08009a34  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009a34  08009a34  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a34  08009a34  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a34  08009a34  00019a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a38  08009a38  00019a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b44  200001e0  08009c1c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d24  08009c1c  00021d24  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cbdd  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038c9  00000000  00000000  0003cde6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  000406b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a0  00000000  00000000  00041d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a16d  00000000  00000000  00043310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186ab  00000000  00000000  0005d47d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098529  00000000  00000000  00075b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e051  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071ec  00000000  00000000  0010e0a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080095b8 	.word	0x080095b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080095b8 	.word	0x080095b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <Read16>:

#include "main.h"
#include "INA219.h"

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af04      	add	r7, sp, #16
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6818      	ldr	r0, [r3, #0]
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b40:	9302      	str	r3, [sp, #8]
 8000b42:	2302      	movs	r3, #2
 8000b44:	9301      	str	r3, [sp, #4]
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	f001 f9bc 	bl	8001ecc <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8000b54:	7b3b      	ldrb	r3, [r7, #12]
 8000b56:	021b      	lsls	r3, r3, #8
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	7b7b      	ldrb	r3, [r7, #13]
 8000b5c:	b21b      	sxth	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b21b      	sxth	r3, r3
 8000b62:	b29b      	uxth	r3, r3
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af04      	add	r7, sp, #16
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	70fb      	strb	r3, [r7, #3]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8000b7c:	883b      	ldrh	r3, [r7, #0]
 8000b7e:	0a1b      	lsrs	r3, r3, #8
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8000b86:	883b      	ldrh	r3, [r7, #0]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b98:	9302      	str	r3, [sp, #8]
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	2180      	movs	r1, #128	; 0x80
 8000ba8:	f001 f896 	bl	8001cd8 <HAL_I2C_Mem_Write>
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <INA219_ReadCurrent_raw>:
	return ((result >> 3  ) * 4);

}

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ffb2 	bl	8000b28 <Read16>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	81fb      	strh	r3, [r7, #14]

	return (result );
 8000bc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <INA219_Reset>:

	return (result * 0.01 );
}

void INA219_Reset(INA219_t *ina219)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8000bdc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000be0:	2100      	movs	r1, #0
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffc2 	bl	8000b6c <Write16>
	HAL_Delay(1);
 8000be8:	2001      	movs	r0, #1
 8000bea:	f000 fc77 	bl	80014dc <HAL_Delay>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	461a      	mov	r2, r3
 8000c06:	2105      	movs	r1, #5
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ffaf 	bl	8000b6c <Write16>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8000c22:	887b      	ldrh	r3, [r7, #2]
 8000c24:	461a      	mov	r2, r3
 8000c26:	2100      	movs	r1, #0
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff9f 	bl	8000b6c <Write16>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8000c40:	f643 139f 	movw	r3, #14751	; 0x399f
 8000c44:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <INA219_setCalibration_32V_2A+0x40>)
 8000c48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c4c:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <INA219_setCalibration_32V_2A+0x44>)
 8000c50:	220a      	movs	r2, #10
 8000c52:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <INA219_setCalibration_32V_2A+0x48>)
 8000c56:	2202      	movs	r2, #2
 8000c58:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <INA219_setCalibration_32V_2A+0x40>)
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	4619      	mov	r1, r3
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff ffc8 	bl	8000bf6 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8000c66:	89fb      	ldrh	r3, [r7, #14]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffd3 	bl	8000c16 <INA219_setConfig>
}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20001bda 	.word	0x20001bda
 8000c7c:	20001bd8 	.word	0x20001bd8
 8000c80:	20001bdc 	.word	0x20001bdc

08000c84 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	68ba      	ldr	r2, [r7, #8]
 8000c96:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	79fa      	ldrb	r2, [r7, #7]
 8000c9c:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <INA219_Init+0x5c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <INA219_Init+0x60>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	b299      	uxth	r1, r3
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	68b8      	ldr	r0, [r7, #8]
 8000cb8:	f001 fb70 	bl	800239c <HAL_I2C_IsDeviceReady>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8000cc0:	7dfb      	ldrb	r3, [r7, #23]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d107      	bne.n	8000cd6 <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 8000cc6:	68f8      	ldr	r0, [r7, #12]
 8000cc8:	f7ff ff84 	bl	8000bd4 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f7ff ffb3 	bl	8000c38 <INA219_setCalibration_32V_2A>

		return 1;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e000      	b.n	8000cd8 <INA219_Init+0x54>
	}

	else
	{
		return 0;
 8000cd6:	2300      	movs	r3, #0
	}
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20001bd8 	.word	0x20001bd8
 8000ce4:	20001bdc 	.word	0x20001bdc

08000ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cec:	f000 fbc4 	bl	8001478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf0:	f000 f81a 	bl	8000d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf4:	f000 f8b6 	bl	8000e64 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cf8:	f000 f85c 	bl	8000db4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000cfc:	f000 f888 	bl	8000e10 <MX_USART3_UART_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d00:	f003 f820 	bl	8003d44 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d04:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <main+0x34>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <main+0x38>)
 8000d0a:	f003 f881 	bl	8003e10 <osThreadNew>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <main+0x3c>)
 8000d12:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d14:	f003 f848 	bl	8003da8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <main+0x30>
 8000d1a:	bf00      	nop
 8000d1c:	08009614 	.word	0x08009614
 8000d20:	08000f15 	.word	0x08000f15
 8000d24:	20001be0 	.word	0x20001be0

08000d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b090      	sub	sp, #64	; 0x40
 8000d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2e:	f107 0318 	add.w	r3, r7, #24
 8000d32:	2228      	movs	r2, #40	; 0x28
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f005 fe39 	bl	80069ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d66:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6c:	f107 0318 	add.w	r3, r7, #24
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 ff9b 	bl	8002cac <HAL_RCC_OscConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d7c:	f000 f950 	bl	8001020 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d80:	230f      	movs	r3, #15
 8000d82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d84:	2302      	movs	r3, #2
 8000d86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2102      	movs	r1, #2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fa06 	bl	80031ac <HAL_RCC_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000da6:	f000 f93b 	bl	8001020 <Error_Handler>
  }
}
 8000daa:	bf00      	nop
 8000dac:	3740      	adds	r7, #64	; 0x40
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dba:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <MX_I2C1_Init+0x54>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dc0:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <MX_I2C1_Init+0x58>)
 8000dc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000df2:	f000 fe2d 	bl	8001a50 <HAL_I2C_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dfc:	f000 f910 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20001c28 	.word	0x20001c28
 8000e08:	40005400 	.word	0x40005400
 8000e0c:	000186a0 	.word	0x000186a0

08000e10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <MX_USART3_UART_Init+0x50>)
 8000e18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e36:	220c      	movs	r2, #12
 8000e38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e48:	f002 fdc4 	bl	80039d4 <HAL_UART_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e52:	f000 f8e5 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20001be4 	.word	0x20001be4
 8000e60:	40004800 	.word	0x40004800

08000e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e78:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <MX_GPIO_Init+0xa8>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a23      	ldr	r2, [pc, #140]	; (8000f0c <MX_GPIO_Init+0xa8>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <MX_GPIO_Init+0xa8>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0310 	and.w	r3, r3, #16
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <MX_GPIO_Init+0xa8>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a1d      	ldr	r2, [pc, #116]	; (8000f0c <MX_GPIO_Init+0xa8>)
 8000e96:	f043 0320 	orr.w	r3, r3, #32
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <MX_GPIO_Init+0xa8>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0320 	and.w	r3, r3, #32
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_GPIO_Init+0xa8>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a17      	ldr	r2, [pc, #92]	; (8000f0c <MX_GPIO_Init+0xa8>)
 8000eae:	f043 0308 	orr.w	r3, r3, #8
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <MX_GPIO_Init+0xa8>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0308 	and.w	r3, r3, #8
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_GPIO_Init+0xa8>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a11      	ldr	r2, [pc, #68]	; (8000f0c <MX_GPIO_Init+0xa8>)
 8000ec6:	f043 0304 	orr.w	r3, r3, #4
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_GPIO_Init+0xa8>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ede:	480c      	ldr	r0, [pc, #48]	; (8000f10 <MX_GPIO_Init+0xac>)
 8000ee0:	f000 fd84 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	4619      	mov	r1, r3
 8000efc:	4804      	ldr	r0, [pc, #16]	; (8000f10 <MX_GPIO_Init+0xac>)
 8000efe:	f000 fbf1 	bl	80016e4 <HAL_GPIO_Init>

}
 8000f02:	bf00      	nop
 8000f04:	3720      	adds	r7, #32
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40011000 	.word	0x40011000

08000f14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b08f      	sub	sp, #60	; 0x3c
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
//	HAL_StatusTypeDef ret; // status return value
	uint8_t buf[32];
//	uint16_t val;
	uint16_t rawCurrent = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	857b      	strh	r3, [r7, #42]	; 0x2a
	float current = 0;
 8000f20:	f04f 0300 	mov.w	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS));
 8000f26:	bf00      	nop
 8000f28:	2240      	movs	r2, #64	; 0x40
 8000f2a:	492e      	ldr	r1, [pc, #184]	; (8000fe4 <StartDefaultTask+0xd0>)
 8000f2c:	482e      	ldr	r0, [pc, #184]	; (8000fe8 <StartDefaultTask+0xd4>)
 8000f2e:	f7ff fea9 	bl	8000c84 <INA219_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0f7      	beq.n	8000f28 <StartDefaultTask+0x14>
		  // inicializo el ina


  for(;;)
  {
	    rawCurrent = INA219_ReadCurrent_raw(&ina219); // mA?
 8000f38:	482b      	ldr	r0, [pc, #172]	; (8000fe8 <StartDefaultTask+0xd4>)
 8000f3a:	f7ff fe3b 	bl	8000bb4 <INA219_ReadCurrent_raw>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	857b      	strh	r3, [r7, #42]	; 0x2a
	    if(rawCurrent > 32767){
 8000f42:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	da15      	bge.n	8000f76 <StartDefaultTask+0x62>
	    	//hago complemento a 2
	    	uint16_t complementCurrent = (0xFFFF - rawCurrent)+1;
 8000f4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000f4c:	425b      	negs	r3, r3
 8000f4e:	853b      	strh	r3, [r7, #40]	; 0x28
	    	current = - complementCurrent / 10.0;
 8000f50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f52:	425b      	negs	r3, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fa55 	bl	8000404 <__aeabi_i2d>
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	4b23      	ldr	r3, [pc, #140]	; (8000fec <StartDefaultTask+0xd8>)
 8000f60:	f7ff fbe4 	bl	800072c <__aeabi_ddiv>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f7ff fd8c 	bl	8000a88 <__aeabi_d2f>
 8000f70:	4603      	mov	r3, r0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f74:	e010      	b.n	8000f98 <StartDefaultTask+0x84>

	    } else {
	    	current = rawCurrent/10.0; // mA
 8000f76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fa43 	bl	8000404 <__aeabi_i2d>
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <StartDefaultTask+0xd8>)
 8000f84:	f7ff fbd2 	bl	800072c <__aeabi_ddiv>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f7ff fd7a 	bl	8000a88 <__aeabi_d2f>
 8000f94:	4603      	mov	r3, r0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
	    }
	    sprintf((char*)buf,"%u o %.2f mA\r\n",(unsigned int)rawCurrent,current);
 8000f98:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8000f9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f9c:	f7ff fa44 	bl	8000428 <__aeabi_f2d>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	f107 0008 	add.w	r0, r7, #8
 8000fa8:	e9cd 2300 	strd	r2, r3, [sp]
 8000fac:	4622      	mov	r2, r4
 8000fae:	4910      	ldr	r1, [pc, #64]	; (8000ff0 <StartDefaultTask+0xdc>)
 8000fb0:	f006 fa3a 	bl	8007428 <siprintf>
	    HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), 1000);
 8000fb4:	f107 0308 	add.w	r3, r7, #8
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff f8c9 	bl	8000150 <strlen>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	f107 0108 	add.w	r1, r7, #8
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	480a      	ldr	r0, [pc, #40]	; (8000ff4 <StartDefaultTask+0xe0>)
 8000fcc:	f002 fd4f 	bl	8003a6e <HAL_UART_Transmit>
	    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000fd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fd4:	4808      	ldr	r0, [pc, #32]	; (8000ff8 <StartDefaultTask+0xe4>)
 8000fd6:	f000 fd21 	bl	8001a1c <HAL_GPIO_TogglePin>


	    osDelay(500);
 8000fda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fde:	f002 ffc1 	bl	8003f64 <osDelay>
	    rawCurrent = INA219_ReadCurrent_raw(&ina219); // mA?
 8000fe2:	e7a9      	b.n	8000f38 <StartDefaultTask+0x24>
 8000fe4:	20001c28 	.word	0x20001c28
 8000fe8:	20001c7c 	.word	0x20001c7c
 8000fec:	40240000 	.word	0x40240000
 8000ff0:	080095dc 	.word	0x080095dc
 8000ff4:	20001be4 	.word	0x20001be4
 8000ff8:	40011000 	.word	0x40011000

08000ffc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d101      	bne.n	8001012 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800100e:	f000 fa49 	bl	80014a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40000800 	.word	0x40000800

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	e7fe      	b.n	8001028 <Error_Handler+0x8>
	...

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_MspInit+0x68>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a17      	ldr	r2, [pc, #92]	; (8001094 <HAL_MspInit+0x68>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_MspInit+0x68>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_MspInit+0x68>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a11      	ldr	r2, [pc, #68]	; (8001094 <HAL_MspInit+0x68>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	61d3      	str	r3, [r2, #28]
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <HAL_MspInit+0x68>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	210f      	movs	r1, #15
 8001066:	f06f 0001 	mvn.w	r0, #1
 800106a:	f000 fb10 	bl	800168e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_MspInit+0x6c>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_MspInit+0x6c>)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000
 8001098:	40010000 	.word	0x40010000

0800109c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a15      	ldr	r2, [pc, #84]	; (800110c <HAL_I2C_MspInit+0x70>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d123      	bne.n	8001104 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <HAL_I2C_MspInit+0x74>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a13      	ldr	r2, [pc, #76]	; (8001110 <HAL_I2C_MspInit+0x74>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_I2C_MspInit+0x74>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010d4:	23c0      	movs	r3, #192	; 0xc0
 80010d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d8:	2312      	movs	r3, #18
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	480b      	ldr	r0, [pc, #44]	; (8001114 <HAL_I2C_MspInit+0x78>)
 80010e8:	f000 fafc 	bl	80016e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_I2C_MspInit+0x74>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	4a07      	ldr	r2, [pc, #28]	; (8001110 <HAL_I2C_MspInit+0x74>)
 80010f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010f6:	61d3      	str	r3, [r2, #28]
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <HAL_I2C_MspInit+0x74>)
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40005400 	.word	0x40005400
 8001110:	40021000 	.word	0x40021000
 8001114:	40010c00 	.word	0x40010c00

08001118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <HAL_UART_MspInit+0x8c>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d131      	bne.n	800119c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HAL_UART_MspInit+0x90>)
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	4a1a      	ldr	r2, [pc, #104]	; (80011a8 <HAL_UART_MspInit+0x90>)
 800113e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001142:	61d3      	str	r3, [r2, #28]
 8001144:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <HAL_UART_MspInit+0x90>)
 8001146:	69db      	ldr	r3, [r3, #28]
 8001148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_UART_MspInit+0x90>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <HAL_UART_MspInit+0x90>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_UART_MspInit+0x90>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	4619      	mov	r1, r3
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <HAL_UART_MspInit+0x94>)
 800117e:	f000 fab1 	bl	80016e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001182:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001186:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4619      	mov	r1, r3
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <HAL_UART_MspInit+0x94>)
 8001198:	f000 faa4 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40004800 	.word	0x40004800
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010c00 	.word	0x40010c00

080011b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	; 0x30
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	201e      	movs	r0, #30
 80011c6:	f000 fa62 	bl	800168e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011ca:	201e      	movs	r0, #30
 80011cc:	f000 fa7b 	bl	80016c6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <HAL_InitTick+0xa0>)
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	4a1e      	ldr	r2, [pc, #120]	; (8001250 <HAL_InitTick+0xa0>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	61d3      	str	r3, [r2, #28]
 80011dc:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <HAL_InitTick+0xa0>)
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011e8:	f107 0210 	add.w	r2, r7, #16
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f002 f956 	bl	80034a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80011f8:	f002 f92c 	bl	8003454 <HAL_RCC_GetPCLK1Freq>
 80011fc:	4603      	mov	r3, r0
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001204:	4a13      	ldr	r2, [pc, #76]	; (8001254 <HAL_InitTick+0xa4>)
 8001206:	fba2 2303 	umull	r2, r3, r2, r3
 800120a:	0c9b      	lsrs	r3, r3, #18
 800120c:	3b01      	subs	r3, #1
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_InitTick+0xa8>)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <HAL_InitTick+0xac>)
 8001214:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_InitTick+0xa8>)
 8001218:	f240 32e7 	movw	r2, #999	; 0x3e7
 800121c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800121e:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <HAL_InitTick+0xa8>)
 8001220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001222:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_InitTick+0xa8>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_InitTick+0xa8>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <HAL_InitTick+0xa8>)
 8001232:	f002 f985 	bl	8003540 <HAL_TIM_Base_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d104      	bne.n	8001246 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800123c:	4806      	ldr	r0, [pc, #24]	; (8001258 <HAL_InitTick+0xa8>)
 800123e:	f002 f9d7 	bl	80035f0 <HAL_TIM_Base_Start_IT>
 8001242:	4603      	mov	r3, r0
 8001244:	e000      	b.n	8001248 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3730      	adds	r7, #48	; 0x30
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000
 8001254:	431bde83 	.word	0x431bde83
 8001258:	20001c88 	.word	0x20001c88
 800125c:	40000800 	.word	0x40000800

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <NMI_Handler+0x4>

08001266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <MemManage_Handler+0x4>

08001272 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <BusFault_Handler+0x4>

08001278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <UsageFault_Handler+0x4>

0800127e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
	...

0800128c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <TIM4_IRQHandler+0x10>)
 8001292:	f002 f9ff 	bl	8003694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20001c88 	.word	0x20001c88

080012a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
	return 1;
 80012a4:	2301      	movs	r3, #1
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <_kill>:

int _kill(int pid, int sig)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012b8:	f005 fa48 	bl	800674c <__errno>
 80012bc:	4603      	mov	r3, r0
 80012be:	2216      	movs	r2, #22
 80012c0:	601a      	str	r2, [r3, #0]
	return -1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <_exit>:

void _exit (int status)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012d6:	f04f 31ff 	mov.w	r1, #4294967295
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffe7 	bl	80012ae <_kill>
	while (1) {}		/* Make sure we hang here */
 80012e0:	e7fe      	b.n	80012e0 <_exit+0x12>

080012e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	e00a      	b.n	800130a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012f4:	f3af 8000 	nop.w
 80012f8:	4601      	mov	r1, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1c5a      	adds	r2, r3, #1
 80012fe:	60ba      	str	r2, [r7, #8]
 8001300:	b2ca      	uxtb	r2, r1
 8001302:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	3301      	adds	r3, #1
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	429a      	cmp	r2, r3
 8001310:	dbf0      	blt.n	80012f4 <_read+0x12>
	}

return len;
 8001312:	687b      	ldr	r3, [r7, #4]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	e009      	b.n	8001342 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	60ba      	str	r2, [r7, #8]
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	3301      	adds	r3, #1
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	429a      	cmp	r2, r3
 8001348:	dbf1      	blt.n	800132e <_write+0x12>
	}
	return len;
 800134a:	687b      	ldr	r3, [r7, #4]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <_close>:

int _close(int file)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	return -1;
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800137a:	605a      	str	r2, [r3, #4]
	return 0;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <_isatty>:

int _isatty(int file)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	return 1;
 8001390:	2301      	movs	r3, #1
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
	return 0;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013bc:	4a14      	ldr	r2, [pc, #80]	; (8001410 <_sbrk+0x5c>)
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <_sbrk+0x60>)
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <_sbrk+0x64>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <_sbrk+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d207      	bcs.n	80013f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e4:	f005 f9b2 	bl	800674c <__errno>
 80013e8:	4603      	mov	r3, r0
 80013ea:	220c      	movs	r2, #12
 80013ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	e009      	b.n	8001408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <_sbrk+0x64>)
 8001404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20005000 	.word	0x20005000
 8001414:	00000400 	.word	0x00000400
 8001418:	200001fc 	.word	0x200001fc
 800141c:	20001d28 	.word	0x20001d28

08001420 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800142e:	490d      	ldr	r1, [pc, #52]	; (8001464 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001444:	4c0a      	ldr	r4, [pc, #40]	; (8001470 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001452:	f7ff ffe5 	bl	8001420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f005 fa75 	bl	8006944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800145a:	f7ff fc45 	bl	8000ce8 <main>
  bx lr
 800145e:	4770      	bx	lr
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001468:	08009a3c 	.word	0x08009a3c
  ldr r2, =_sbss
 800146c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001470:	20001d24 	.word	0x20001d24

08001474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC1_2_IRQHandler>
	...

08001478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_Init+0x28>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_Init+0x28>)
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 f8f5 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148e:	200f      	movs	r0, #15
 8001490:	f7ff fe8e 	bl	80011b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff fdca 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40022000 	.word	0x40022000

080014a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_IncTick+0x1c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_IncTick+0x20>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <HAL_IncTick+0x20>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	20000008 	.word	0x20000008
 80014c4:	20001cd0 	.word	0x20001cd0

080014c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b02      	ldr	r3, [pc, #8]	; (80014d8 <HAL_GetTick+0x10>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	20001cd0 	.word	0x20001cd0

080014dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff fff0 	bl	80014c8 <HAL_GetTick>
 80014e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d005      	beq.n	8001502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_Delay+0x44>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001502:	bf00      	nop
 8001504:	f7ff ffe0 	bl	80014c8 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d8f7      	bhi.n	8001504 <HAL_Delay+0x28>
  {
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000008 	.word	0x20000008

08001524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800154c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <__NVIC_GetPriorityGrouping+0x18>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0307 	and.w	r3, r3, #7
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db0b      	blt.n	80015b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f003 021f 	and.w	r2, r3, #31
 80015a0:	4906      	ldr	r1, [pc, #24]	; (80015bc <__NVIC_EnableIRQ+0x34>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	2001      	movs	r0, #1
 80015aa:	fa00 f202 	lsl.w	r2, r0, r2
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	e000e100 	.word	0xe000e100

080015c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db0a      	blt.n	80015ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	490c      	ldr	r1, [pc, #48]	; (800160c <__NVIC_SetPriority+0x4c>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	440b      	add	r3, r1
 80015e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e8:	e00a      	b.n	8001600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4908      	ldr	r1, [pc, #32]	; (8001610 <__NVIC_SetPriority+0x50>)
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	3b04      	subs	r3, #4
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	440b      	add	r3, r1
 80015fe:	761a      	strb	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000e100 	.word	0xe000e100
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	; 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f1c3 0307 	rsb	r3, r3, #7
 800162e:	2b04      	cmp	r3, #4
 8001630:	bf28      	it	cs
 8001632:	2304      	movcs	r3, #4
 8001634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3304      	adds	r3, #4
 800163a:	2b06      	cmp	r3, #6
 800163c:	d902      	bls.n	8001644 <NVIC_EncodePriority+0x30>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b03      	subs	r3, #3
 8001642:	e000      	b.n	8001646 <NVIC_EncodePriority+0x32>
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	401a      	ands	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43d9      	mvns	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	4313      	orrs	r3, r2
         );
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	; 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff4f 	bl	8001524 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff64 	bl	800156c <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ffb2 	bl	8001614 <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff81 	bl	80015c0 <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff57 	bl	8001588 <__NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b08b      	sub	sp, #44	; 0x2c
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f6:	e169      	b.n	80019cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016f8:	2201      	movs	r2, #1
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	429a      	cmp	r2, r3
 8001712:	f040 8158 	bne.w	80019c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4a9a      	ldr	r2, [pc, #616]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d05e      	beq.n	80017de <HAL_GPIO_Init+0xfa>
 8001720:	4a98      	ldr	r2, [pc, #608]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d875      	bhi.n	8001812 <HAL_GPIO_Init+0x12e>
 8001726:	4a98      	ldr	r2, [pc, #608]	; (8001988 <HAL_GPIO_Init+0x2a4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d058      	beq.n	80017de <HAL_GPIO_Init+0xfa>
 800172c:	4a96      	ldr	r2, [pc, #600]	; (8001988 <HAL_GPIO_Init+0x2a4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d86f      	bhi.n	8001812 <HAL_GPIO_Init+0x12e>
 8001732:	4a96      	ldr	r2, [pc, #600]	; (800198c <HAL_GPIO_Init+0x2a8>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d052      	beq.n	80017de <HAL_GPIO_Init+0xfa>
 8001738:	4a94      	ldr	r2, [pc, #592]	; (800198c <HAL_GPIO_Init+0x2a8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d869      	bhi.n	8001812 <HAL_GPIO_Init+0x12e>
 800173e:	4a94      	ldr	r2, [pc, #592]	; (8001990 <HAL_GPIO_Init+0x2ac>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d04c      	beq.n	80017de <HAL_GPIO_Init+0xfa>
 8001744:	4a92      	ldr	r2, [pc, #584]	; (8001990 <HAL_GPIO_Init+0x2ac>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d863      	bhi.n	8001812 <HAL_GPIO_Init+0x12e>
 800174a:	4a92      	ldr	r2, [pc, #584]	; (8001994 <HAL_GPIO_Init+0x2b0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d046      	beq.n	80017de <HAL_GPIO_Init+0xfa>
 8001750:	4a90      	ldr	r2, [pc, #576]	; (8001994 <HAL_GPIO_Init+0x2b0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d85d      	bhi.n	8001812 <HAL_GPIO_Init+0x12e>
 8001756:	2b12      	cmp	r3, #18
 8001758:	d82a      	bhi.n	80017b0 <HAL_GPIO_Init+0xcc>
 800175a:	2b12      	cmp	r3, #18
 800175c:	d859      	bhi.n	8001812 <HAL_GPIO_Init+0x12e>
 800175e:	a201      	add	r2, pc, #4	; (adr r2, 8001764 <HAL_GPIO_Init+0x80>)
 8001760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001764:	080017df 	.word	0x080017df
 8001768:	080017b9 	.word	0x080017b9
 800176c:	080017cb 	.word	0x080017cb
 8001770:	0800180d 	.word	0x0800180d
 8001774:	08001813 	.word	0x08001813
 8001778:	08001813 	.word	0x08001813
 800177c:	08001813 	.word	0x08001813
 8001780:	08001813 	.word	0x08001813
 8001784:	08001813 	.word	0x08001813
 8001788:	08001813 	.word	0x08001813
 800178c:	08001813 	.word	0x08001813
 8001790:	08001813 	.word	0x08001813
 8001794:	08001813 	.word	0x08001813
 8001798:	08001813 	.word	0x08001813
 800179c:	08001813 	.word	0x08001813
 80017a0:	08001813 	.word	0x08001813
 80017a4:	08001813 	.word	0x08001813
 80017a8:	080017c1 	.word	0x080017c1
 80017ac:	080017d5 	.word	0x080017d5
 80017b0:	4a79      	ldr	r2, [pc, #484]	; (8001998 <HAL_GPIO_Init+0x2b4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d013      	beq.n	80017de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017b6:	e02c      	b.n	8001812 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	623b      	str	r3, [r7, #32]
          break;
 80017be:	e029      	b.n	8001814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	3304      	adds	r3, #4
 80017c6:	623b      	str	r3, [r7, #32]
          break;
 80017c8:	e024      	b.n	8001814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	3308      	adds	r3, #8
 80017d0:	623b      	str	r3, [r7, #32]
          break;
 80017d2:	e01f      	b.n	8001814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	330c      	adds	r3, #12
 80017da:	623b      	str	r3, [r7, #32]
          break;
 80017dc:	e01a      	b.n	8001814 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017e6:	2304      	movs	r3, #4
 80017e8:	623b      	str	r3, [r7, #32]
          break;
 80017ea:	e013      	b.n	8001814 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d105      	bne.n	8001800 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f4:	2308      	movs	r3, #8
 80017f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	611a      	str	r2, [r3, #16]
          break;
 80017fe:	e009      	b.n	8001814 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001800:	2308      	movs	r3, #8
 8001802:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	615a      	str	r2, [r3, #20]
          break;
 800180a:	e003      	b.n	8001814 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
          break;
 8001810:	e000      	b.n	8001814 <HAL_GPIO_Init+0x130>
          break;
 8001812:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2bff      	cmp	r3, #255	; 0xff
 8001818:	d801      	bhi.n	800181e <HAL_GPIO_Init+0x13a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	e001      	b.n	8001822 <HAL_GPIO_Init+0x13e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3304      	adds	r3, #4
 8001822:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2bff      	cmp	r3, #255	; 0xff
 8001828:	d802      	bhi.n	8001830 <HAL_GPIO_Init+0x14c>
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	e002      	b.n	8001836 <HAL_GPIO_Init+0x152>
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	3b08      	subs	r3, #8
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	210f      	movs	r1, #15
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	401a      	ands	r2, r3
 8001848:	6a39      	ldr	r1, [r7, #32]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	431a      	orrs	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 80b1 	beq.w	80019c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001864:	4b4d      	ldr	r3, [pc, #308]	; (800199c <HAL_GPIO_Init+0x2b8>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a4c      	ldr	r2, [pc, #304]	; (800199c <HAL_GPIO_Init+0x2b8>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b4a      	ldr	r3, [pc, #296]	; (800199c <HAL_GPIO_Init+0x2b8>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800187c:	4a48      	ldr	r2, [pc, #288]	; (80019a0 <HAL_GPIO_Init+0x2bc>)
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	3302      	adds	r3, #2
 8001884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001888:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	220f      	movs	r2, #15
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	4013      	ands	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a40      	ldr	r2, [pc, #256]	; (80019a4 <HAL_GPIO_Init+0x2c0>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d013      	beq.n	80018d0 <HAL_GPIO_Init+0x1ec>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a3f      	ldr	r2, [pc, #252]	; (80019a8 <HAL_GPIO_Init+0x2c4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d00d      	beq.n	80018cc <HAL_GPIO_Init+0x1e8>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a3e      	ldr	r2, [pc, #248]	; (80019ac <HAL_GPIO_Init+0x2c8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d007      	beq.n	80018c8 <HAL_GPIO_Init+0x1e4>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a3d      	ldr	r2, [pc, #244]	; (80019b0 <HAL_GPIO_Init+0x2cc>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d101      	bne.n	80018c4 <HAL_GPIO_Init+0x1e0>
 80018c0:	2303      	movs	r3, #3
 80018c2:	e006      	b.n	80018d2 <HAL_GPIO_Init+0x1ee>
 80018c4:	2304      	movs	r3, #4
 80018c6:	e004      	b.n	80018d2 <HAL_GPIO_Init+0x1ee>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e002      	b.n	80018d2 <HAL_GPIO_Init+0x1ee>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <HAL_GPIO_Init+0x1ee>
 80018d0:	2300      	movs	r3, #0
 80018d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d4:	f002 0203 	and.w	r2, r2, #3
 80018d8:	0092      	lsls	r2, r2, #2
 80018da:	4093      	lsls	r3, r2
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018e2:	492f      	ldr	r1, [pc, #188]	; (80019a0 <HAL_GPIO_Init+0x2bc>)
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	3302      	adds	r3, #2
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018fc:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	492c      	ldr	r1, [pc, #176]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
 8001908:	e006      	b.n	8001918 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800190a:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	43db      	mvns	r3, r3
 8001912:	4928      	ldr	r1, [pc, #160]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 8001914:	4013      	ands	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d006      	beq.n	8001932 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001924:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	4922      	ldr	r1, [pc, #136]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	43db      	mvns	r3, r3
 800193a:	491e      	ldr	r1, [pc, #120]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 800193c:	4013      	ands	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d006      	beq.n	800195a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	4918      	ldr	r1, [pc, #96]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	608b      	str	r3, [r1, #8]
 8001958:	e006      	b.n	8001968 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	43db      	mvns	r3, r3
 8001962:	4914      	ldr	r1, [pc, #80]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 8001964:	4013      	ands	r3, r2
 8001966:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d021      	beq.n	80019b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	490e      	ldr	r1, [pc, #56]	; (80019b4 <HAL_GPIO_Init+0x2d0>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	60cb      	str	r3, [r1, #12]
 8001980:	e021      	b.n	80019c6 <HAL_GPIO_Init+0x2e2>
 8001982:	bf00      	nop
 8001984:	10320000 	.word	0x10320000
 8001988:	10310000 	.word	0x10310000
 800198c:	10220000 	.word	0x10220000
 8001990:	10210000 	.word	0x10210000
 8001994:	10120000 	.word	0x10120000
 8001998:	10110000 	.word	0x10110000
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010000 	.word	0x40010000
 80019a4:	40010800 	.word	0x40010800
 80019a8:	40010c00 	.word	0x40010c00
 80019ac:	40011000 	.word	0x40011000
 80019b0:	40011400 	.word	0x40011400
 80019b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_GPIO_Init+0x304>)
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	43db      	mvns	r3, r3
 80019c0:	4909      	ldr	r1, [pc, #36]	; (80019e8 <HAL_GPIO_Init+0x304>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	3301      	adds	r3, #1
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	fa22 f303 	lsr.w	r3, r2, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f47f ae8e 	bne.w	80016f8 <HAL_GPIO_Init+0x14>
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	372c      	adds	r7, #44	; 0x2c
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	40010400 	.word	0x40010400

080019ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
 80019f8:	4613      	mov	r3, r2
 80019fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019fc:	787b      	ldrb	r3, [r7, #1]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a08:	e003      	b.n	8001a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	041a      	lsls	r2, r3, #16
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	611a      	str	r2, [r3, #16]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	041a      	lsls	r2, r3, #16
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43d9      	mvns	r1, r3
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	400b      	ands	r3, r1
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	611a      	str	r2, [r3, #16]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
	...

08001a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e12b      	b.n	8001cba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d106      	bne.n	8001a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fb10 	bl	800109c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2224      	movs	r2, #36	; 0x24
 8001a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0201 	bic.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ab2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ab4:	f001 fcce 	bl	8003454 <HAL_RCC_GetPCLK1Freq>
 8001ab8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4a81      	ldr	r2, [pc, #516]	; (8001cc4 <HAL_I2C_Init+0x274>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d807      	bhi.n	8001ad4 <HAL_I2C_Init+0x84>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4a80      	ldr	r2, [pc, #512]	; (8001cc8 <HAL_I2C_Init+0x278>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	bf94      	ite	ls
 8001acc:	2301      	movls	r3, #1
 8001ace:	2300      	movhi	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	e006      	b.n	8001ae2 <HAL_I2C_Init+0x92>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4a7d      	ldr	r2, [pc, #500]	; (8001ccc <HAL_I2C_Init+0x27c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	bf94      	ite	ls
 8001adc:	2301      	movls	r3, #1
 8001ade:	2300      	movhi	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e0e7      	b.n	8001cba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4a78      	ldr	r2, [pc, #480]	; (8001cd0 <HAL_I2C_Init+0x280>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	0c9b      	lsrs	r3, r3, #18
 8001af4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4a6a      	ldr	r2, [pc, #424]	; (8001cc4 <HAL_I2C_Init+0x274>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d802      	bhi.n	8001b24 <HAL_I2C_Init+0xd4>
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	3301      	adds	r3, #1
 8001b22:	e009      	b.n	8001b38 <HAL_I2C_Init+0xe8>
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b2a:	fb02 f303 	mul.w	r3, r2, r3
 8001b2e:	4a69      	ldr	r2, [pc, #420]	; (8001cd4 <HAL_I2C_Init+0x284>)
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
 8001b34:	099b      	lsrs	r3, r3, #6
 8001b36:	3301      	adds	r3, #1
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	495c      	ldr	r1, [pc, #368]	; (8001cc4 <HAL_I2C_Init+0x274>)
 8001b54:	428b      	cmp	r3, r1
 8001b56:	d819      	bhi.n	8001b8c <HAL_I2C_Init+0x13c>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1e59      	subs	r1, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b66:	1c59      	adds	r1, r3, #1
 8001b68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b6c:	400b      	ands	r3, r1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00a      	beq.n	8001b88 <HAL_I2C_Init+0x138>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1e59      	subs	r1, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b80:	3301      	adds	r3, #1
 8001b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b86:	e051      	b.n	8001c2c <HAL_I2C_Init+0x1dc>
 8001b88:	2304      	movs	r3, #4
 8001b8a:	e04f      	b.n	8001c2c <HAL_I2C_Init+0x1dc>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d111      	bne.n	8001bb8 <HAL_I2C_Init+0x168>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1e58      	subs	r0, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6859      	ldr	r1, [r3, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	440b      	add	r3, r1
 8001ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	e012      	b.n	8001bde <HAL_I2C_Init+0x18e>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1e58      	subs	r0, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	0099      	lsls	r1, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf0c      	ite	eq
 8001bd8:	2301      	moveq	r3, #1
 8001bda:	2300      	movne	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_I2C_Init+0x196>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e022      	b.n	8001c2c <HAL_I2C_Init+0x1dc>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10e      	bne.n	8001c0c <HAL_I2C_Init+0x1bc>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1e58      	subs	r0, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6859      	ldr	r1, [r3, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	440b      	add	r3, r1
 8001bfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c00:	3301      	adds	r3, #1
 8001c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c0a:	e00f      	b.n	8001c2c <HAL_I2C_Init+0x1dc>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1e58      	subs	r0, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6859      	ldr	r1, [r3, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	0099      	lsls	r1, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	6809      	ldr	r1, [r1, #0]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69da      	ldr	r2, [r3, #28]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6911      	ldr	r1, [r2, #16]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68d2      	ldr	r2, [r2, #12]
 8001c66:	4311      	orrs	r1, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	000186a0 	.word	0x000186a0
 8001cc8:	001e847f 	.word	0x001e847f
 8001ccc:	003d08ff 	.word	0x003d08ff
 8001cd0:	431bde83 	.word	0x431bde83
 8001cd4:	10624dd3 	.word	0x10624dd3

08001cd8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	4608      	mov	r0, r1
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	817b      	strh	r3, [r7, #10]
 8001cea:	460b      	mov	r3, r1
 8001cec:	813b      	strh	r3, [r7, #8]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cf2:	f7ff fbe9 	bl	80014c8 <HAL_GetTick>
 8001cf6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	f040 80d9 	bne.w	8001eb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2319      	movs	r3, #25
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	496d      	ldr	r1, [pc, #436]	; (8001ec4 <HAL_I2C_Mem_Write+0x1ec>)
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f000 fdef 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e0cc      	b.n	8001eba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_I2C_Mem_Write+0x56>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e0c5      	b.n	8001eba <HAL_I2C_Mem_Write+0x1e2>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d007      	beq.n	8001d54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2221      	movs	r2, #33	; 0x21
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2240      	movs	r2, #64	; 0x40
 8001d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6a3a      	ldr	r2, [r7, #32]
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4a4d      	ldr	r2, [pc, #308]	; (8001ec8 <HAL_I2C_Mem_Write+0x1f0>)
 8001d94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d96:	88f8      	ldrh	r0, [r7, #6]
 8001d98:	893a      	ldrh	r2, [r7, #8]
 8001d9a:	8979      	ldrh	r1, [r7, #10]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	4603      	mov	r3, r0
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 fc26 	bl	80025f8 <I2C_RequestMemoryWrite>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d052      	beq.n	8001e58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e081      	b.n	8001eba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 fe70 	bl	8002aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00d      	beq.n	8001de2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d107      	bne.n	8001dde <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ddc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e06b      	b.n	8001eba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	781a      	ldrb	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d11b      	bne.n	8001e58 <HAL_I2C_Mem_Write+0x180>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d017      	beq.n	8001e58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	781a      	ldrb	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1aa      	bne.n	8001db6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 fe5c 	bl	8002b22 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00d      	beq.n	8001e8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d107      	bne.n	8001e88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e016      	b.n	8001eba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e000      	b.n	8001eba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001eb8:	2302      	movs	r3, #2
  }
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	00100002 	.word	0x00100002
 8001ec8:	ffff0000 	.word	0xffff0000

08001ecc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08c      	sub	sp, #48	; 0x30
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	4608      	mov	r0, r1
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4603      	mov	r3, r0
 8001edc:	817b      	strh	r3, [r7, #10]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	813b      	strh	r3, [r7, #8]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eea:	f7ff faed 	bl	80014c8 <HAL_GetTick>
 8001eee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b20      	cmp	r3, #32
 8001efa:	f040 8244 	bne.w	8002386 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2319      	movs	r3, #25
 8001f04:	2201      	movs	r2, #1
 8001f06:	4982      	ldr	r1, [pc, #520]	; (8002110 <HAL_I2C_Mem_Read+0x244>)
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 fcf3 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001f14:	2302      	movs	r3, #2
 8001f16:	e237      	b.n	8002388 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_I2C_Mem_Read+0x5a>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e230      	b.n	8002388 <HAL_I2C_Mem_Read+0x4bc>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d007      	beq.n	8001f4c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2222      	movs	r2, #34	; 0x22
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2240      	movs	r2, #64	; 0x40
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4a62      	ldr	r2, [pc, #392]	; (8002114 <HAL_I2C_Mem_Read+0x248>)
 8001f8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f8e:	88f8      	ldrh	r0, [r7, #6]
 8001f90:	893a      	ldrh	r2, [r7, #8]
 8001f92:	8979      	ldrh	r1, [r7, #10]
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 fbc0 	bl	8002724 <I2C_RequestMemoryRead>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e1ec      	b.n	8002388 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d113      	bne.n	8001fde <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	e1c0      	b.n	8002360 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d11e      	bne.n	8002024 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff6:	b672      	cpsid	i
}
 8001ff8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800201e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002020:	b662      	cpsie	i
}
 8002022:	e035      	b.n	8002090 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002028:	2b02      	cmp	r3, #2
 800202a:	d11e      	bne.n	800206a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800203a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800203c:	b672      	cpsid	i
}
 800203e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002064:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002066:	b662      	cpsie	i
}
 8002068:	e012      	b.n	8002090 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002078:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002090:	e166      	b.n	8002360 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002096:	2b03      	cmp	r3, #3
 8002098:	f200 811f 	bhi.w	80022da <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d123      	bne.n	80020ec <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 fd7b 	bl	8002ba4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e167      	b.n	8002388 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020ea:	e139      	b.n	8002360 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d152      	bne.n	800219a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fa:	2200      	movs	r2, #0
 80020fc:	4906      	ldr	r1, [pc, #24]	; (8002118 <HAL_I2C_Mem_Read+0x24c>)
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 fbf8 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d008      	beq.n	800211c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e13c      	b.n	8002388 <HAL_I2C_Mem_Read+0x4bc>
 800210e:	bf00      	nop
 8002110:	00100002 	.word	0x00100002
 8002114:	ffff0000 	.word	0xffff0000
 8002118:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800211c:	b672      	cpsid	i
}
 800211e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800212e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002162:	b662      	cpsie	i
}
 8002164:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218e:	b29b      	uxth	r3, r3
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002198:	e0e2      	b.n	8002360 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a0:	2200      	movs	r2, #0
 80021a2:	497b      	ldr	r1, [pc, #492]	; (8002390 <HAL_I2C_Mem_Read+0x4c4>)
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 fba5 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0e9      	b.n	8002388 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021c4:	b672      	cpsid	i
}
 80021c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80021fa:	4b66      	ldr	r3, [pc, #408]	; (8002394 <HAL_I2C_Mem_Read+0x4c8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	08db      	lsrs	r3, r3, #3
 8002200:	4a65      	ldr	r2, [pc, #404]	; (8002398 <HAL_I2C_Mem_Read+0x4cc>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0a1a      	lsrs	r2, r3, #8
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	00da      	lsls	r2, r3, #3
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	3b01      	subs	r3, #1
 8002218:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d118      	bne.n	8002252 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2220      	movs	r2, #32
 800222a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f043 0220 	orr.w	r2, r3, #32
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002242:	b662      	cpsie	i
}
 8002244:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e09a      	b.n	8002388 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b04      	cmp	r3, #4
 800225e:	d1d9      	bne.n	8002214 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022a2:	b662      	cpsie	i
}
 80022a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022d8:	e042      	b.n	8002360 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fc60 	bl	8002ba4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e04c      	b.n	8002388 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002316:	b29b      	uxth	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b04      	cmp	r3, #4
 800232c:	d118      	bne.n	8002360 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234a:	3b01      	subs	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	2b00      	cmp	r3, #0
 8002366:	f47f ae94 	bne.w	8002092 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2220      	movs	r2, #32
 800236e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	e000      	b.n	8002388 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002386:	2302      	movs	r3, #2
  }
}
 8002388:	4618      	mov	r0, r3
 800238a:	3728      	adds	r7, #40	; 0x28
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	00010004 	.word	0x00010004
 8002394:	20000000 	.word	0x20000000
 8002398:	14f8b589 	.word	0x14f8b589

0800239c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	460b      	mov	r3, r1
 80023aa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff f88c 	bl	80014c8 <HAL_GetTick>
 80023b0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80023b2:	2301      	movs	r3, #1
 80023b4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b20      	cmp	r3, #32
 80023c0:	f040 8111 	bne.w	80025e6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	2319      	movs	r3, #25
 80023ca:	2201      	movs	r2, #1
 80023cc:	4988      	ldr	r1, [pc, #544]	; (80025f0 <HAL_I2C_IsDeviceReady+0x254>)
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 fa90 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80023da:	2302      	movs	r3, #2
 80023dc:	e104      	b.n	80025e8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_I2C_IsDeviceReady+0x50>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e0fd      	b.n	80025e8 <HAL_I2C_IsDeviceReady+0x24c>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d007      	beq.n	8002412 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002420:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2224      	movs	r2, #36	; 0x24
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4a70      	ldr	r2, [pc, #448]	; (80025f4 <HAL_I2C_IsDeviceReady+0x258>)
 8002434:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002444:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2200      	movs	r2, #0
 800244e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 fa4e 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00d      	beq.n	800247a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800246c:	d103      	bne.n	8002476 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002474:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e0b6      	b.n	80025e8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800247a:	897b      	ldrh	r3, [r7, #10]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002488:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800248a:	f7ff f81d 	bl	80014c8 <HAL_GetTick>
 800248e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b02      	cmp	r3, #2
 800249c:	bf0c      	ite	eq
 800249e:	2301      	moveq	r3, #1
 80024a0:	2300      	movne	r3, #0
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b4:	bf0c      	ite	eq
 80024b6:	2301      	moveq	r3, #1
 80024b8:	2300      	movne	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024be:	e025      	b.n	800250c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024c0:	f7ff f802 	bl	80014c8 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d302      	bcc.n	80024d6 <HAL_I2C_IsDeviceReady+0x13a>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	22a0      	movs	r2, #160	; 0xa0
 80024da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002502:	bf0c      	ite	eq
 8002504:	2301      	moveq	r3, #1
 8002506:	2300      	movne	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2ba0      	cmp	r3, #160	; 0xa0
 8002516:	d005      	beq.n	8002524 <HAL_I2C_IsDeviceReady+0x188>
 8002518:	7dfb      	ldrb	r3, [r7, #23]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <HAL_I2C_IsDeviceReady+0x188>
 800251e:	7dbb      	ldrb	r3, [r7, #22]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0cd      	beq.n	80024c0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d129      	bne.n	800258e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002548:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	2319      	movs	r3, #25
 8002566:	2201      	movs	r2, #1
 8002568:	4921      	ldr	r1, [pc, #132]	; (80025f0 <HAL_I2C_IsDeviceReady+0x254>)
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f9c2 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e036      	b.n	80025e8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e02c      	b.n	80025e8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025a6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2319      	movs	r3, #25
 80025ae:	2201      	movs	r2, #1
 80025b0:	490f      	ldr	r1, [pc, #60]	; (80025f0 <HAL_I2C_IsDeviceReady+0x254>)
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f99e 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e012      	b.n	80025e8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	3301      	adds	r3, #1
 80025c6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	f4ff af32 	bcc.w	8002436 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2220      	movs	r2, #32
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80025e6:	2302      	movs	r3, #2
  }
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3720      	adds	r7, #32
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	00100002 	.word	0x00100002
 80025f4:	ffff0000 	.word	0xffff0000

080025f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	4608      	mov	r0, r1
 8002602:	4611      	mov	r1, r2
 8002604:	461a      	mov	r2, r3
 8002606:	4603      	mov	r3, r0
 8002608:	817b      	strh	r3, [r7, #10]
 800260a:	460b      	mov	r3, r1
 800260c:	813b      	strh	r3, [r7, #8]
 800260e:	4613      	mov	r3, r2
 8002610:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002620:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	2200      	movs	r2, #0
 800262a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f960 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00d      	beq.n	8002656 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002648:	d103      	bne.n	8002652 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002650:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e05f      	b.n	8002716 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002656:	897b      	ldrh	r3, [r7, #10]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002664:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	6a3a      	ldr	r2, [r7, #32]
 800266a:	492d      	ldr	r1, [pc, #180]	; (8002720 <I2C_RequestMemoryWrite+0x128>)
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 f998 	bl	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e04c      	b.n	8002716 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002694:	6a39      	ldr	r1, [r7, #32]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 fa02 	bl	8002aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00d      	beq.n	80026be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d107      	bne.n	80026ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e02b      	b.n	8002716 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d105      	bne.n	80026d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026c4:	893b      	ldrh	r3, [r7, #8]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	611a      	str	r2, [r3, #16]
 80026ce:	e021      	b.n	8002714 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026d0:	893b      	ldrh	r3, [r7, #8]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e0:	6a39      	ldr	r1, [r7, #32]
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f9dc 	bl	8002aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00d      	beq.n	800270a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d107      	bne.n	8002706 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002704:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e005      	b.n	8002716 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800270a:	893b      	ldrh	r3, [r7, #8]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	00010002 	.word	0x00010002

08002724 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af02      	add	r7, sp, #8
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	4608      	mov	r0, r1
 800272e:	4611      	mov	r1, r2
 8002730:	461a      	mov	r2, r3
 8002732:	4603      	mov	r3, r0
 8002734:	817b      	strh	r3, [r7, #10]
 8002736:	460b      	mov	r3, r1
 8002738:	813b      	strh	r3, [r7, #8]
 800273a:	4613      	mov	r3, r2
 800273c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800274c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800275c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	2200      	movs	r2, #0
 8002766:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f8c2 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00d      	beq.n	8002792 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002784:	d103      	bne.n	800278e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e0aa      	b.n	80028e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002792:	897b      	ldrh	r3, [r7, #10]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	6a3a      	ldr	r2, [r7, #32]
 80027a6:	4952      	ldr	r1, [pc, #328]	; (80028f0 <I2C_RequestMemoryRead+0x1cc>)
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f8fa 	bl	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e097      	b.n	80028e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d0:	6a39      	ldr	r1, [r7, #32]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f964 	bl	8002aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00d      	beq.n	80027fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d107      	bne.n	80027f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e076      	b.n	80028e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d105      	bne.n	800280c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002800:	893b      	ldrh	r3, [r7, #8]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	611a      	str	r2, [r3, #16]
 800280a:	e021      	b.n	8002850 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800280c:	893b      	ldrh	r3, [r7, #8]
 800280e:	0a1b      	lsrs	r3, r3, #8
 8002810:	b29b      	uxth	r3, r3
 8002812:	b2da      	uxtb	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800281a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281c:	6a39      	ldr	r1, [r7, #32]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f93e 	bl	8002aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00d      	beq.n	8002846 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	2b04      	cmp	r3, #4
 8002830:	d107      	bne.n	8002842 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002840:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e050      	b.n	80028e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002846:	893b      	ldrh	r3, [r7, #8]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002852:	6a39      	ldr	r1, [r7, #32]
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f923 	bl	8002aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00d      	beq.n	800287c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	2b04      	cmp	r3, #4
 8002866:	d107      	bne.n	8002878 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002876:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e035      	b.n	80028e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800288a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	2200      	movs	r2, #0
 8002894:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f82b 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00d      	beq.n	80028c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028b2:	d103      	bne.n	80028bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e013      	b.n	80028e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028c0:	897b      	ldrh	r3, [r7, #10]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	6a3a      	ldr	r2, [r7, #32]
 80028d4:	4906      	ldr	r1, [pc, #24]	; (80028f0 <I2C_RequestMemoryRead+0x1cc>)
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f863 	bl	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	00010002 	.word	0x00010002

080028f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	4613      	mov	r3, r2
 8002902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002904:	e025      	b.n	8002952 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d021      	beq.n	8002952 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290e:	f7fe fddb 	bl	80014c8 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d302      	bcc.n	8002924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d116      	bne.n	8002952 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f043 0220 	orr.w	r2, r3, #32
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e023      	b.n	800299a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	0c1b      	lsrs	r3, r3, #16
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b01      	cmp	r3, #1
 800295a:	d10d      	bne.n	8002978 <I2C_WaitOnFlagUntilTimeout+0x84>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	43da      	mvns	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4013      	ands	r3, r2
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	bf0c      	ite	eq
 800296e:	2301      	moveq	r3, #1
 8002970:	2300      	movne	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	e00c      	b.n	8002992 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4013      	ands	r3, r2
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	bf0c      	ite	eq
 800298a:	2301      	moveq	r3, #1
 800298c:	2300      	movne	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	429a      	cmp	r2, r3
 8002996:	d0b6      	beq.n	8002906 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029b0:	e051      	b.n	8002a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c0:	d123      	bne.n	8002a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f043 0204 	orr.w	r2, r3, #4
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e046      	b.n	8002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d021      	beq.n	8002a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a12:	f7fe fd59 	bl	80014c8 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d302      	bcc.n	8002a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d116      	bne.n	8002a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f043 0220 	orr.w	r2, r3, #32
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e020      	b.n	8002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	0c1b      	lsrs	r3, r3, #16
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d10c      	bne.n	8002a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	43da      	mvns	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	bf14      	ite	ne
 8002a72:	2301      	movne	r3, #1
 8002a74:	2300      	moveq	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	e00b      	b.n	8002a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	43da      	mvns	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	4013      	ands	r3, r2
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf14      	ite	ne
 8002a8c:	2301      	movne	r3, #1
 8002a8e:	2300      	moveq	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d18d      	bne.n	80029b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aac:	e02d      	b.n	8002b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f8ce 	bl	8002c50 <I2C_IsAcknowledgeFailed>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e02d      	b.n	8002b1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d021      	beq.n	8002b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac6:	f7fe fcff 	bl	80014c8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d302      	bcc.n	8002adc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d116      	bne.n	8002b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f043 0220 	orr.w	r2, r3, #32
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e007      	b.n	8002b1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b14:	2b80      	cmp	r3, #128	; 0x80
 8002b16:	d1ca      	bne.n	8002aae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b2e:	e02d      	b.n	8002b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f88d 	bl	8002c50 <I2C_IsAcknowledgeFailed>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e02d      	b.n	8002b9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b46:	d021      	beq.n	8002b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b48:	f7fe fcbe 	bl	80014c8 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d302      	bcc.n	8002b5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d116      	bne.n	8002b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f043 0220 	orr.w	r2, r3, #32
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e007      	b.n	8002b9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d1ca      	bne.n	8002b30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bb0:	e042      	b.n	8002c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d119      	bne.n	8002bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0210 	mvn.w	r2, #16
 8002bc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e029      	b.n	8002c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf4:	f7fe fc68 	bl	80014c8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d302      	bcc.n	8002c0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d116      	bne.n	8002c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e007      	b.n	8002c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b40      	cmp	r3, #64	; 0x40
 8002c44:	d1b5      	bne.n	8002bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c66:	d11b      	bne.n	8002ca0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	f043 0204 	orr.w	r2, r3, #4
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e26c      	b.n	8003198 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 8087 	beq.w	8002dda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ccc:	4b92      	ldr	r3, [pc, #584]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d00c      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cd8:	4b8f      	ldr	r3, [pc, #572]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 030c 	and.w	r3, r3, #12
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d112      	bne.n	8002d0a <HAL_RCC_OscConfig+0x5e>
 8002ce4:	4b8c      	ldr	r3, [pc, #560]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf0:	d10b      	bne.n	8002d0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf2:	4b89      	ldr	r3, [pc, #548]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d06c      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x12c>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d168      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e246      	b.n	8003198 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d12:	d106      	bne.n	8002d22 <HAL_RCC_OscConfig+0x76>
 8002d14:	4b80      	ldr	r3, [pc, #512]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a7f      	ldr	r2, [pc, #508]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	e02e      	b.n	8002d80 <HAL_RCC_OscConfig+0xd4>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x98>
 8002d2a:	4b7b      	ldr	r3, [pc, #492]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a7a      	ldr	r2, [pc, #488]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	4b78      	ldr	r3, [pc, #480]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a77      	ldr	r2, [pc, #476]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	e01d      	b.n	8002d80 <HAL_RCC_OscConfig+0xd4>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCC_OscConfig+0xbc>
 8002d4e:	4b72      	ldr	r3, [pc, #456]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a71      	ldr	r2, [pc, #452]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	4b6f      	ldr	r3, [pc, #444]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a6e      	ldr	r2, [pc, #440]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e00b      	b.n	8002d80 <HAL_RCC_OscConfig+0xd4>
 8002d68:	4b6b      	ldr	r3, [pc, #428]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a6a      	ldr	r2, [pc, #424]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	4b68      	ldr	r3, [pc, #416]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a67      	ldr	r2, [pc, #412]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d013      	beq.n	8002db0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe fb9e 	bl	80014c8 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d90:	f7fe fb9a 	bl	80014c8 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1fa      	b.n	8003198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	4b5d      	ldr	r3, [pc, #372]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0xe4>
 8002dae:	e014      	b.n	8002dda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe fb8a 	bl	80014c8 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db8:	f7fe fb86 	bl	80014c8 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e1e6      	b.n	8003198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dca:	4b53      	ldr	r3, [pc, #332]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x10c>
 8002dd6:	e000      	b.n	8002dda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d063      	beq.n	8002eae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002de6:	4b4c      	ldr	r3, [pc, #304]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00b      	beq.n	8002e0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002df2:	4b49      	ldr	r3, [pc, #292]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d11c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x18c>
 8002dfe:	4b46      	ldr	r3, [pc, #280]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d116      	bne.n	8002e38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	4b43      	ldr	r3, [pc, #268]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_RCC_OscConfig+0x176>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e1ba      	b.n	8003198 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e22:	4b3d      	ldr	r3, [pc, #244]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4939      	ldr	r1, [pc, #228]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e36:	e03a      	b.n	8002eae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e40:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e46:	f7fe fb3f 	bl	80014c8 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4e:	f7fe fb3b 	bl	80014c8 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e19b      	b.n	8003198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e60:	4b2d      	ldr	r3, [pc, #180]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6c:	4b2a      	ldr	r3, [pc, #168]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4927      	ldr	r1, [pc, #156]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	600b      	str	r3, [r1, #0]
 8002e80:	e015      	b.n	8002eae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e82:	4b26      	ldr	r3, [pc, #152]	; (8002f1c <HAL_RCC_OscConfig+0x270>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe fb1e 	bl	80014c8 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e90:	f7fe fb1a 	bl	80014c8 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e17a      	b.n	8003198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d03a      	beq.n	8002f30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d019      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec2:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <HAL_RCC_OscConfig+0x274>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec8:	f7fe fafe 	bl	80014c8 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed0:	f7fe fafa 	bl	80014c8 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e15a      	b.n	8003198 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002eee:	2001      	movs	r0, #1
 8002ef0:	f000 fb08 	bl	8003504 <RCC_Delay>
 8002ef4:	e01c      	b.n	8002f30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efc:	f7fe fae4 	bl	80014c8 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f02:	e00f      	b.n	8002f24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f04:	f7fe fae0 	bl	80014c8 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d908      	bls.n	8002f24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e140      	b.n	8003198 <HAL_RCC_OscConfig+0x4ec>
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	42420000 	.word	0x42420000
 8002f20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f24:	4b9e      	ldr	r3, [pc, #632]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1e9      	bne.n	8002f04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 80a6 	beq.w	800308a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f42:	4b97      	ldr	r3, [pc, #604]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10d      	bne.n	8002f6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4e:	4b94      	ldr	r3, [pc, #592]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	4a93      	ldr	r2, [pc, #588]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f58:	61d3      	str	r3, [r2, #28]
 8002f5a:	4b91      	ldr	r3, [pc, #580]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f66:	2301      	movs	r3, #1
 8002f68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6a:	4b8e      	ldr	r3, [pc, #568]	; (80031a4 <HAL_RCC_OscConfig+0x4f8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d118      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f76:	4b8b      	ldr	r3, [pc, #556]	; (80031a4 <HAL_RCC_OscConfig+0x4f8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a8a      	ldr	r2, [pc, #552]	; (80031a4 <HAL_RCC_OscConfig+0x4f8>)
 8002f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f82:	f7fe faa1 	bl	80014c8 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8a:	f7fe fa9d 	bl	80014c8 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b64      	cmp	r3, #100	; 0x64
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e0fd      	b.n	8003198 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9c:	4b81      	ldr	r3, [pc, #516]	; (80031a4 <HAL_RCC_OscConfig+0x4f8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d106      	bne.n	8002fbe <HAL_RCC_OscConfig+0x312>
 8002fb0:	4b7b      	ldr	r3, [pc, #492]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	4a7a      	ldr	r2, [pc, #488]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	6213      	str	r3, [r2, #32]
 8002fbc:	e02d      	b.n	800301a <HAL_RCC_OscConfig+0x36e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x334>
 8002fc6:	4b76      	ldr	r3, [pc, #472]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	4a75      	ldr	r2, [pc, #468]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	6213      	str	r3, [r2, #32]
 8002fd2:	4b73      	ldr	r3, [pc, #460]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	4a72      	ldr	r2, [pc, #456]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8002fd8:	f023 0304 	bic.w	r3, r3, #4
 8002fdc:	6213      	str	r3, [r2, #32]
 8002fde:	e01c      	b.n	800301a <HAL_RCC_OscConfig+0x36e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	2b05      	cmp	r3, #5
 8002fe6:	d10c      	bne.n	8003002 <HAL_RCC_OscConfig+0x356>
 8002fe8:	4b6d      	ldr	r3, [pc, #436]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	4a6c      	ldr	r2, [pc, #432]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8002fee:	f043 0304 	orr.w	r3, r3, #4
 8002ff2:	6213      	str	r3, [r2, #32]
 8002ff4:	4b6a      	ldr	r3, [pc, #424]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	4a69      	ldr	r2, [pc, #420]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6213      	str	r3, [r2, #32]
 8003000:	e00b      	b.n	800301a <HAL_RCC_OscConfig+0x36e>
 8003002:	4b67      	ldr	r3, [pc, #412]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	4a66      	ldr	r2, [pc, #408]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8003008:	f023 0301 	bic.w	r3, r3, #1
 800300c:	6213      	str	r3, [r2, #32]
 800300e:	4b64      	ldr	r3, [pc, #400]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	4a63      	ldr	r2, [pc, #396]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d015      	beq.n	800304e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003022:	f7fe fa51 	bl	80014c8 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe fa4d 	bl	80014c8 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e0ab      	b.n	8003198 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003040:	4b57      	ldr	r3, [pc, #348]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0ee      	beq.n	800302a <HAL_RCC_OscConfig+0x37e>
 800304c:	e014      	b.n	8003078 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304e:	f7fe fa3b 	bl	80014c8 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003054:	e00a      	b.n	800306c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003056:	f7fe fa37 	bl	80014c8 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	f241 3288 	movw	r2, #5000	; 0x1388
 8003064:	4293      	cmp	r3, r2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e095      	b.n	8003198 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800306c:	4b4c      	ldr	r3, [pc, #304]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1ee      	bne.n	8003056 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003078:	7dfb      	ldrb	r3, [r7, #23]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d105      	bne.n	800308a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307e:	4b48      	ldr	r3, [pc, #288]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	4a47      	ldr	r2, [pc, #284]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8003084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003088:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 8081 	beq.w	8003196 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003094:	4b42      	ldr	r3, [pc, #264]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 030c 	and.w	r3, r3, #12
 800309c:	2b08      	cmp	r3, #8
 800309e:	d061      	beq.n	8003164 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d146      	bne.n	8003136 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a8:	4b3f      	ldr	r3, [pc, #252]	; (80031a8 <HAL_RCC_OscConfig+0x4fc>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7fe fa0b 	bl	80014c8 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b6:	f7fe fa07 	bl	80014c8 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e067      	b.n	8003198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c8:	4b35      	ldr	r3, [pc, #212]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f0      	bne.n	80030b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030dc:	d108      	bne.n	80030f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030de:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	492d      	ldr	r1, [pc, #180]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030f0:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a19      	ldr	r1, [r3, #32]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	430b      	orrs	r3, r1
 8003102:	4927      	ldr	r1, [pc, #156]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <HAL_RCC_OscConfig+0x4fc>)
 800310a:	2201      	movs	r2, #1
 800310c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7fe f9db 	bl	80014c8 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003116:	f7fe f9d7 	bl	80014c8 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e037      	b.n	8003198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003128:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x46a>
 8003134:	e02f      	b.n	8003196 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003136:	4b1c      	ldr	r3, [pc, #112]	; (80031a8 <HAL_RCC_OscConfig+0x4fc>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fe f9c4 	bl	80014c8 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003144:	f7fe f9c0 	bl	80014c8 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e020      	b.n	8003198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003156:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x498>
 8003162:	e018      	b.n	8003196 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e013      	b.n	8003198 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_RCC_OscConfig+0x4f4>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	429a      	cmp	r2, r3
 8003182:	d106      	bne.n	8003192 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318e:	429a      	cmp	r2, r3
 8003190:	d001      	beq.n	8003196 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40007000 	.word	0x40007000
 80031a8:	42420060 	.word	0x42420060

080031ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0d0      	b.n	8003362 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031c0:	4b6a      	ldr	r3, [pc, #424]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d910      	bls.n	80031f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b67      	ldr	r3, [pc, #412]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 0207 	bic.w	r2, r3, #7
 80031d6:	4965      	ldr	r1, [pc, #404]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	4313      	orrs	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031de:	4b63      	ldr	r3, [pc, #396]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0b8      	b.n	8003362 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d020      	beq.n	800323e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003208:	4b59      	ldr	r3, [pc, #356]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4a58      	ldr	r2, [pc, #352]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800320e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003212:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003220:	4b53      	ldr	r3, [pc, #332]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4a52      	ldr	r2, [pc, #328]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800322a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800322c:	4b50      	ldr	r3, [pc, #320]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	494d      	ldr	r1, [pc, #308]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	4313      	orrs	r3, r2
 800323c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d040      	beq.n	80032cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003252:	4b47      	ldr	r3, [pc, #284]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d115      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e07f      	b.n	8003362 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326a:	4b41      	ldr	r3, [pc, #260]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e073      	b.n	8003362 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327a:	4b3d      	ldr	r3, [pc, #244]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e06b      	b.n	8003362 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328a:	4b39      	ldr	r3, [pc, #228]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f023 0203 	bic.w	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4936      	ldr	r1, [pc, #216]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800329c:	f7fe f914 	bl	80014c8 <HAL_GetTick>
 80032a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a4:	f7fe f910 	bl	80014c8 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e053      	b.n	8003362 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 020c 	and.w	r2, r3, #12
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d1eb      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032cc:	4b27      	ldr	r3, [pc, #156]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d210      	bcs.n	80032fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b24      	ldr	r3, [pc, #144]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 0207 	bic.w	r2, r3, #7
 80032e2:	4922      	ldr	r1, [pc, #136]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ea:	4b20      	ldr	r3, [pc, #128]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e032      	b.n	8003362 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003308:	4b19      	ldr	r3, [pc, #100]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4916      	ldr	r1, [pc, #88]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 8003316:	4313      	orrs	r3, r2
 8003318:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003326:	4b12      	ldr	r3, [pc, #72]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	490e      	ldr	r1, [pc, #56]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	4313      	orrs	r3, r2
 8003338:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800333a:	f000 f821 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 800333e:	4602      	mov	r2, r0
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	490a      	ldr	r1, [pc, #40]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 800334c:	5ccb      	ldrb	r3, [r1, r3]
 800334e:	fa22 f303 	lsr.w	r3, r2, r3
 8003352:	4a09      	ldr	r2, [pc, #36]	; (8003378 <HAL_RCC_ClockConfig+0x1cc>)
 8003354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_RCC_ClockConfig+0x1d0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd ff28 	bl	80011b0 <HAL_InitTick>

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40022000 	.word	0x40022000
 8003370:	40021000 	.word	0x40021000
 8003374:	08009638 	.word	0x08009638
 8003378:	20000000 	.word	0x20000000
 800337c:	20000004 	.word	0x20000004

08003380 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003380:	b490      	push	{r4, r7}
 8003382:	b08a      	sub	sp, #40	; 0x28
 8003384:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003386:	4b2a      	ldr	r3, [pc, #168]	; (8003430 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003388:	1d3c      	adds	r4, r7, #4
 800338a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800338c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003390:	f240 2301 	movw	r3, #513	; 0x201
 8003394:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	2300      	movs	r3, #0
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033aa:	4b22      	ldr	r3, [pc, #136]	; (8003434 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d002      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x40>
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d003      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0x46>
 80033be:	e02d      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033c0:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033c2:	623b      	str	r3, [r7, #32]
      break;
 80033c4:	e02d      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	0c9b      	lsrs	r3, r3, #18
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033d2:	4413      	add	r3, r2
 80033d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d013      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033e4:	4b13      	ldr	r3, [pc, #76]	; (8003434 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	0c5b      	lsrs	r3, r3, #17
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033f2:	4413      	add	r3, r2
 80033f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	4a0e      	ldr	r2, [pc, #56]	; (8003438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033fe:	fb02 f203 	mul.w	r2, r2, r3
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
 800340a:	e004      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	4a0b      	ldr	r2, [pc, #44]	; (800343c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003410:	fb02 f303 	mul.w	r3, r2, r3
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	623b      	str	r3, [r7, #32]
      break;
 800341a:	e002      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_RCC_GetSysClockFreq+0xb8>)
 800341e:	623b      	str	r3, [r7, #32]
      break;
 8003420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003422:	6a3b      	ldr	r3, [r7, #32]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3728      	adds	r7, #40	; 0x28
 8003428:	46bd      	mov	sp, r7
 800342a:	bc90      	pop	{r4, r7}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	080095ec 	.word	0x080095ec
 8003434:	40021000 	.word	0x40021000
 8003438:	007a1200 	.word	0x007a1200
 800343c:	003d0900 	.word	0x003d0900

08003440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003444:	4b02      	ldr	r3, [pc, #8]	; (8003450 <HAL_RCC_GetHCLKFreq+0x10>)
 8003446:	681b      	ldr	r3, [r3, #0]
}
 8003448:	4618      	mov	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr
 8003450:	20000000 	.word	0x20000000

08003454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003458:	f7ff fff2 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b05      	ldr	r3, [pc, #20]	; (8003474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	0a1b      	lsrs	r3, r3, #8
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	4903      	ldr	r1, [pc, #12]	; (8003478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800346a:	5ccb      	ldrb	r3, [r1, r3]
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40021000 	.word	0x40021000
 8003478:	08009648 	.word	0x08009648

0800347c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003480:	f7ff ffde 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 8003484:	4602      	mov	r2, r0
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	0adb      	lsrs	r3, r3, #11
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	4903      	ldr	r1, [pc, #12]	; (80034a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003492:	5ccb      	ldrb	r3, [r1, r3]
 8003494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003498:	4618      	mov	r0, r3
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000
 80034a0:	08009648 	.word	0x08009648

080034a4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	220f      	movs	r2, #15
 80034b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <HAL_RCC_GetClockConfig+0x58>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0203 	and.w	r2, r3, #3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034c0:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <HAL_RCC_GetClockConfig+0x58>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_GetClockConfig+0x58>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <HAL_RCC_GetClockConfig+0x58>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_RCC_GetClockConfig+0x5c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0207 	and.w	r2, r3, #7
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	40021000 	.word	0x40021000
 8003500:	40022000 	.word	0x40022000

08003504 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <RCC_Delay+0x34>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a0a      	ldr	r2, [pc, #40]	; (800353c <RCC_Delay+0x38>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	0a5b      	lsrs	r3, r3, #9
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	fb02 f303 	mul.w	r3, r2, r3
 800351e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003520:	bf00      	nop
  }
  while (Delay --);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1e5a      	subs	r2, r3, #1
 8003526:	60fa      	str	r2, [r7, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f9      	bne.n	8003520 <RCC_Delay+0x1c>
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr
 8003538:	20000000 	.word	0x20000000
 800353c:	10624dd3 	.word	0x10624dd3

08003540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e041      	b.n	80035d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f839 	bl	80035de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3304      	adds	r3, #4
 800357c:	4619      	mov	r1, r3
 800357e:	4610      	mov	r0, r2
 8003580:	f000 f9b4 	bl	80038ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr

080035f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	d001      	beq.n	8003608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e03a      	b.n	800367e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a18      	ldr	r2, [pc, #96]	; (8003688 <HAL_TIM_Base_Start_IT+0x98>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00e      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x58>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003632:	d009      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x58>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a14      	ldr	r2, [pc, #80]	; (800368c <HAL_TIM_Base_Start_IT+0x9c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d004      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x58>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a13      	ldr	r2, [pc, #76]	; (8003690 <HAL_TIM_Base_Start_IT+0xa0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d111      	bne.n	800366c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b06      	cmp	r3, #6
 8003658:	d010      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 0201 	orr.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366a:	e007      	b.n	800367c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	40012c00 	.word	0x40012c00
 800368c:	40000400 	.word	0x40000400
 8003690:	40000800 	.word	0x40000800

08003694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d122      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d11b      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0202 	mvn.w	r2, #2
 80036c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f8ed 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 80036dc:	e005      	b.n	80036ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f8e0 	bl	80038a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f8ef 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d122      	bne.n	8003744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b04      	cmp	r3, #4
 800370a:	d11b      	bne.n	8003744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0204 	mvn.w	r2, #4
 8003714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f8c3 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 8003730:	e005      	b.n	800373e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f8b6 	bl	80038a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f8c5 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b08      	cmp	r3, #8
 8003750:	d122      	bne.n	8003798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b08      	cmp	r3, #8
 800375e:	d11b      	bne.n	8003798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0208 	mvn.w	r2, #8
 8003768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2204      	movs	r2, #4
 800376e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f899 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f88c 	bl	80038a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f89b 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b10      	cmp	r3, #16
 80037a4:	d122      	bne.n	80037ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d11b      	bne.n	80037ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0210 	mvn.w	r2, #16
 80037bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2208      	movs	r2, #8
 80037c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f86f 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 80037d8:	e005      	b.n	80037e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f862 	bl	80038a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f871 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d10e      	bne.n	8003818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b01      	cmp	r3, #1
 8003806:	d107      	bne.n	8003818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0201 	mvn.w	r2, #1
 8003810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fd fbf2 	bl	8000ffc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003822:	2b80      	cmp	r3, #128	; 0x80
 8003824:	d10e      	bne.n	8003844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b80      	cmp	r3, #128	; 0x80
 8003832:	d107      	bne.n	8003844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f8bf 	bl	80039c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	d10e      	bne.n	8003870 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d107      	bne.n	8003870 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f835 	bl	80038da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b20      	cmp	r3, #32
 800387c:	d10e      	bne.n	800389c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b20      	cmp	r3, #32
 800388a:	d107      	bne.n	800389c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0220 	mvn.w	r2, #32
 8003894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f88a 	bl	80039b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

080038b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr

080038da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr

080038ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a29      	ldr	r2, [pc, #164]	; (80039a4 <TIM_Base_SetConfig+0xb8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00b      	beq.n	800391c <TIM_Base_SetConfig+0x30>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390a:	d007      	beq.n	800391c <TIM_Base_SetConfig+0x30>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a26      	ldr	r2, [pc, #152]	; (80039a8 <TIM_Base_SetConfig+0xbc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d003      	beq.n	800391c <TIM_Base_SetConfig+0x30>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a25      	ldr	r2, [pc, #148]	; (80039ac <TIM_Base_SetConfig+0xc0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d108      	bne.n	800392e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1c      	ldr	r2, [pc, #112]	; (80039a4 <TIM_Base_SetConfig+0xb8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00b      	beq.n	800394e <TIM_Base_SetConfig+0x62>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393c:	d007      	beq.n	800394e <TIM_Base_SetConfig+0x62>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a19      	ldr	r2, [pc, #100]	; (80039a8 <TIM_Base_SetConfig+0xbc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_Base_SetConfig+0x62>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a18      	ldr	r2, [pc, #96]	; (80039ac <TIM_Base_SetConfig+0xc0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d108      	bne.n	8003960 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a07      	ldr	r2, [pc, #28]	; (80039a4 <TIM_Base_SetConfig+0xb8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d103      	bne.n	8003994 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	615a      	str	r2, [r3, #20]
}
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr
 80039a4:	40012c00 	.word	0x40012c00
 80039a8:	40000400 	.word	0x40000400
 80039ac:	40000800 	.word	0x40000800

080039b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr

080039c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr

080039d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e03f      	b.n	8003a66 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fd fb8c 	bl	8001118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2224      	movs	r2, #36	; 0x24
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f905 	bl	8003c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695a      	ldr	r2, [r3, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b08a      	sub	sp, #40	; 0x28
 8003a72:	af02      	add	r7, sp, #8
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	d17c      	bne.n	8003b88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_UART_Transmit+0x2c>
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e075      	b.n	8003b8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_UART_Transmit+0x3e>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e06e      	b.n	8003b8a <HAL_UART_Transmit+0x11c>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2221      	movs	r2, #33	; 0x21
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ac2:	f7fd fd01 	bl	80014c8 <HAL_GetTick>
 8003ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	88fa      	ldrh	r2, [r7, #6]
 8003acc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	88fa      	ldrh	r2, [r7, #6]
 8003ad2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003adc:	d108      	bne.n	8003af0 <HAL_UART_Transmit+0x82>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d104      	bne.n	8003af0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	e003      	b.n	8003af8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b00:	e02a      	b.n	8003b58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2180      	movs	r1, #128	; 0x80
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f840 	bl	8003b92 <UART_WaitOnFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e036      	b.n	8003b8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10b      	bne.n	8003b3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	3302      	adds	r3, #2
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	e007      	b.n	8003b4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	781a      	ldrb	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	3301      	adds	r3, #1
 8003b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1cf      	bne.n	8003b02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2140      	movs	r1, #64	; 0x40
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f810 	bl	8003b92 <UART_WaitOnFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e006      	b.n	8003b8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	e000      	b.n	8003b8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
  }
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba2:	e02c      	b.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003baa:	d028      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d007      	beq.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bb2:	f7fd fc89 	bl	80014c8 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d21d      	bcs.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bd0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695a      	ldr	r2, [r3, #20]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e00f      	b.n	8003c1e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4013      	ands	r3, r2
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	bf0c      	ite	eq
 8003c0e:	2301      	moveq	r3, #1
 8003c10:	2300      	movne	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d0c3      	beq.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c62:	f023 030c 	bic.w	r3, r3, #12
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a2c      	ldr	r2, [pc, #176]	; (8003d3c <UART_SetConfig+0x114>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d103      	bne.n	8003c98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c90:	f7ff fbf4 	bl	800347c <HAL_RCC_GetPCLK2Freq>
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	e002      	b.n	8003c9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c98:	f7ff fbdc 	bl	8003454 <HAL_RCC_GetPCLK1Freq>
 8003c9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009a      	lsls	r2, r3, #2
 8003ca8:	441a      	add	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb4:	4a22      	ldr	r2, [pc, #136]	; (8003d40 <UART_SetConfig+0x118>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	0119      	lsls	r1, r3, #4
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009a      	lsls	r2, r3, #2
 8003cc8:	441a      	add	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cd4:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <UART_SetConfig+0x118>)
 8003cd6:	fba3 0302 	umull	r0, r3, r3, r2
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	2064      	movs	r0, #100	; 0x64
 8003cde:	fb00 f303 	mul.w	r3, r0, r3
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	3332      	adds	r3, #50	; 0x32
 8003ce8:	4a15      	ldr	r2, [pc, #84]	; (8003d40 <UART_SetConfig+0x118>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cf4:	4419      	add	r1, r3
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009a      	lsls	r2, r3, #2
 8003d00:	441a      	add	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <UART_SetConfig+0x118>)
 8003d0e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	2064      	movs	r0, #100	; 0x64
 8003d16:	fb00 f303 	mul.w	r3, r0, r3
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	3332      	adds	r3, #50	; 0x32
 8003d20:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <UART_SetConfig+0x118>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	f003 020f 	and.w	r2, r3, #15
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	440a      	add	r2, r1
 8003d32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d34:	bf00      	nop
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40013800 	.word	0x40013800
 8003d40:	51eb851f 	.word	0x51eb851f

08003d44 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d4a:	f3ef 8305 	mrs	r3, IPSR
 8003d4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10f      	bne.n	8003d76 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d56:	f3ef 8310 	mrs	r3, PRIMASK
 8003d5a:	607b      	str	r3, [r7, #4]
  return(result);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <osKernelInitialize+0x32>
 8003d62:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <osKernelInitialize+0x60>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d109      	bne.n	8003d7e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d6a:	f3ef 8311 	mrs	r3, BASEPRI
 8003d6e:	603b      	str	r3, [r7, #0]
  return(result);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003d76:	f06f 0305 	mvn.w	r3, #5
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	e00c      	b.n	8003d98 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d7e:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <osKernelInitialize+0x60>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d105      	bne.n	8003d92 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003d86:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <osKernelInitialize+0x60>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	e002      	b.n	8003d98 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003d92:	f04f 33ff 	mov.w	r3, #4294967295
 8003d96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d98:	68fb      	ldr	r3, [r7, #12]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr
 8003da4:	20000200 	.word	0x20000200

08003da8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dae:	f3ef 8305 	mrs	r3, IPSR
 8003db2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003db4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10f      	bne.n	8003dda <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dba:	f3ef 8310 	mrs	r3, PRIMASK
 8003dbe:	607b      	str	r3, [r7, #4]
  return(result);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <osKernelStart+0x32>
 8003dc6:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <osKernelStart+0x64>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d109      	bne.n	8003de2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003dce:	f3ef 8311 	mrs	r3, BASEPRI
 8003dd2:	603b      	str	r3, [r7, #0]
  return(result);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003dda:	f06f 0305 	mvn.w	r3, #5
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e00e      	b.n	8003e00 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003de2:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <osKernelStart+0x64>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d107      	bne.n	8003dfa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003dea:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <osKernelStart+0x64>)
 8003dec:	2202      	movs	r2, #2
 8003dee:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003df0:	f001 f890 	bl	8004f14 <vTaskStartScheduler>
      stat = osOK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	e002      	b.n	8003e00 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003e00:	68fb      	ldr	r3, [r7, #12]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000200 	.word	0x20000200

08003e10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b092      	sub	sp, #72	; 0x48
 8003e14:	af04      	add	r7, sp, #16
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e20:	f3ef 8305 	mrs	r3, IPSR
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f040 8094 	bne.w	8003f56 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e32:	623b      	str	r3, [r7, #32]
  return(result);
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f040 808d 	bne.w	8003f56 <osThreadNew+0x146>
 8003e3c:	4b48      	ldr	r3, [pc, #288]	; (8003f60 <osThreadNew+0x150>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d106      	bne.n	8003e52 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e44:	f3ef 8311 	mrs	r3, BASEPRI
 8003e48:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f040 8082 	bne.w	8003f56 <osThreadNew+0x146>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d07e      	beq.n	8003f56 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003e58:	2380      	movs	r3, #128	; 0x80
 8003e5a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003e5c:	2318      	movs	r3, #24
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003e60:	2300      	movs	r3, #0
 8003e62:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003e64:	f107 031b 	add.w	r3, r7, #27
 8003e68:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d045      	beq.n	8003f02 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <osThreadNew+0x74>
        name = attr->name;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d008      	beq.n	8003eaa <osThreadNew+0x9a>
 8003e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9a:	2b38      	cmp	r3, #56	; 0x38
 8003e9c:	d805      	bhi.n	8003eaa <osThreadNew+0x9a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <osThreadNew+0x9e>
        return (NULL);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e054      	b.n	8003f58 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	089b      	lsrs	r3, r3, #2
 8003ebc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00e      	beq.n	8003ee4 <osThreadNew+0xd4>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	2bbf      	cmp	r3, #191	; 0xbf
 8003ecc:	d90a      	bls.n	8003ee4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d006      	beq.n	8003ee4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <osThreadNew+0xd4>
        mem = 1;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee2:	e010      	b.n	8003f06 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10c      	bne.n	8003f06 <osThreadNew+0xf6>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d108      	bne.n	8003f06 <osThreadNew+0xf6>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d104      	bne.n	8003f06 <osThreadNew+0xf6>
          mem = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f00:	e001      	b.n	8003f06 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d110      	bne.n	8003f2e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f14:	9202      	str	r2, [sp, #8]
 8003f16:	9301      	str	r3, [sp, #4]
 8003f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fe12 	bl	8004b4c <xTaskCreateStatic>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	e013      	b.n	8003f56 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d110      	bne.n	8003f56 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	f107 0314 	add.w	r3, r7, #20
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fe5c 	bl	8004c04 <xTaskCreate>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d001      	beq.n	8003f56 <osThreadNew+0x146>
          hTask = NULL;
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003f56:	697b      	ldr	r3, [r7, #20]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3738      	adds	r7, #56	; 0x38
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20000200 	.word	0x20000200

08003f64 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f6c:	f3ef 8305 	mrs	r3, IPSR
 8003f70:	613b      	str	r3, [r7, #16]
  return(result);
 8003f72:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10f      	bne.n	8003f98 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f78:	f3ef 8310 	mrs	r3, PRIMASK
 8003f7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d109      	bne.n	8003f98 <osDelay+0x34>
 8003f84:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <osDelay+0x58>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d109      	bne.n	8003fa0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f8c:	f3ef 8311 	mrs	r3, BASEPRI
 8003f90:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <osDelay+0x3c>
    stat = osErrorISR;
 8003f98:	f06f 0305 	mvn.w	r3, #5
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	e007      	b.n	8003fb0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 ff7e 	bl	8004eac <vTaskDelay>
    }
  }

  return (stat);
 8003fb0:	697b      	ldr	r3, [r7, #20]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000200 	.word	0x20000200

08003fc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4a06      	ldr	r2, [pc, #24]	; (8003fe8 <vApplicationGetIdleTaskMemory+0x28>)
 8003fd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4a05      	ldr	r2, [pc, #20]	; (8003fec <vApplicationGetIdleTaskMemory+0x2c>)
 8003fd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2280      	movs	r2, #128	; 0x80
 8003fdc:	601a      	str	r2, [r3, #0]
}
 8003fde:	bf00      	nop
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr
 8003fe8:	20000204 	.word	0x20000204
 8003fec:	200002c4 	.word	0x200002c4

08003ff0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4a07      	ldr	r2, [pc, #28]	; (800401c <vApplicationGetTimerTaskMemory+0x2c>)
 8004000:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4a06      	ldr	r2, [pc, #24]	; (8004020 <vApplicationGetTimerTaskMemory+0x30>)
 8004006:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800400e:	601a      	str	r2, [r3, #0]
}
 8004010:	bf00      	nop
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	200004c4 	.word	0x200004c4
 8004020:	20000584 	.word	0x20000584

08004024 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f103 0208 	add.w	r2, r3, #8
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f04f 32ff 	mov.w	r2, #4294967295
 800403c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f103 0208 	add.w	r2, r3, #8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f103 0208 	add.w	r2, r3, #8
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr

08004062 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	4770      	bx	lr

0800407a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800407a:	b480      	push	{r7}
 800407c:	b085      	sub	sp, #20
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	601a      	str	r2, [r3, #0]
}
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr

080040c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d6:	d103      	bne.n	80040e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	e00c      	b.n	80040fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3308      	adds	r3, #8
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	e002      	b.n	80040ee <vListInsert+0x2e>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d2f6      	bcs.n	80040e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	601a      	str	r2, [r3, #0]
}
 8004126:	bf00      	nop
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6892      	ldr	r2, [r2, #8]
 8004146:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6852      	ldr	r2, [r2, #4]
 8004150:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	429a      	cmp	r2, r3
 800415a:	d103      	bne.n	8004164 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	1e5a      	subs	r2, r3, #1
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr
	...

08004184 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10a      	bne.n	80041ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80041aa:	bf00      	nop
 80041ac:	e7fe      	b.n	80041ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80041ae:	f001 fff5 	bl	800619c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ba:	68f9      	ldr	r1, [r7, #12]
 80041bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041be:	fb01 f303 	mul.w	r3, r1, r3
 80041c2:	441a      	add	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	3b01      	subs	r3, #1
 80041e0:	68f9      	ldr	r1, [r7, #12]
 80041e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	441a      	add	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	22ff      	movs	r2, #255	; 0xff
 80041f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	22ff      	movs	r2, #255	; 0xff
 80041fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d114      	bne.n	800422e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01a      	beq.n	8004242 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3310      	adds	r3, #16
 8004210:	4618      	mov	r0, r3
 8004212:	f001 f91b 	bl	800544c <xTaskRemoveFromEventList>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d012      	beq.n	8004242 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800421c:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <xQueueGenericReset+0xcc>)
 800421e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	e009      	b.n	8004242 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3310      	adds	r3, #16
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fef6 	bl	8004024 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3324      	adds	r3, #36	; 0x24
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fef1 	bl	8004024 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004242:	f001 ffdb 	bl	80061fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004246:	2301      	movs	r3, #1
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	e000ed04 	.word	0xe000ed04

08004254 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08e      	sub	sp, #56	; 0x38
 8004258:	af02      	add	r7, sp, #8
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <xQueueGenericCreateStatic+0x52>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <xQueueGenericCreateStatic+0x56>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <xQueueGenericCreateStatic+0x58>
 80042aa:	2300      	movs	r3, #0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	623b      	str	r3, [r7, #32]
}
 80042c2:	bf00      	nop
 80042c4:	e7fe      	b.n	80042c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d102      	bne.n	80042d2 <xQueueGenericCreateStatic+0x7e>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <xQueueGenericCreateStatic+0x82>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <xQueueGenericCreateStatic+0x84>
 80042d6:	2300      	movs	r3, #0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	61fb      	str	r3, [r7, #28]
}
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042f2:	2350      	movs	r3, #80	; 0x50
 80042f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b50      	cmp	r3, #80	; 0x50
 80042fa:	d00a      	beq.n	8004312 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80042fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004300:	f383 8811 	msr	BASEPRI, r3
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	61bb      	str	r3, [r7, #24]
}
 800430e:	bf00      	nop
 8004310:	e7fe      	b.n	8004310 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00d      	beq.n	8004338 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800431c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004324:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	4613      	mov	r3, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	68b9      	ldr	r1, [r7, #8]
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f805 	bl	8004342 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800433a:	4618      	mov	r0, r3
 800433c:	3730      	adds	r7, #48	; 0x30
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	607a      	str	r2, [r7, #4]
 800434e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d103      	bne.n	800435e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	e002      	b.n	8004364 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004370:	2101      	movs	r1, #1
 8004372:	69b8      	ldr	r0, [r7, #24]
 8004374:	f7ff ff06 	bl	8004184 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	78fa      	ldrb	r2, [r7, #3]
 800437c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08e      	sub	sp, #56	; 0x38
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004396:	2300      	movs	r3, #0
 8004398:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10a      	bne.n	80043ba <xQueueGenericSend+0x32>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043b6:	bf00      	nop
 80043b8:	e7fe      	b.n	80043b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d103      	bne.n	80043c8 <xQueueGenericSend+0x40>
 80043c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <xQueueGenericSend+0x44>
 80043c8:	2301      	movs	r3, #1
 80043ca:	e000      	b.n	80043ce <xQueueGenericSend+0x46>
 80043cc:	2300      	movs	r3, #0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <xQueueGenericSend+0x60>
	__asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043e4:	bf00      	nop
 80043e6:	e7fe      	b.n	80043e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d103      	bne.n	80043f6 <xQueueGenericSend+0x6e>
 80043ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <xQueueGenericSend+0x72>
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <xQueueGenericSend+0x74>
 80043fa:	2300      	movs	r3, #0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <xQueueGenericSend+0x8e>
	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	623b      	str	r3, [r7, #32]
}
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004416:	f001 f9df 	bl	80057d8 <xTaskGetSchedulerState>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <xQueueGenericSend+0x9e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <xQueueGenericSend+0xa2>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <xQueueGenericSend+0xa4>
 800442a:	2300      	movs	r3, #0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10a      	bne.n	8004446 <xQueueGenericSend+0xbe>
	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	61fb      	str	r3, [r7, #28]
}
 8004442:	bf00      	nop
 8004444:	e7fe      	b.n	8004444 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004446:	f001 fea9 	bl	800619c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004452:	429a      	cmp	r2, r3
 8004454:	d302      	bcc.n	800445c <xQueueGenericSend+0xd4>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d129      	bne.n	80044b0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004462:	f000 fa07 	bl	8004874 <prvCopyDataToQueue>
 8004466:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	2b00      	cmp	r3, #0
 800446e:	d010      	beq.n	8004492 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	3324      	adds	r3, #36	; 0x24
 8004474:	4618      	mov	r0, r3
 8004476:	f000 ffe9 	bl	800544c <xTaskRemoveFromEventList>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d013      	beq.n	80044a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004480:	4b3f      	ldr	r3, [pc, #252]	; (8004580 <xQueueGenericSend+0x1f8>)
 8004482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	e00a      	b.n	80044a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004498:	4b39      	ldr	r3, [pc, #228]	; (8004580 <xQueueGenericSend+0x1f8>)
 800449a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044a8:	f001 fea8 	bl	80061fc <vPortExitCritical>
				return pdPASS;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e063      	b.n	8004578 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d103      	bne.n	80044be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044b6:	f001 fea1 	bl	80061fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e05c      	b.n	8004578 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d106      	bne.n	80044d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044c4:	f107 0314 	add.w	r3, r7, #20
 80044c8:	4618      	mov	r0, r3
 80044ca:	f001 f823 	bl	8005514 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044ce:	2301      	movs	r3, #1
 80044d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044d2:	f001 fe93 	bl	80061fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044d6:	f000 fd8d 	bl	8004ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044da:	f001 fe5f 	bl	800619c <vPortEnterCritical>
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044e4:	b25b      	sxtb	r3, r3
 80044e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ea:	d103      	bne.n	80044f4 <xQueueGenericSend+0x16c>
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044fa:	b25b      	sxtb	r3, r3
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d103      	bne.n	800450a <xQueueGenericSend+0x182>
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800450a:	f001 fe77 	bl	80061fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800450e:	1d3a      	adds	r2, r7, #4
 8004510:	f107 0314 	add.w	r3, r7, #20
 8004514:	4611      	mov	r1, r2
 8004516:	4618      	mov	r0, r3
 8004518:	f001 f812 	bl	8005540 <xTaskCheckForTimeOut>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d124      	bne.n	800456c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004524:	f000 fa9e 	bl	8004a64 <prvIsQueueFull>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d018      	beq.n	8004560 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	3310      	adds	r3, #16
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	4611      	mov	r1, r2
 8004536:	4618      	mov	r0, r3
 8004538:	f000 ff38 	bl	80053ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800453c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800453e:	f000 fa29 	bl	8004994 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004542:	f000 fd65 	bl	8005010 <xTaskResumeAll>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	f47f af7c 	bne.w	8004446 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800454e:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <xQueueGenericSend+0x1f8>)
 8004550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	e772      	b.n	8004446 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004562:	f000 fa17 	bl	8004994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004566:	f000 fd53 	bl	8005010 <xTaskResumeAll>
 800456a:	e76c      	b.n	8004446 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800456c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800456e:	f000 fa11 	bl	8004994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004572:	f000 fd4d 	bl	8005010 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004576:	2300      	movs	r3, #0
		}
	}
}
 8004578:	4618      	mov	r0, r3
 800457a:	3738      	adds	r7, #56	; 0x38
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	e000ed04 	.word	0xe000ed04

08004584 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08e      	sub	sp, #56	; 0x38
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045ae:	bf00      	nop
 80045b0:	e7fe      	b.n	80045b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d103      	bne.n	80045c0 <xQueueGenericSendFromISR+0x3c>
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <xQueueGenericSendFromISR+0x40>
 80045c0:	2301      	movs	r3, #1
 80045c2:	e000      	b.n	80045c6 <xQueueGenericSendFromISR+0x42>
 80045c4:	2300      	movs	r3, #0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10a      	bne.n	80045e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	623b      	str	r3, [r7, #32]
}
 80045dc:	bf00      	nop
 80045de:	e7fe      	b.n	80045de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d103      	bne.n	80045ee <xQueueGenericSendFromISR+0x6a>
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <xQueueGenericSendFromISR+0x6e>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <xQueueGenericSendFromISR+0x70>
 80045f2:	2300      	movs	r3, #0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10a      	bne.n	800460e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	61fb      	str	r3, [r7, #28]
}
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800460e:	f001 fe87 	bl	8006320 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004612:	f3ef 8211 	mrs	r2, BASEPRI
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	61ba      	str	r2, [r7, #24]
 8004628:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800462a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004636:	429a      	cmp	r2, r3
 8004638:	d302      	bcc.n	8004640 <xQueueGenericSendFromISR+0xbc>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d12c      	bne.n	800469a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004650:	f000 f910 	bl	8004874 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004654:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d112      	bne.n	8004684 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	2b00      	cmp	r3, #0
 8004664:	d016      	beq.n	8004694 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004668:	3324      	adds	r3, #36	; 0x24
 800466a:	4618      	mov	r0, r3
 800466c:	f000 feee 	bl	800544c <xTaskRemoveFromEventList>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00e      	beq.n	8004694 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00b      	beq.n	8004694 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	e007      	b.n	8004694 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004684:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004688:	3301      	adds	r3, #1
 800468a:	b2db      	uxtb	r3, r3
 800468c:	b25a      	sxtb	r2, r3
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004694:	2301      	movs	r3, #1
 8004696:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004698:	e001      	b.n	800469e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800469a:	2300      	movs	r3, #0
 800469c:	637b      	str	r3, [r7, #52]	; 0x34
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3738      	adds	r7, #56	; 0x38
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08c      	sub	sp, #48	; 0x30
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80046c0:	2300      	movs	r3, #0
 80046c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <xQueueReceive+0x30>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	623b      	str	r3, [r7, #32]
}
 80046e0:	bf00      	nop
 80046e2:	e7fe      	b.n	80046e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <xQueueReceive+0x3e>
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <xQueueReceive+0x42>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <xQueueReceive+0x44>
 80046f6:	2300      	movs	r3, #0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <xQueueReceive+0x5e>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	61fb      	str	r3, [r7, #28]
}
 800470e:	bf00      	nop
 8004710:	e7fe      	b.n	8004710 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004712:	f001 f861 	bl	80057d8 <xTaskGetSchedulerState>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d102      	bne.n	8004722 <xQueueReceive+0x6e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <xQueueReceive+0x72>
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <xQueueReceive+0x74>
 8004726:	2300      	movs	r3, #0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <xQueueReceive+0x8e>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	61bb      	str	r3, [r7, #24]
}
 800473e:	bf00      	nop
 8004740:	e7fe      	b.n	8004740 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004742:	f001 fd2b 	bl	800619c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	2b00      	cmp	r3, #0
 8004750:	d01f      	beq.n	8004792 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004756:	f000 f8f7 	bl	8004948 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	1e5a      	subs	r2, r3, #1
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00f      	beq.n	800478a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	3310      	adds	r3, #16
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fe6c 	bl	800544c <xTaskRemoveFromEventList>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d007      	beq.n	800478a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800477a:	4b3d      	ldr	r3, [pc, #244]	; (8004870 <xQueueReceive+0x1bc>)
 800477c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800478a:	f001 fd37 	bl	80061fc <vPortExitCritical>
				return pdPASS;
 800478e:	2301      	movs	r3, #1
 8004790:	e069      	b.n	8004866 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d103      	bne.n	80047a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004798:	f001 fd30 	bl	80061fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800479c:	2300      	movs	r3, #0
 800479e:	e062      	b.n	8004866 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047a6:	f107 0310 	add.w	r3, r7, #16
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 feb2 	bl	8005514 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047b0:	2301      	movs	r3, #1
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047b4:	f001 fd22 	bl	80061fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047b8:	f000 fc1c 	bl	8004ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047bc:	f001 fcee 	bl	800619c <vPortEnterCritical>
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047c6:	b25b      	sxtb	r3, r3
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d103      	bne.n	80047d6 <xQueueReceive+0x122>
 80047ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047dc:	b25b      	sxtb	r3, r3
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	d103      	bne.n	80047ec <xQueueReceive+0x138>
 80047e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047ec:	f001 fd06 	bl	80061fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047f0:	1d3a      	adds	r2, r7, #4
 80047f2:	f107 0310 	add.w	r3, r7, #16
 80047f6:	4611      	mov	r1, r2
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 fea1 	bl	8005540 <xTaskCheckForTimeOut>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d123      	bne.n	800484c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004806:	f000 f917 	bl	8004a38 <prvIsQueueEmpty>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d017      	beq.n	8004840 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	3324      	adds	r3, #36	; 0x24
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	4611      	mov	r1, r2
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fdc7 	bl	80053ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800481e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004820:	f000 f8b8 	bl	8004994 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004824:	f000 fbf4 	bl	8005010 <xTaskResumeAll>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d189      	bne.n	8004742 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800482e:	4b10      	ldr	r3, [pc, #64]	; (8004870 <xQueueReceive+0x1bc>)
 8004830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	e780      	b.n	8004742 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004842:	f000 f8a7 	bl	8004994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004846:	f000 fbe3 	bl	8005010 <xTaskResumeAll>
 800484a:	e77a      	b.n	8004742 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800484c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800484e:	f000 f8a1 	bl	8004994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004852:	f000 fbdd 	bl	8005010 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004858:	f000 f8ee 	bl	8004a38 <prvIsQueueEmpty>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	f43f af6f 	beq.w	8004742 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004864:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004866:	4618      	mov	r0, r3
 8004868:	3730      	adds	r7, #48	; 0x30
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	e000ed04 	.word	0xe000ed04

08004874 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004888:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10d      	bne.n	80048ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d14d      	bne.n	8004936 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 ffb8 	bl	8005814 <xTaskPriorityDisinherit>
 80048a4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	605a      	str	r2, [r3, #4]
 80048ac:	e043      	b.n	8004936 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d119      	bne.n	80048e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6898      	ldr	r0, [r3, #8]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	461a      	mov	r2, r3
 80048be:	68b9      	ldr	r1, [r7, #8]
 80048c0:	f002 f867 	bl	8006992 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	441a      	add	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d32b      	bcc.n	8004936 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	609a      	str	r2, [r3, #8]
 80048e6:	e026      	b.n	8004936 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	68d8      	ldr	r0, [r3, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	461a      	mov	r2, r3
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	f002 f84d 	bl	8006992 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	425b      	negs	r3, r3
 8004902:	441a      	add	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d207      	bcs.n	8004924 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	425b      	negs	r3, r3
 800491e:	441a      	add	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d105      	bne.n	8004936 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	3b01      	subs	r3, #1
 8004934:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800493e:	697b      	ldr	r3, [r7, #20]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d018      	beq.n	800498c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	441a      	add	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	429a      	cmp	r2, r3
 8004972:	d303      	bcc.n	800497c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68d9      	ldr	r1, [r3, #12]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	461a      	mov	r2, r3
 8004986:	6838      	ldr	r0, [r7, #0]
 8004988:	f002 f803 	bl	8006992 <memcpy>
	}
}
 800498c:	bf00      	nop
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800499c:	f001 fbfe 	bl	800619c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049a8:	e011      	b.n	80049ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d012      	beq.n	80049d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3324      	adds	r3, #36	; 0x24
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fd48 	bl	800544c <xTaskRemoveFromEventList>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80049c2:	f000 fe1f 	bl	8005604 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	dce9      	bgt.n	80049aa <prvUnlockQueue+0x16>
 80049d6:	e000      	b.n	80049da <prvUnlockQueue+0x46>
					break;
 80049d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	22ff      	movs	r2, #255	; 0xff
 80049de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80049e2:	f001 fc0b 	bl	80061fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049e6:	f001 fbd9 	bl	800619c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049f2:	e011      	b.n	8004a18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d012      	beq.n	8004a22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3310      	adds	r3, #16
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fd23 	bl	800544c <xTaskRemoveFromEventList>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a0c:	f000 fdfa 	bl	8005604 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a10:	7bbb      	ldrb	r3, [r7, #14]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	dce9      	bgt.n	80049f4 <prvUnlockQueue+0x60>
 8004a20:	e000      	b.n	8004a24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	22ff      	movs	r2, #255	; 0xff
 8004a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a2c:	f001 fbe6 	bl	80061fc <vPortExitCritical>
}
 8004a30:	bf00      	nop
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a40:	f001 fbac 	bl	800619c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	e001      	b.n	8004a56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a56:	f001 fbd1 	bl	80061fc <vPortExitCritical>

	return xReturn;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a6c:	f001 fb96 	bl	800619c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d102      	bne.n	8004a82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	e001      	b.n	8004a86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a86:	f001 fbb9 	bl	80061fc <vPortExitCritical>

	return xReturn;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	e014      	b.n	8004ace <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004aa4:	4a0e      	ldr	r2, [pc, #56]	; (8004ae0 <vQueueAddToRegistry+0x4c>)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10b      	bne.n	8004ac8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ab0:	490b      	ldr	r1, [pc, #44]	; (8004ae0 <vQueueAddToRegistry+0x4c>)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004aba:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <vQueueAddToRegistry+0x4c>)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004ac6:	e006      	b.n	8004ad6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3301      	adds	r3, #1
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b07      	cmp	r3, #7
 8004ad2:	d9e7      	bls.n	8004aa4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr
 8004ae0:	20001cd4 	.word	0x20001cd4

08004ae4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004af4:	f001 fb52 	bl	800619c <vPortEnterCritical>
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004afe:	b25b      	sxtb	r3, r3
 8004b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b04:	d103      	bne.n	8004b0e <vQueueWaitForMessageRestricted+0x2a>
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b14:	b25b      	sxtb	r3, r3
 8004b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1a:	d103      	bne.n	8004b24 <vQueueWaitForMessageRestricted+0x40>
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b24:	f001 fb6a 	bl	80061fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d106      	bne.n	8004b3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	3324      	adds	r3, #36	; 0x24
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fc5b 	bl	80053f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b3e:	6978      	ldr	r0, [r7, #20]
 8004b40:	f7ff ff28 	bl	8004994 <prvUnlockQueue>
	}
 8004b44:	bf00      	nop
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08e      	sub	sp, #56	; 0x38
 8004b50:	af04      	add	r7, sp, #16
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	623b      	str	r3, [r7, #32]
}
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10a      	bne.n	8004b92 <xTaskCreateStatic+0x46>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	61fb      	str	r3, [r7, #28]
}
 8004b8e:	bf00      	nop
 8004b90:	e7fe      	b.n	8004b90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b92:	23c0      	movs	r3, #192	; 0xc0
 8004b94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	2bc0      	cmp	r3, #192	; 0xc0
 8004b9a:	d00a      	beq.n	8004bb2 <xTaskCreateStatic+0x66>
	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	61bb      	str	r3, [r7, #24]
}
 8004bae:	bf00      	nop
 8004bb0:	e7fe      	b.n	8004bb0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01e      	beq.n	8004bf6 <xTaskCreateStatic+0xaa>
 8004bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01b      	beq.n	8004bf6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	9303      	str	r3, [sp, #12]
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	9302      	str	r3, [sp, #8]
 8004bd8:	f107 0314 	add.w	r3, r7, #20
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 f851 	bl	8004c90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bf0:	f000 f8ec 	bl	8004dcc <prvAddNewTaskToReadyList>
 8004bf4:	e001      	b.n	8004bfa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bfa:	697b      	ldr	r3, [r7, #20]
	}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3728      	adds	r7, #40	; 0x28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08c      	sub	sp, #48	; 0x30
 8004c08:	af04      	add	r7, sp, #16
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	4613      	mov	r3, r2
 8004c12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c14:	88fb      	ldrh	r3, [r7, #6]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f001 fbbf 	bl	800639c <pvPortMalloc>
 8004c1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00e      	beq.n	8004c44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004c26:	20c0      	movs	r0, #192	; 0xc0
 8004c28:	f001 fbb8 	bl	800639c <pvPortMalloc>
 8004c2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	631a      	str	r2, [r3, #48]	; 0x30
 8004c3a:	e005      	b.n	8004c48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c3c:	6978      	ldr	r0, [r7, #20]
 8004c3e:	f001 fc71 	bl	8006524 <vPortFree>
 8004c42:	e001      	b.n	8004c48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d017      	beq.n	8004c7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c56:	88fa      	ldrh	r2, [r7, #6]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	9303      	str	r3, [sp, #12]
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	9302      	str	r3, [sp, #8]
 8004c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c62:	9301      	str	r3, [sp, #4]
 8004c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f80f 	bl	8004c90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c72:	69f8      	ldr	r0, [r7, #28]
 8004c74:	f000 f8aa 	bl	8004dcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	61bb      	str	r3, [r7, #24]
 8004c7c:	e002      	b.n	8004c84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c84:	69bb      	ldr	r3, [r7, #24]
	}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	21a5      	movs	r1, #165	; 0xa5
 8004caa:	f001 fe80 	bl	80069ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	f023 0307 	bic.w	r3, r3, #7
 8004cc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	617b      	str	r3, [r7, #20]
}
 8004ce4:	bf00      	nop
 8004ce6:	e7fe      	b.n	8004ce6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61fb      	str	r3, [r7, #28]
 8004cec:	e012      	b.n	8004d14 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	7819      	ldrb	r1, [r3, #0]
 8004cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3334      	adds	r3, #52	; 0x34
 8004cfe:	460a      	mov	r2, r1
 8004d00:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	4413      	add	r3, r2
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d006      	beq.n	8004d1c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	3301      	adds	r3, #1
 8004d12:	61fb      	str	r3, [r7, #28]
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	2b13      	cmp	r3, #19
 8004d18:	d9e9      	bls.n	8004cee <prvInitialiseNewTask+0x5e>
 8004d1a:	e000      	b.n	8004d1e <prvInitialiseNewTask+0x8e>
		{
			break;
 8004d1c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	2b37      	cmp	r3, #55	; 0x37
 8004d2a:	d901      	bls.n	8004d30 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d2c:	2337      	movs	r3, #55	; 0x37
 8004d2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d3a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	2200      	movs	r2, #0
 8004d40:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	3304      	adds	r3, #4
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff f98b 	bl	8004062 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4e:	3318      	adds	r3, #24
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff f986 	bl	8004062 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	3358      	adds	r3, #88	; 0x58
 8004d80:	2260      	movs	r2, #96	; 0x60
 8004d82:	2100      	movs	r1, #0
 8004d84:	4618      	mov	r0, r3
 8004d86:	f001 fe12 	bl	80069ae <memset>
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	4a0c      	ldr	r2, [pc, #48]	; (8004dc0 <prvInitialiseNewTask+0x130>)
 8004d8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	4a0c      	ldr	r2, [pc, #48]	; (8004dc4 <prvInitialiseNewTask+0x134>)
 8004d94:	661a      	str	r2, [r3, #96]	; 0x60
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	4a0b      	ldr	r2, [pc, #44]	; (8004dc8 <prvInitialiseNewTask+0x138>)
 8004d9a:	665a      	str	r2, [r3, #100]	; 0x64
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	68f9      	ldr	r1, [r7, #12]
 8004da0:	69b8      	ldr	r0, [r7, #24]
 8004da2:	f001 f90b 	bl	8005fbc <pxPortInitialiseStack>
 8004da6:	4602      	mov	r2, r0
 8004da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004daa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004db6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004db8:	bf00      	nop
 8004dba:	3720      	adds	r7, #32
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	08009670 	.word	0x08009670
 8004dc4:	08009690 	.word	0x08009690
 8004dc8:	08009650 	.word	0x08009650

08004dcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004dd4:	f001 f9e2 	bl	800619c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004dd8:	4b2d      	ldr	r3, [pc, #180]	; (8004e90 <prvAddNewTaskToReadyList+0xc4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	4a2c      	ldr	r2, [pc, #176]	; (8004e90 <prvAddNewTaskToReadyList+0xc4>)
 8004de0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004de2:	4b2c      	ldr	r3, [pc, #176]	; (8004e94 <prvAddNewTaskToReadyList+0xc8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dea:	4a2a      	ldr	r2, [pc, #168]	; (8004e94 <prvAddNewTaskToReadyList+0xc8>)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004df0:	4b27      	ldr	r3, [pc, #156]	; (8004e90 <prvAddNewTaskToReadyList+0xc4>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d110      	bne.n	8004e1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004df8:	f000 fc28 	bl	800564c <prvInitialiseTaskLists>
 8004dfc:	e00d      	b.n	8004e1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dfe:	4b26      	ldr	r3, [pc, #152]	; (8004e98 <prvAddNewTaskToReadyList+0xcc>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d109      	bne.n	8004e1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e06:	4b23      	ldr	r3, [pc, #140]	; (8004e94 <prvAddNewTaskToReadyList+0xc8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d802      	bhi.n	8004e1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e14:	4a1f      	ldr	r2, [pc, #124]	; (8004e94 <prvAddNewTaskToReadyList+0xc8>)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e1a:	4b20      	ldr	r3, [pc, #128]	; (8004e9c <prvAddNewTaskToReadyList+0xd0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	4a1e      	ldr	r2, [pc, #120]	; (8004e9c <prvAddNewTaskToReadyList+0xd0>)
 8004e22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e24:	4b1d      	ldr	r3, [pc, #116]	; (8004e9c <prvAddNewTaskToReadyList+0xd0>)
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e30:	4b1b      	ldr	r3, [pc, #108]	; (8004ea0 <prvAddNewTaskToReadyList+0xd4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d903      	bls.n	8004e40 <prvAddNewTaskToReadyList+0x74>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	4a18      	ldr	r2, [pc, #96]	; (8004ea0 <prvAddNewTaskToReadyList+0xd4>)
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4a15      	ldr	r2, [pc, #84]	; (8004ea4 <prvAddNewTaskToReadyList+0xd8>)
 8004e4e:	441a      	add	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3304      	adds	r3, #4
 8004e54:	4619      	mov	r1, r3
 8004e56:	4610      	mov	r0, r2
 8004e58:	f7ff f90f 	bl	800407a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e5c:	f001 f9ce 	bl	80061fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e60:	4b0d      	ldr	r3, [pc, #52]	; (8004e98 <prvAddNewTaskToReadyList+0xcc>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00e      	beq.n	8004e86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e68:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <prvAddNewTaskToReadyList+0xc8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d207      	bcs.n	8004e86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e76:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <prvAddNewTaskToReadyList+0xdc>)
 8004e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20000e58 	.word	0x20000e58
 8004e94:	20000984 	.word	0x20000984
 8004e98:	20000e64 	.word	0x20000e64
 8004e9c:	20000e74 	.word	0x20000e74
 8004ea0:	20000e60 	.word	0x20000e60
 8004ea4:	20000988 	.word	0x20000988
 8004ea8:	e000ed04 	.word	0xe000ed04

08004eac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d017      	beq.n	8004eee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ebe:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <vTaskDelay+0x60>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <vTaskDelay+0x30>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	60bb      	str	r3, [r7, #8]
}
 8004ed8:	bf00      	nop
 8004eda:	e7fe      	b.n	8004eda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004edc:	f000 f88a 	bl	8004ff4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fd04 	bl	80058f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ee8:	f000 f892 	bl	8005010 <xTaskResumeAll>
 8004eec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d107      	bne.n	8004f04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004ef4:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <vTaskDelay+0x64>)
 8004ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f04:	bf00      	nop
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	20000e80 	.word	0x20000e80
 8004f10:	e000ed04 	.word	0xe000ed04

08004f14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	; 0x28
 8004f18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f22:	463a      	mov	r2, r7
 8004f24:	1d39      	adds	r1, r7, #4
 8004f26:	f107 0308 	add.w	r3, r7, #8
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff f848 	bl	8003fc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f30:	6839      	ldr	r1, [r7, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	9202      	str	r2, [sp, #8]
 8004f38:	9301      	str	r3, [sp, #4]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	460a      	mov	r2, r1
 8004f42:	4924      	ldr	r1, [pc, #144]	; (8004fd4 <vTaskStartScheduler+0xc0>)
 8004f44:	4824      	ldr	r0, [pc, #144]	; (8004fd8 <vTaskStartScheduler+0xc4>)
 8004f46:	f7ff fe01 	bl	8004b4c <xTaskCreateStatic>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	4a23      	ldr	r2, [pc, #140]	; (8004fdc <vTaskStartScheduler+0xc8>)
 8004f4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f50:	4b22      	ldr	r3, [pc, #136]	; (8004fdc <vTaskStartScheduler+0xc8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	e001      	b.n	8004f62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d102      	bne.n	8004f6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f68:	f000 fd16 	bl	8005998 <xTimerCreateTimerTask>
 8004f6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d11b      	bne.n	8004fac <vTaskStartScheduler+0x98>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	613b      	str	r3, [r7, #16]
}
 8004f86:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f88:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <vTaskStartScheduler+0xcc>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3358      	adds	r3, #88	; 0x58
 8004f8e:	4a15      	ldr	r2, [pc, #84]	; (8004fe4 <vTaskStartScheduler+0xd0>)
 8004f90:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f92:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <vTaskStartScheduler+0xd4>)
 8004f94:	f04f 32ff 	mov.w	r2, #4294967295
 8004f98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f9a:	4b14      	ldr	r3, [pc, #80]	; (8004fec <vTaskStartScheduler+0xd8>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004fa0:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <vTaskStartScheduler+0xdc>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004fa6:	f001 f887 	bl	80060b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004faa:	e00e      	b.n	8004fca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb2:	d10a      	bne.n	8004fca <vTaskStartScheduler+0xb6>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	60fb      	str	r3, [r7, #12]
}
 8004fc6:	bf00      	nop
 8004fc8:	e7fe      	b.n	8004fc8 <vTaskStartScheduler+0xb4>
}
 8004fca:	bf00      	nop
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	080095fc 	.word	0x080095fc
 8004fd8:	0800561d 	.word	0x0800561d
 8004fdc:	20000e7c 	.word	0x20000e7c
 8004fe0:	20000984 	.word	0x20000984
 8004fe4:	20000010 	.word	0x20000010
 8004fe8:	20000e78 	.word	0x20000e78
 8004fec:	20000e64 	.word	0x20000e64
 8004ff0:	20000e5c 	.word	0x20000e5c

08004ff4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004ff8:	4b04      	ldr	r3, [pc, #16]	; (800500c <vTaskSuspendAll+0x18>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	4a03      	ldr	r2, [pc, #12]	; (800500c <vTaskSuspendAll+0x18>)
 8005000:	6013      	str	r3, [r2, #0]
}
 8005002:	bf00      	nop
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	20000e80 	.word	0x20000e80

08005010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800501a:	2300      	movs	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800501e:	4b42      	ldr	r3, [pc, #264]	; (8005128 <xTaskResumeAll+0x118>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <xTaskResumeAll+0x2c>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	603b      	str	r3, [r7, #0]
}
 8005038:	bf00      	nop
 800503a:	e7fe      	b.n	800503a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800503c:	f001 f8ae 	bl	800619c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005040:	4b39      	ldr	r3, [pc, #228]	; (8005128 <xTaskResumeAll+0x118>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3b01      	subs	r3, #1
 8005046:	4a38      	ldr	r2, [pc, #224]	; (8005128 <xTaskResumeAll+0x118>)
 8005048:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800504a:	4b37      	ldr	r3, [pc, #220]	; (8005128 <xTaskResumeAll+0x118>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d162      	bne.n	8005118 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005052:	4b36      	ldr	r3, [pc, #216]	; (800512c <xTaskResumeAll+0x11c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d05e      	beq.n	8005118 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800505a:	e02f      	b.n	80050bc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800505c:	4b34      	ldr	r3, [pc, #208]	; (8005130 <xTaskResumeAll+0x120>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3318      	adds	r3, #24
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff f861 	bl	8004130 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3304      	adds	r3, #4
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff f85c 	bl	8004130 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507c:	4b2d      	ldr	r3, [pc, #180]	; (8005134 <xTaskResumeAll+0x124>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d903      	bls.n	800508c <xTaskResumeAll+0x7c>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	4a2a      	ldr	r2, [pc, #168]	; (8005134 <xTaskResumeAll+0x124>)
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4a27      	ldr	r2, [pc, #156]	; (8005138 <xTaskResumeAll+0x128>)
 800509a:	441a      	add	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f7fe ffe9 	bl	800407a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ac:	4b23      	ldr	r3, [pc, #140]	; (800513c <xTaskResumeAll+0x12c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d302      	bcc.n	80050bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80050b6:	4b22      	ldr	r3, [pc, #136]	; (8005140 <xTaskResumeAll+0x130>)
 80050b8:	2201      	movs	r2, #1
 80050ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050bc:	4b1c      	ldr	r3, [pc, #112]	; (8005130 <xTaskResumeAll+0x120>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1cb      	bne.n	800505c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050ca:	f000 fb61 	bl	8005790 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80050ce:	4b1d      	ldr	r3, [pc, #116]	; (8005144 <xTaskResumeAll+0x134>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d010      	beq.n	80050fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050da:	f000 f845 	bl	8005168 <xTaskIncrementTick>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80050e4:	4b16      	ldr	r3, [pc, #88]	; (8005140 <xTaskResumeAll+0x130>)
 80050e6:	2201      	movs	r2, #1
 80050e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f1      	bne.n	80050da <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80050f6:	4b13      	ldr	r3, [pc, #76]	; (8005144 <xTaskResumeAll+0x134>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050fc:	4b10      	ldr	r3, [pc, #64]	; (8005140 <xTaskResumeAll+0x130>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d009      	beq.n	8005118 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005104:	2301      	movs	r3, #1
 8005106:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005108:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <xTaskResumeAll+0x138>)
 800510a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005118:	f001 f870 	bl	80061fc <vPortExitCritical>

	return xAlreadyYielded;
 800511c:	68bb      	ldr	r3, [r7, #8]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20000e80 	.word	0x20000e80
 800512c:	20000e58 	.word	0x20000e58
 8005130:	20000e18 	.word	0x20000e18
 8005134:	20000e60 	.word	0x20000e60
 8005138:	20000988 	.word	0x20000988
 800513c:	20000984 	.word	0x20000984
 8005140:	20000e6c 	.word	0x20000e6c
 8005144:	20000e68 	.word	0x20000e68
 8005148:	e000ed04 	.word	0xe000ed04

0800514c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005152:	4b04      	ldr	r3, [pc, #16]	; (8005164 <xTaskGetTickCount+0x18>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005158:	687b      	ldr	r3, [r7, #4]
}
 800515a:	4618      	mov	r0, r3
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr
 8005164:	20000e5c 	.word	0x20000e5c

08005168 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005172:	4b51      	ldr	r3, [pc, #324]	; (80052b8 <xTaskIncrementTick+0x150>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f040 808e 	bne.w	8005298 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800517c:	4b4f      	ldr	r3, [pc, #316]	; (80052bc <xTaskIncrementTick+0x154>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3301      	adds	r3, #1
 8005182:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005184:	4a4d      	ldr	r2, [pc, #308]	; (80052bc <xTaskIncrementTick+0x154>)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d120      	bne.n	80051d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005190:	4b4b      	ldr	r3, [pc, #300]	; (80052c0 <xTaskIncrementTick+0x158>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	603b      	str	r3, [r7, #0]
}
 80051ac:	bf00      	nop
 80051ae:	e7fe      	b.n	80051ae <xTaskIncrementTick+0x46>
 80051b0:	4b43      	ldr	r3, [pc, #268]	; (80052c0 <xTaskIncrementTick+0x158>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	4b43      	ldr	r3, [pc, #268]	; (80052c4 <xTaskIncrementTick+0x15c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a41      	ldr	r2, [pc, #260]	; (80052c0 <xTaskIncrementTick+0x158>)
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	4a41      	ldr	r2, [pc, #260]	; (80052c4 <xTaskIncrementTick+0x15c>)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	4b40      	ldr	r3, [pc, #256]	; (80052c8 <xTaskIncrementTick+0x160>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3301      	adds	r3, #1
 80051ca:	4a3f      	ldr	r2, [pc, #252]	; (80052c8 <xTaskIncrementTick+0x160>)
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	f000 fadf 	bl	8005790 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051d2:	4b3e      	ldr	r3, [pc, #248]	; (80052cc <xTaskIncrementTick+0x164>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d34e      	bcc.n	800527a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051dc:	4b38      	ldr	r3, [pc, #224]	; (80052c0 <xTaskIncrementTick+0x158>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <xTaskIncrementTick+0x82>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <xTaskIncrementTick+0x84>
 80051ea:	2300      	movs	r3, #0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d004      	beq.n	80051fa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051f0:	4b36      	ldr	r3, [pc, #216]	; (80052cc <xTaskIncrementTick+0x164>)
 80051f2:	f04f 32ff 	mov.w	r2, #4294967295
 80051f6:	601a      	str	r2, [r3, #0]
					break;
 80051f8:	e03f      	b.n	800527a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80051fa:	4b31      	ldr	r3, [pc, #196]	; (80052c0 <xTaskIncrementTick+0x158>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	429a      	cmp	r2, r3
 8005210:	d203      	bcs.n	800521a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005212:	4a2e      	ldr	r2, [pc, #184]	; (80052cc <xTaskIncrementTick+0x164>)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6013      	str	r3, [r2, #0]
						break;
 8005218:	e02f      	b.n	800527a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	3304      	adds	r3, #4
 800521e:	4618      	mov	r0, r3
 8005220:	f7fe ff86 	bl	8004130 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	3318      	adds	r3, #24
 8005230:	4618      	mov	r0, r3
 8005232:	f7fe ff7d 	bl	8004130 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523a:	4b25      	ldr	r3, [pc, #148]	; (80052d0 <xTaskIncrementTick+0x168>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d903      	bls.n	800524a <xTaskIncrementTick+0xe2>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	4a22      	ldr	r2, [pc, #136]	; (80052d0 <xTaskIncrementTick+0x168>)
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4a1f      	ldr	r2, [pc, #124]	; (80052d4 <xTaskIncrementTick+0x16c>)
 8005258:	441a      	add	r2, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	3304      	adds	r3, #4
 800525e:	4619      	mov	r1, r3
 8005260:	4610      	mov	r0, r2
 8005262:	f7fe ff0a 	bl	800407a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526a:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <xTaskIncrementTick+0x170>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	429a      	cmp	r2, r3
 8005272:	d3b3      	bcc.n	80051dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005274:	2301      	movs	r3, #1
 8005276:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005278:	e7b0      	b.n	80051dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800527a:	4b17      	ldr	r3, [pc, #92]	; (80052d8 <xTaskIncrementTick+0x170>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005280:	4914      	ldr	r1, [pc, #80]	; (80052d4 <xTaskIncrementTick+0x16c>)
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	440b      	add	r3, r1
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d907      	bls.n	80052a2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005292:	2301      	movs	r3, #1
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	e004      	b.n	80052a2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005298:	4b10      	ldr	r3, [pc, #64]	; (80052dc <xTaskIncrementTick+0x174>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3301      	adds	r3, #1
 800529e:	4a0f      	ldr	r2, [pc, #60]	; (80052dc <xTaskIncrementTick+0x174>)
 80052a0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80052a2:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <xTaskIncrementTick+0x178>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80052aa:	2301      	movs	r3, #1
 80052ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80052ae:	697b      	ldr	r3, [r7, #20]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20000e80 	.word	0x20000e80
 80052bc:	20000e5c 	.word	0x20000e5c
 80052c0:	20000e10 	.word	0x20000e10
 80052c4:	20000e14 	.word	0x20000e14
 80052c8:	20000e70 	.word	0x20000e70
 80052cc:	20000e78 	.word	0x20000e78
 80052d0:	20000e60 	.word	0x20000e60
 80052d4:	20000988 	.word	0x20000988
 80052d8:	20000984 	.word	0x20000984
 80052dc:	20000e68 	.word	0x20000e68
 80052e0:	20000e6c 	.word	0x20000e6c

080052e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052ea:	4b2a      	ldr	r3, [pc, #168]	; (8005394 <vTaskSwitchContext+0xb0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052f2:	4b29      	ldr	r3, [pc, #164]	; (8005398 <vTaskSwitchContext+0xb4>)
 80052f4:	2201      	movs	r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052f8:	e046      	b.n	8005388 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80052fa:	4b27      	ldr	r3, [pc, #156]	; (8005398 <vTaskSwitchContext+0xb4>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005300:	4b26      	ldr	r3, [pc, #152]	; (800539c <vTaskSwitchContext+0xb8>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	e010      	b.n	800532a <vTaskSwitchContext+0x46>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10a      	bne.n	8005324 <vTaskSwitchContext+0x40>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	607b      	str	r3, [r7, #4]
}
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <vTaskSwitchContext+0x3e>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3b01      	subs	r3, #1
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	491d      	ldr	r1, [pc, #116]	; (80053a0 <vTaskSwitchContext+0xbc>)
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0e4      	beq.n	8005308 <vTaskSwitchContext+0x24>
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4613      	mov	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4a15      	ldr	r2, [pc, #84]	; (80053a0 <vTaskSwitchContext+0xbc>)
 800534a:	4413      	add	r3, r2
 800534c:	60bb      	str	r3, [r7, #8]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	605a      	str	r2, [r3, #4]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	3308      	adds	r3, #8
 8005360:	429a      	cmp	r2, r3
 8005362:	d104      	bne.n	800536e <vTaskSwitchContext+0x8a>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	4a0b      	ldr	r2, [pc, #44]	; (80053a4 <vTaskSwitchContext+0xc0>)
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	4a08      	ldr	r2, [pc, #32]	; (800539c <vTaskSwitchContext+0xb8>)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800537e:	4b09      	ldr	r3, [pc, #36]	; (80053a4 <vTaskSwitchContext+0xc0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3358      	adds	r3, #88	; 0x58
 8005384:	4a08      	ldr	r2, [pc, #32]	; (80053a8 <vTaskSwitchContext+0xc4>)
 8005386:	6013      	str	r3, [r2, #0]
}
 8005388:	bf00      	nop
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	bc80      	pop	{r7}
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	20000e80 	.word	0x20000e80
 8005398:	20000e6c 	.word	0x20000e6c
 800539c:	20000e60 	.word	0x20000e60
 80053a0:	20000988 	.word	0x20000988
 80053a4:	20000984 	.word	0x20000984
 80053a8:	20000010 	.word	0x20000010

080053ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10a      	bne.n	80053d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	60fb      	str	r3, [r7, #12]
}
 80053ce:	bf00      	nop
 80053d0:	e7fe      	b.n	80053d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053d2:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <vTaskPlaceOnEventList+0x44>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3318      	adds	r3, #24
 80053d8:	4619      	mov	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fe fe70 	bl	80040c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053e0:	2101      	movs	r1, #1
 80053e2:	6838      	ldr	r0, [r7, #0]
 80053e4:	f000 fa84 	bl	80058f0 <prvAddCurrentTaskToDelayedList>
}
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	20000984 	.word	0x20000984

080053f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	617b      	str	r3, [r7, #20]
}
 8005418:	bf00      	nop
 800541a:	e7fe      	b.n	800541a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800541c:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <vTaskPlaceOnEventListRestricted+0x54>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3318      	adds	r3, #24
 8005422:	4619      	mov	r1, r3
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f7fe fe28 	bl	800407a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005430:	f04f 33ff 	mov.w	r3, #4294967295
 8005434:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	68b8      	ldr	r0, [r7, #8]
 800543a:	f000 fa59 	bl	80058f0 <prvAddCurrentTaskToDelayedList>
	}
 800543e:	bf00      	nop
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000984 	.word	0x20000984

0800544c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10a      	bne.n	8005478 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	60fb      	str	r3, [r7, #12]
}
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	3318      	adds	r3, #24
 800547c:	4618      	mov	r0, r3
 800547e:	f7fe fe57 	bl	8004130 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005482:	4b1e      	ldr	r3, [pc, #120]	; (80054fc <xTaskRemoveFromEventList+0xb0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d11d      	bne.n	80054c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	3304      	adds	r3, #4
 800548e:	4618      	mov	r0, r3
 8005490:	f7fe fe4e 	bl	8004130 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005498:	4b19      	ldr	r3, [pc, #100]	; (8005500 <xTaskRemoveFromEventList+0xb4>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d903      	bls.n	80054a8 <xTaskRemoveFromEventList+0x5c>
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a4:	4a16      	ldr	r2, [pc, #88]	; (8005500 <xTaskRemoveFromEventList+0xb4>)
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4a13      	ldr	r2, [pc, #76]	; (8005504 <xTaskRemoveFromEventList+0xb8>)
 80054b6:	441a      	add	r2, r3
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	3304      	adds	r3, #4
 80054bc:	4619      	mov	r1, r3
 80054be:	4610      	mov	r0, r2
 80054c0:	f7fe fddb 	bl	800407a <vListInsertEnd>
 80054c4:	e005      	b.n	80054d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	3318      	adds	r3, #24
 80054ca:	4619      	mov	r1, r3
 80054cc:	480e      	ldr	r0, [pc, #56]	; (8005508 <xTaskRemoveFromEventList+0xbc>)
 80054ce:	f7fe fdd4 	bl	800407a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d6:	4b0d      	ldr	r3, [pc, #52]	; (800550c <xTaskRemoveFromEventList+0xc0>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	429a      	cmp	r2, r3
 80054de:	d905      	bls.n	80054ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054e0:	2301      	movs	r3, #1
 80054e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054e4:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <xTaskRemoveFromEventList+0xc4>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	e001      	b.n	80054f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80054ec:	2300      	movs	r3, #0
 80054ee:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80054f0:	697b      	ldr	r3, [r7, #20]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000e80 	.word	0x20000e80
 8005500:	20000e60 	.word	0x20000e60
 8005504:	20000988 	.word	0x20000988
 8005508:	20000e18 	.word	0x20000e18
 800550c:	20000984 	.word	0x20000984
 8005510:	20000e6c 	.word	0x20000e6c

08005514 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800551c:	4b06      	ldr	r3, [pc, #24]	; (8005538 <vTaskInternalSetTimeOutState+0x24>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005524:	4b05      	ldr	r3, [pc, #20]	; (800553c <vTaskInternalSetTimeOutState+0x28>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	605a      	str	r2, [r3, #4]
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20000e70 	.word	0x20000e70
 800553c:	20000e5c 	.word	0x20000e5c

08005540 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	613b      	str	r3, [r7, #16]
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10a      	bne.n	8005582 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	60fb      	str	r3, [r7, #12]
}
 800557e:	bf00      	nop
 8005580:	e7fe      	b.n	8005580 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005582:	f000 fe0b 	bl	800619c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005586:	4b1d      	ldr	r3, [pc, #116]	; (80055fc <xTaskCheckForTimeOut+0xbc>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559e:	d102      	bne.n	80055a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80055a0:	2300      	movs	r3, #0
 80055a2:	61fb      	str	r3, [r7, #28]
 80055a4:	e023      	b.n	80055ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b15      	ldr	r3, [pc, #84]	; (8005600 <xTaskCheckForTimeOut+0xc0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d007      	beq.n	80055c2 <xTaskCheckForTimeOut+0x82>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d302      	bcc.n	80055c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055bc:	2301      	movs	r3, #1
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	e015      	b.n	80055ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d20b      	bcs.n	80055e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	1ad2      	subs	r2, r2, r3
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff ff9b 	bl	8005514 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055de:	2300      	movs	r3, #0
 80055e0:	61fb      	str	r3, [r7, #28]
 80055e2:	e004      	b.n	80055ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2200      	movs	r2, #0
 80055e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80055ea:	2301      	movs	r3, #1
 80055ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80055ee:	f000 fe05 	bl	80061fc <vPortExitCritical>

	return xReturn;
 80055f2:	69fb      	ldr	r3, [r7, #28]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3720      	adds	r7, #32
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20000e5c 	.word	0x20000e5c
 8005600:	20000e70 	.word	0x20000e70

08005604 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005608:	4b03      	ldr	r3, [pc, #12]	; (8005618 <vTaskMissedYield+0x14>)
 800560a:	2201      	movs	r2, #1
 800560c:	601a      	str	r2, [r3, #0]
}
 800560e:	bf00      	nop
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	20000e6c 	.word	0x20000e6c

0800561c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005624:	f000 f852 	bl	80056cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005628:	4b06      	ldr	r3, [pc, #24]	; (8005644 <prvIdleTask+0x28>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d9f9      	bls.n	8005624 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005630:	4b05      	ldr	r3, [pc, #20]	; (8005648 <prvIdleTask+0x2c>)
 8005632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005640:	e7f0      	b.n	8005624 <prvIdleTask+0x8>
 8005642:	bf00      	nop
 8005644:	20000988 	.word	0x20000988
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005652:	2300      	movs	r3, #0
 8005654:	607b      	str	r3, [r7, #4]
 8005656:	e00c      	b.n	8005672 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4a12      	ldr	r2, [pc, #72]	; (80056ac <prvInitialiseTaskLists+0x60>)
 8005664:	4413      	add	r3, r2
 8005666:	4618      	mov	r0, r3
 8005668:	f7fe fcdc 	bl	8004024 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3301      	adds	r3, #1
 8005670:	607b      	str	r3, [r7, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b37      	cmp	r3, #55	; 0x37
 8005676:	d9ef      	bls.n	8005658 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005678:	480d      	ldr	r0, [pc, #52]	; (80056b0 <prvInitialiseTaskLists+0x64>)
 800567a:	f7fe fcd3 	bl	8004024 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800567e:	480d      	ldr	r0, [pc, #52]	; (80056b4 <prvInitialiseTaskLists+0x68>)
 8005680:	f7fe fcd0 	bl	8004024 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005684:	480c      	ldr	r0, [pc, #48]	; (80056b8 <prvInitialiseTaskLists+0x6c>)
 8005686:	f7fe fccd 	bl	8004024 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800568a:	480c      	ldr	r0, [pc, #48]	; (80056bc <prvInitialiseTaskLists+0x70>)
 800568c:	f7fe fcca 	bl	8004024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005690:	480b      	ldr	r0, [pc, #44]	; (80056c0 <prvInitialiseTaskLists+0x74>)
 8005692:	f7fe fcc7 	bl	8004024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005696:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <prvInitialiseTaskLists+0x78>)
 8005698:	4a05      	ldr	r2, [pc, #20]	; (80056b0 <prvInitialiseTaskLists+0x64>)
 800569a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800569c:	4b0a      	ldr	r3, [pc, #40]	; (80056c8 <prvInitialiseTaskLists+0x7c>)
 800569e:	4a05      	ldr	r2, [pc, #20]	; (80056b4 <prvInitialiseTaskLists+0x68>)
 80056a0:	601a      	str	r2, [r3, #0]
}
 80056a2:	bf00      	nop
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000988 	.word	0x20000988
 80056b0:	20000de8 	.word	0x20000de8
 80056b4:	20000dfc 	.word	0x20000dfc
 80056b8:	20000e18 	.word	0x20000e18
 80056bc:	20000e2c 	.word	0x20000e2c
 80056c0:	20000e44 	.word	0x20000e44
 80056c4:	20000e10 	.word	0x20000e10
 80056c8:	20000e14 	.word	0x20000e14

080056cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056d2:	e019      	b.n	8005708 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056d4:	f000 fd62 	bl	800619c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80056d8:	4b10      	ldr	r3, [pc, #64]	; (800571c <prvCheckTasksWaitingTermination+0x50>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3304      	adds	r3, #4
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fe fd23 	bl	8004130 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056ea:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <prvCheckTasksWaitingTermination+0x54>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	4a0b      	ldr	r2, [pc, #44]	; (8005720 <prvCheckTasksWaitingTermination+0x54>)
 80056f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056f4:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <prvCheckTasksWaitingTermination+0x58>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3b01      	subs	r3, #1
 80056fa:	4a0a      	ldr	r2, [pc, #40]	; (8005724 <prvCheckTasksWaitingTermination+0x58>)
 80056fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056fe:	f000 fd7d 	bl	80061fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f810 	bl	8005728 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005708:	4b06      	ldr	r3, [pc, #24]	; (8005724 <prvCheckTasksWaitingTermination+0x58>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e1      	bne.n	80056d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005710:	bf00      	nop
 8005712:	bf00      	nop
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000e2c 	.word	0x20000e2c
 8005720:	20000e58 	.word	0x20000e58
 8005724:	20000e40 	.word	0x20000e40

08005728 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3358      	adds	r3, #88	; 0x58
 8005734:	4618      	mov	r0, r3
 8005736:	f001 fe0b 	bl	8007350 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8005740:	2b00      	cmp	r3, #0
 8005742:	d108      	bne.n	8005756 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005748:	4618      	mov	r0, r3
 800574a:	f000 feeb 	bl	8006524 <vPortFree>
				vPortFree( pxTCB );
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fee8 	bl	8006524 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005754:	e018      	b.n	8005788 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800575c:	2b01      	cmp	r3, #1
 800575e:	d103      	bne.n	8005768 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 fedf 	bl	8006524 <vPortFree>
	}
 8005766:	e00f      	b.n	8005788 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800576e:	2b02      	cmp	r3, #2
 8005770:	d00a      	beq.n	8005788 <prvDeleteTCB+0x60>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	60fb      	str	r3, [r7, #12]
}
 8005784:	bf00      	nop
 8005786:	e7fe      	b.n	8005786 <prvDeleteTCB+0x5e>
	}
 8005788:	bf00      	nop
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005796:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <prvResetNextTaskUnblockTime+0x40>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <prvResetNextTaskUnblockTime+0x14>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <prvResetNextTaskUnblockTime+0x16>
 80057a4:	2300      	movs	r3, #0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d004      	beq.n	80057b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057aa:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <prvResetNextTaskUnblockTime+0x44>)
 80057ac:	f04f 32ff 	mov.w	r2, #4294967295
 80057b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057b2:	e008      	b.n	80057c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057b4:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <prvResetNextTaskUnblockTime+0x40>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	4a04      	ldr	r2, [pc, #16]	; (80057d4 <prvResetNextTaskUnblockTime+0x44>)
 80057c4:	6013      	str	r3, [r2, #0]
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr
 80057d0:	20000e10 	.word	0x20000e10
 80057d4:	20000e78 	.word	0x20000e78

080057d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057de:	4b0b      	ldr	r3, [pc, #44]	; (800580c <xTaskGetSchedulerState+0x34>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d102      	bne.n	80057ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057e6:	2301      	movs	r3, #1
 80057e8:	607b      	str	r3, [r7, #4]
 80057ea:	e008      	b.n	80057fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ec:	4b08      	ldr	r3, [pc, #32]	; (8005810 <xTaskGetSchedulerState+0x38>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d102      	bne.n	80057fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057f4:	2302      	movs	r3, #2
 80057f6:	607b      	str	r3, [r7, #4]
 80057f8:	e001      	b.n	80057fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057fa:	2300      	movs	r3, #0
 80057fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057fe:	687b      	ldr	r3, [r7, #4]
	}
 8005800:	4618      	mov	r0, r3
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	20000e64 	.word	0x20000e64
 8005810:	20000e80 	.word	0x20000e80

08005814 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d056      	beq.n	80058d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800582a:	4b2e      	ldr	r3, [pc, #184]	; (80058e4 <xTaskPriorityDisinherit+0xd0>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	429a      	cmp	r2, r3
 8005832:	d00a      	beq.n	800584a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	60fb      	str	r3, [r7, #12]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10a      	bne.n	8005868 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	60bb      	str	r3, [r7, #8]
}
 8005864:	bf00      	nop
 8005866:	e7fe      	b.n	8005866 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	1e5a      	subs	r2, r3, #1
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587a:	429a      	cmp	r2, r3
 800587c:	d02c      	beq.n	80058d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005882:	2b00      	cmp	r3, #0
 8005884:	d128      	bne.n	80058d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	3304      	adds	r3, #4
 800588a:	4618      	mov	r0, r3
 800588c:	f7fe fc50 	bl	8004130 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a8:	4b0f      	ldr	r3, [pc, #60]	; (80058e8 <xTaskPriorityDisinherit+0xd4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d903      	bls.n	80058b8 <xTaskPriorityDisinherit+0xa4>
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	4a0c      	ldr	r2, [pc, #48]	; (80058e8 <xTaskPriorityDisinherit+0xd4>)
 80058b6:	6013      	str	r3, [r2, #0]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058bc:	4613      	mov	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4a09      	ldr	r2, [pc, #36]	; (80058ec <xTaskPriorityDisinherit+0xd8>)
 80058c6:	441a      	add	r2, r3
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	3304      	adds	r3, #4
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f7fe fbd3 	bl	800407a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058d4:	2301      	movs	r3, #1
 80058d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058d8:	697b      	ldr	r3, [r7, #20]
	}
 80058da:	4618      	mov	r0, r3
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20000984 	.word	0x20000984
 80058e8:	20000e60 	.word	0x20000e60
 80058ec:	20000988 	.word	0x20000988

080058f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80058fa:	4b21      	ldr	r3, [pc, #132]	; (8005980 <prvAddCurrentTaskToDelayedList+0x90>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005900:	4b20      	ldr	r3, [pc, #128]	; (8005984 <prvAddCurrentTaskToDelayedList+0x94>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3304      	adds	r3, #4
 8005906:	4618      	mov	r0, r3
 8005908:	f7fe fc12 	bl	8004130 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005912:	d10a      	bne.n	800592a <prvAddCurrentTaskToDelayedList+0x3a>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800591a:	4b1a      	ldr	r3, [pc, #104]	; (8005984 <prvAddCurrentTaskToDelayedList+0x94>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3304      	adds	r3, #4
 8005920:	4619      	mov	r1, r3
 8005922:	4819      	ldr	r0, [pc, #100]	; (8005988 <prvAddCurrentTaskToDelayedList+0x98>)
 8005924:	f7fe fba9 	bl	800407a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005928:	e026      	b.n	8005978 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4413      	add	r3, r2
 8005930:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005932:	4b14      	ldr	r3, [pc, #80]	; (8005984 <prvAddCurrentTaskToDelayedList+0x94>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	429a      	cmp	r2, r3
 8005940:	d209      	bcs.n	8005956 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005942:	4b12      	ldr	r3, [pc, #72]	; (800598c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	4b0f      	ldr	r3, [pc, #60]	; (8005984 <prvAddCurrentTaskToDelayedList+0x94>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3304      	adds	r3, #4
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f7fe fbb6 	bl	80040c0 <vListInsert>
}
 8005954:	e010      	b.n	8005978 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005956:	4b0e      	ldr	r3, [pc, #56]	; (8005990 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <prvAddCurrentTaskToDelayedList+0x94>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3304      	adds	r3, #4
 8005960:	4619      	mov	r1, r3
 8005962:	4610      	mov	r0, r2
 8005964:	f7fe fbac 	bl	80040c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005968:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <prvAddCurrentTaskToDelayedList+0xa4>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	429a      	cmp	r2, r3
 8005970:	d202      	bcs.n	8005978 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005972:	4a08      	ldr	r2, [pc, #32]	; (8005994 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	6013      	str	r3, [r2, #0]
}
 8005978:	bf00      	nop
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20000e5c 	.word	0x20000e5c
 8005984:	20000984 	.word	0x20000984
 8005988:	20000e44 	.word	0x20000e44
 800598c:	20000e14 	.word	0x20000e14
 8005990:	20000e10 	.word	0x20000e10
 8005994:	20000e78 	.word	0x20000e78

08005998 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08a      	sub	sp, #40	; 0x28
 800599c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800599e:	2300      	movs	r3, #0
 80059a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80059a2:	f000 facb 	bl	8005f3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80059a6:	4b1c      	ldr	r3, [pc, #112]	; (8005a18 <xTimerCreateTimerTask+0x80>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d021      	beq.n	80059f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80059b2:	2300      	movs	r3, #0
 80059b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80059b6:	1d3a      	adds	r2, r7, #4
 80059b8:	f107 0108 	add.w	r1, r7, #8
 80059bc:	f107 030c 	add.w	r3, r7, #12
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fe fb15 	bl	8003ff0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	9202      	str	r2, [sp, #8]
 80059ce:	9301      	str	r3, [sp, #4]
 80059d0:	2302      	movs	r3, #2
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	2300      	movs	r3, #0
 80059d6:	460a      	mov	r2, r1
 80059d8:	4910      	ldr	r1, [pc, #64]	; (8005a1c <xTimerCreateTimerTask+0x84>)
 80059da:	4811      	ldr	r0, [pc, #68]	; (8005a20 <xTimerCreateTimerTask+0x88>)
 80059dc:	f7ff f8b6 	bl	8004b4c <xTaskCreateStatic>
 80059e0:	4603      	mov	r3, r0
 80059e2:	4a10      	ldr	r2, [pc, #64]	; (8005a24 <xTimerCreateTimerTask+0x8c>)
 80059e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80059e6:	4b0f      	ldr	r3, [pc, #60]	; (8005a24 <xTimerCreateTimerTask+0x8c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80059ee:	2301      	movs	r3, #1
 80059f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	613b      	str	r3, [r7, #16]
}
 8005a0a:	bf00      	nop
 8005a0c:	e7fe      	b.n	8005a0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005a0e:	697b      	ldr	r3, [r7, #20]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000eb4 	.word	0x20000eb4
 8005a1c:	08009604 	.word	0x08009604
 8005a20:	08005b45 	.word	0x08005b45
 8005a24:	20000eb8 	.word	0x20000eb8

08005a28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	; 0x28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10a      	bne.n	8005a56 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	623b      	str	r3, [r7, #32]
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a56:	4b1a      	ldr	r3, [pc, #104]	; (8005ac0 <xTimerGenericCommand+0x98>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d02a      	beq.n	8005ab4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b05      	cmp	r3, #5
 8005a6e:	dc18      	bgt.n	8005aa2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a70:	f7ff feb2 	bl	80057d8 <xTaskGetSchedulerState>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d109      	bne.n	8005a8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a7a:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <xTimerGenericCommand+0x98>)
 8005a7c:	6818      	ldr	r0, [r3, #0]
 8005a7e:	f107 0110 	add.w	r1, r7, #16
 8005a82:	2300      	movs	r3, #0
 8005a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a86:	f7fe fc7f 	bl	8004388 <xQueueGenericSend>
 8005a8a:	6278      	str	r0, [r7, #36]	; 0x24
 8005a8c:	e012      	b.n	8005ab4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a8e:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <xTimerGenericCommand+0x98>)
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	f107 0110 	add.w	r1, r7, #16
 8005a96:	2300      	movs	r3, #0
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f7fe fc75 	bl	8004388 <xQueueGenericSend>
 8005a9e:	6278      	str	r0, [r7, #36]	; 0x24
 8005aa0:	e008      	b.n	8005ab4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005aa2:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <xTimerGenericCommand+0x98>)
 8005aa4:	6818      	ldr	r0, [r3, #0]
 8005aa6:	f107 0110 	add.w	r1, r7, #16
 8005aaa:	2300      	movs	r3, #0
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	f7fe fd69 	bl	8004584 <xQueueGenericSendFromISR>
 8005ab2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3728      	adds	r7, #40	; 0x28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20000eb4 	.word	0x20000eb4

08005ac4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ace:	4b1c      	ldr	r3, [pc, #112]	; (8005b40 <prvProcessExpiredTimer+0x7c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fe fb27 	bl	8004130 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d122      	bne.n	8005b30 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	18d1      	adds	r1, r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	6978      	ldr	r0, [r7, #20]
 8005af8:	f000 f8c8 	bl	8005c8c <prvInsertTimerInActiveList>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d016      	beq.n	8005b30 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b02:	2300      	movs	r3, #0
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	2300      	movs	r3, #0
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	6978      	ldr	r0, [r7, #20]
 8005b0e:	f7ff ff8b 	bl	8005a28 <xTimerGenericCommand>
 8005b12:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10a      	bne.n	8005b30 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	60fb      	str	r3, [r7, #12]
}
 8005b2c:	bf00      	nop
 8005b2e:	e7fe      	b.n	8005b2e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	6978      	ldr	r0, [r7, #20]
 8005b36:	4798      	blx	r3
}
 8005b38:	bf00      	nop
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000eac 	.word	0x20000eac

08005b44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b4c:	f107 0308 	add.w	r3, r7, #8
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 f857 	bl	8005c04 <prvGetNextExpireTime>
 8005b56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 f803 	bl	8005b68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b62:	f000 f8d5 	bl	8005d10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b66:	e7f1      	b.n	8005b4c <prvTimerTask+0x8>

08005b68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b72:	f7ff fa3f 	bl	8004ff4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b76:	f107 0308 	add.w	r3, r7, #8
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 f866 	bl	8005c4c <prvSampleTimeNow>
 8005b80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d130      	bne.n	8005bea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <prvProcessTimerOrBlockTask+0x3c>
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d806      	bhi.n	8005ba4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b96:	f7ff fa3b 	bl	8005010 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b9a:	68f9      	ldr	r1, [r7, #12]
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff ff91 	bl	8005ac4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005ba2:	e024      	b.n	8005bee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d008      	beq.n	8005bbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005baa:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <prvProcessTimerOrBlockTask+0x90>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	bf0c      	ite	eq
 8005bb4:	2301      	moveq	r3, #1
 8005bb6:	2300      	movne	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005bbc:	4b0f      	ldr	r3, [pc, #60]	; (8005bfc <prvProcessTimerOrBlockTask+0x94>)
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	f7fe ff8b 	bl	8004ae4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005bce:	f7ff fa1f 	bl	8005010 <xTaskResumeAll>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10a      	bne.n	8005bee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005bd8:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <prvProcessTimerOrBlockTask+0x98>)
 8005bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	f3bf 8f6f 	isb	sy
}
 8005be8:	e001      	b.n	8005bee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005bea:	f7ff fa11 	bl	8005010 <xTaskResumeAll>
}
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000eb0 	.word	0x20000eb0
 8005bfc:	20000eb4 	.word	0x20000eb4
 8005c00:	e000ed04 	.word	0xe000ed04

08005c04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c0c:	4b0e      	ldr	r3, [pc, #56]	; (8005c48 <prvGetNextExpireTime+0x44>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	bf0c      	ite	eq
 8005c16:	2301      	moveq	r3, #1
 8005c18:	2300      	movne	r3, #0
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d105      	bne.n	8005c36 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c2a:	4b07      	ldr	r3, [pc, #28]	; (8005c48 <prvGetNextExpireTime+0x44>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	e001      	b.n	8005c3a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bc80      	pop	{r7}
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	20000eac 	.word	0x20000eac

08005c4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c54:	f7ff fa7a 	bl	800514c <xTaskGetTickCount>
 8005c58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c5a:	4b0b      	ldr	r3, [pc, #44]	; (8005c88 <prvSampleTimeNow+0x3c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d205      	bcs.n	8005c70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c64:	f000 f908 	bl	8005e78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	e002      	b.n	8005c76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c76:	4a04      	ldr	r2, [pc, #16]	; (8005c88 <prvSampleTimeNow+0x3c>)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20000ebc 	.word	0x20000ebc

08005c8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d812      	bhi.n	8005cd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	1ad2      	subs	r2, r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d302      	bcc.n	8005cc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	e01b      	b.n	8005cfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005cc6:	4b10      	ldr	r3, [pc, #64]	; (8005d08 <prvInsertTimerInActiveList+0x7c>)
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	f7fe f9f5 	bl	80040c0 <vListInsert>
 8005cd6:	e012      	b.n	8005cfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d206      	bcs.n	8005cee <prvInsertTimerInActiveList+0x62>
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d302      	bcc.n	8005cee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	e007      	b.n	8005cfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cee:	4b07      	ldr	r3, [pc, #28]	; (8005d0c <prvInsertTimerInActiveList+0x80>)
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	f7fe f9e1 	bl	80040c0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005cfe:	697b      	ldr	r3, [r7, #20]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	20000eb0 	.word	0x20000eb0
 8005d0c:	20000eac 	.word	0x20000eac

08005d10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08e      	sub	sp, #56	; 0x38
 8005d14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d16:	e09d      	b.n	8005e54 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	da18      	bge.n	8005d50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d1e:	1d3b      	adds	r3, r7, #4
 8005d20:	3304      	adds	r3, #4
 8005d22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10a      	bne.n	8005d40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	61fb      	str	r3, [r7, #28]
}
 8005d3c:	bf00      	nop
 8005d3e:	e7fe      	b.n	8005d3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d46:	6850      	ldr	r0, [r2, #4]
 8005d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d4a:	6892      	ldr	r2, [r2, #8]
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	db7d      	blt.n	8005e52 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d004      	beq.n	8005d6c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	3304      	adds	r3, #4
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fe f9e2 	bl	8004130 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d6c:	463b      	mov	r3, r7
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff ff6c 	bl	8005c4c <prvSampleTimeNow>
 8005d74:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b09      	cmp	r3, #9
 8005d7a:	d86b      	bhi.n	8005e54 <prvProcessReceivedCommands+0x144>
 8005d7c:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <prvProcessReceivedCommands+0x74>)
 8005d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d82:	bf00      	nop
 8005d84:	08005dad 	.word	0x08005dad
 8005d88:	08005dad 	.word	0x08005dad
 8005d8c:	08005dad 	.word	0x08005dad
 8005d90:	08005e55 	.word	0x08005e55
 8005d94:	08005e09 	.word	0x08005e09
 8005d98:	08005e41 	.word	0x08005e41
 8005d9c:	08005dad 	.word	0x08005dad
 8005da0:	08005dad 	.word	0x08005dad
 8005da4:	08005e55 	.word	0x08005e55
 8005da8:	08005e09 	.word	0x08005e09
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	18d1      	adds	r1, r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dba:	f7ff ff67 	bl	8005c8c <prvInsertTimerInActiveList>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d047      	beq.n	8005e54 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d13f      	bne.n	8005e54 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	441a      	add	r2, r3
 8005ddc:	2300      	movs	r3, #0
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	2300      	movs	r3, #0
 8005de2:	2100      	movs	r1, #0
 8005de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005de6:	f7ff fe1f 	bl	8005a28 <xTimerGenericCommand>
 8005dea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d130      	bne.n	8005e54 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	61bb      	str	r3, [r7, #24]
}
 8005e04:	bf00      	nop
 8005e06:	e7fe      	b.n	8005e06 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10a      	bne.n	8005e2c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	617b      	str	r3, [r7, #20]
}
 8005e28:	bf00      	nop
 8005e2a:	e7fe      	b.n	8005e2a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	699a      	ldr	r2, [r3, #24]
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	18d1      	adds	r1, r2, r3
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e3a:	f7ff ff27 	bl	8005c8c <prvInsertTimerInActiveList>
					break;
 8005e3e:	e009      	b.n	8005e54 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d104      	bne.n	8005e54 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e4c:	f000 fb6a 	bl	8006524 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e50:	e000      	b.n	8005e54 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005e52:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e54:	4b07      	ldr	r3, [pc, #28]	; (8005e74 <prvProcessReceivedCommands+0x164>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	1d39      	adds	r1, r7, #4
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fe fc29 	bl	80046b4 <xQueueReceive>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f47f af57 	bne.w	8005d18 <prvProcessReceivedCommands+0x8>
	}
}
 8005e6a:	bf00      	nop
 8005e6c:	bf00      	nop
 8005e6e:	3730      	adds	r7, #48	; 0x30
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	20000eb4 	.word	0x20000eb4

08005e78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e7e:	e045      	b.n	8005f0c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e80:	4b2c      	ldr	r3, [pc, #176]	; (8005f34 <prvSwitchTimerLists+0xbc>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e8a:	4b2a      	ldr	r3, [pc, #168]	; (8005f34 <prvSwitchTimerLists+0xbc>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3304      	adds	r3, #4
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fe f949 	bl	8004130 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d12e      	bne.n	8005f0c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d90e      	bls.n	8005ede <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ecc:	4b19      	ldr	r3, [pc, #100]	; (8005f34 <prvSwitchTimerLists+0xbc>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	f7fe f8f2 	bl	80040c0 <vListInsert>
 8005edc:	e016      	b.n	8005f0c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f7ff fd9d 	bl	8005a28 <xTimerGenericCommand>
 8005eee:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10a      	bne.n	8005f0c <prvSwitchTimerLists+0x94>
	__asm volatile
 8005ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	603b      	str	r3, [r7, #0]
}
 8005f08:	bf00      	nop
 8005f0a:	e7fe      	b.n	8005f0a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f0c:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <prvSwitchTimerLists+0xbc>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1b4      	bne.n	8005e80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005f16:	4b07      	ldr	r3, [pc, #28]	; (8005f34 <prvSwitchTimerLists+0xbc>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f1c:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <prvSwitchTimerLists+0xc0>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a04      	ldr	r2, [pc, #16]	; (8005f34 <prvSwitchTimerLists+0xbc>)
 8005f22:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f24:	4a04      	ldr	r2, [pc, #16]	; (8005f38 <prvSwitchTimerLists+0xc0>)
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	6013      	str	r3, [r2, #0]
}
 8005f2a:	bf00      	nop
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000eac 	.word	0x20000eac
 8005f38:	20000eb0 	.word	0x20000eb0

08005f3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f42:	f000 f92b 	bl	800619c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f46:	4b15      	ldr	r3, [pc, #84]	; (8005f9c <prvCheckForValidListAndQueue+0x60>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d120      	bne.n	8005f90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f4e:	4814      	ldr	r0, [pc, #80]	; (8005fa0 <prvCheckForValidListAndQueue+0x64>)
 8005f50:	f7fe f868 	bl	8004024 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f54:	4813      	ldr	r0, [pc, #76]	; (8005fa4 <prvCheckForValidListAndQueue+0x68>)
 8005f56:	f7fe f865 	bl	8004024 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f5a:	4b13      	ldr	r3, [pc, #76]	; (8005fa8 <prvCheckForValidListAndQueue+0x6c>)
 8005f5c:	4a10      	ldr	r2, [pc, #64]	; (8005fa0 <prvCheckForValidListAndQueue+0x64>)
 8005f5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f60:	4b12      	ldr	r3, [pc, #72]	; (8005fac <prvCheckForValidListAndQueue+0x70>)
 8005f62:	4a10      	ldr	r2, [pc, #64]	; (8005fa4 <prvCheckForValidListAndQueue+0x68>)
 8005f64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f66:	2300      	movs	r3, #0
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	4b11      	ldr	r3, [pc, #68]	; (8005fb0 <prvCheckForValidListAndQueue+0x74>)
 8005f6c:	4a11      	ldr	r2, [pc, #68]	; (8005fb4 <prvCheckForValidListAndQueue+0x78>)
 8005f6e:	2110      	movs	r1, #16
 8005f70:	200a      	movs	r0, #10
 8005f72:	f7fe f96f 	bl	8004254 <xQueueGenericCreateStatic>
 8005f76:	4603      	mov	r3, r0
 8005f78:	4a08      	ldr	r2, [pc, #32]	; (8005f9c <prvCheckForValidListAndQueue+0x60>)
 8005f7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f7c:	4b07      	ldr	r3, [pc, #28]	; (8005f9c <prvCheckForValidListAndQueue+0x60>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d005      	beq.n	8005f90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f84:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <prvCheckForValidListAndQueue+0x60>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	490b      	ldr	r1, [pc, #44]	; (8005fb8 <prvCheckForValidListAndQueue+0x7c>)
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fe fd82 	bl	8004a94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f90:	f000 f934 	bl	80061fc <vPortExitCritical>
}
 8005f94:	bf00      	nop
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000eb4 	.word	0x20000eb4
 8005fa0:	20000e84 	.word	0x20000e84
 8005fa4:	20000e98 	.word	0x20000e98
 8005fa8:	20000eac 	.word	0x20000eac
 8005fac:	20000eb0 	.word	0x20000eb0
 8005fb0:	20000f60 	.word	0x20000f60
 8005fb4:	20000ec0 	.word	0x20000ec0
 8005fb8:	0800960c 	.word	0x0800960c

08005fbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3b04      	subs	r3, #4
 8005fcc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3b04      	subs	r3, #4
 8005fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f023 0201 	bic.w	r2, r3, #1
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3b04      	subs	r3, #4
 8005fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fec:	4a08      	ldr	r2, [pc, #32]	; (8006010 <pxPortInitialiseStack+0x54>)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3b14      	subs	r3, #20
 8005ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3b20      	subs	r3, #32
 8006002:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006004:	68fb      	ldr	r3, [r7, #12]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr
 8006010:	08006015 	.word	0x08006015

08006014 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800601a:	2300      	movs	r3, #0
 800601c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800601e:	4b12      	ldr	r3, [pc, #72]	; (8006068 <prvTaskExitError+0x54>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d00a      	beq.n	800603e <prvTaskExitError+0x2a>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	60fb      	str	r3, [r7, #12]
}
 800603a:	bf00      	nop
 800603c:	e7fe      	b.n	800603c <prvTaskExitError+0x28>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	60bb      	str	r3, [r7, #8]
}
 8006050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006052:	bf00      	nop
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0fc      	beq.n	8006054 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800605a:	bf00      	nop
 800605c:	bf00      	nop
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	bc80      	pop	{r7}
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	2000000c 	.word	0x2000000c
 800606c:	00000000 	.word	0x00000000

08006070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006070:	4b07      	ldr	r3, [pc, #28]	; (8006090 <pxCurrentTCBConst2>)
 8006072:	6819      	ldr	r1, [r3, #0]
 8006074:	6808      	ldr	r0, [r1, #0]
 8006076:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800607a:	f380 8809 	msr	PSP, r0
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f04f 0000 	mov.w	r0, #0
 8006086:	f380 8811 	msr	BASEPRI, r0
 800608a:	f04e 0e0d 	orr.w	lr, lr, #13
 800608e:	4770      	bx	lr

08006090 <pxCurrentTCBConst2>:
 8006090:	20000984 	.word	0x20000984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop

08006098 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006098:	4806      	ldr	r0, [pc, #24]	; (80060b4 <prvPortStartFirstTask+0x1c>)
 800609a:	6800      	ldr	r0, [r0, #0]
 800609c:	6800      	ldr	r0, [r0, #0]
 800609e:	f380 8808 	msr	MSP, r0
 80060a2:	b662      	cpsie	i
 80060a4:	b661      	cpsie	f
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	df00      	svc	0
 80060b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060b2:	bf00      	nop
 80060b4:	e000ed08 	.word	0xe000ed08

080060b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060be:	4b32      	ldr	r3, [pc, #200]	; (8006188 <xPortStartScheduler+0xd0>)
 80060c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	22ff      	movs	r2, #255	; 0xff
 80060ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060d8:	78fb      	ldrb	r3, [r7, #3]
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	4b2a      	ldr	r3, [pc, #168]	; (800618c <xPortStartScheduler+0xd4>)
 80060e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060e6:	4b2a      	ldr	r3, [pc, #168]	; (8006190 <xPortStartScheduler+0xd8>)
 80060e8:	2207      	movs	r2, #7
 80060ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060ec:	e009      	b.n	8006102 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80060ee:	4b28      	ldr	r3, [pc, #160]	; (8006190 <xPortStartScheduler+0xd8>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	4a26      	ldr	r2, [pc, #152]	; (8006190 <xPortStartScheduler+0xd8>)
 80060f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006102:	78fb      	ldrb	r3, [r7, #3]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610a:	2b80      	cmp	r3, #128	; 0x80
 800610c:	d0ef      	beq.n	80060ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800610e:	4b20      	ldr	r3, [pc, #128]	; (8006190 <xPortStartScheduler+0xd8>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f1c3 0307 	rsb	r3, r3, #7
 8006116:	2b04      	cmp	r3, #4
 8006118:	d00a      	beq.n	8006130 <xPortStartScheduler+0x78>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	60bb      	str	r3, [r7, #8]
}
 800612c:	bf00      	nop
 800612e:	e7fe      	b.n	800612e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006130:	4b17      	ldr	r3, [pc, #92]	; (8006190 <xPortStartScheduler+0xd8>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	021b      	lsls	r3, r3, #8
 8006136:	4a16      	ldr	r2, [pc, #88]	; (8006190 <xPortStartScheduler+0xd8>)
 8006138:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800613a:	4b15      	ldr	r3, [pc, #84]	; (8006190 <xPortStartScheduler+0xd8>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006142:	4a13      	ldr	r2, [pc, #76]	; (8006190 <xPortStartScheduler+0xd8>)
 8006144:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	b2da      	uxtb	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800614e:	4b11      	ldr	r3, [pc, #68]	; (8006194 <xPortStartScheduler+0xdc>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a10      	ldr	r2, [pc, #64]	; (8006194 <xPortStartScheduler+0xdc>)
 8006154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006158:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800615a:	4b0e      	ldr	r3, [pc, #56]	; (8006194 <xPortStartScheduler+0xdc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a0d      	ldr	r2, [pc, #52]	; (8006194 <xPortStartScheduler+0xdc>)
 8006160:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006164:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006166:	f000 f8b9 	bl	80062dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800616a:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <xPortStartScheduler+0xe0>)
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006170:	f7ff ff92 	bl	8006098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006174:	f7ff f8b6 	bl	80052e4 <vTaskSwitchContext>
	prvTaskExitError();
 8006178:	f7ff ff4c 	bl	8006014 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	e000e400 	.word	0xe000e400
 800618c:	20000fb0 	.word	0x20000fb0
 8006190:	20000fb4 	.word	0x20000fb4
 8006194:	e000ed20 	.word	0xe000ed20
 8006198:	2000000c 	.word	0x2000000c

0800619c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
	__asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	607b      	str	r3, [r7, #4]
}
 80061b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061b6:	4b0f      	ldr	r3, [pc, #60]	; (80061f4 <vPortEnterCritical+0x58>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3301      	adds	r3, #1
 80061bc:	4a0d      	ldr	r2, [pc, #52]	; (80061f4 <vPortEnterCritical+0x58>)
 80061be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061c0:	4b0c      	ldr	r3, [pc, #48]	; (80061f4 <vPortEnterCritical+0x58>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d10f      	bne.n	80061e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061c8:	4b0b      	ldr	r3, [pc, #44]	; (80061f8 <vPortEnterCritical+0x5c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	603b      	str	r3, [r7, #0]
}
 80061e4:	bf00      	nop
 80061e6:	e7fe      	b.n	80061e6 <vPortEnterCritical+0x4a>
	}
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bc80      	pop	{r7}
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	2000000c 	.word	0x2000000c
 80061f8:	e000ed04 	.word	0xe000ed04

080061fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006202:	4b11      	ldr	r3, [pc, #68]	; (8006248 <vPortExitCritical+0x4c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10a      	bne.n	8006220 <vPortExitCritical+0x24>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	607b      	str	r3, [r7, #4]
}
 800621c:	bf00      	nop
 800621e:	e7fe      	b.n	800621e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006220:	4b09      	ldr	r3, [pc, #36]	; (8006248 <vPortExitCritical+0x4c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3b01      	subs	r3, #1
 8006226:	4a08      	ldr	r2, [pc, #32]	; (8006248 <vPortExitCritical+0x4c>)
 8006228:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800622a:	4b07      	ldr	r3, [pc, #28]	; (8006248 <vPortExitCritical+0x4c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d105      	bne.n	800623e <vPortExitCritical+0x42>
 8006232:	2300      	movs	r3, #0
 8006234:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	f383 8811 	msr	BASEPRI, r3
}
 800623c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr
 8006248:	2000000c 	.word	0x2000000c
 800624c:	00000000 	.word	0x00000000

08006250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006250:	f3ef 8009 	mrs	r0, PSP
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	4b0d      	ldr	r3, [pc, #52]	; (8006290 <pxCurrentTCBConst>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006260:	6010      	str	r0, [r2, #0]
 8006262:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006266:	f04f 0050 	mov.w	r0, #80	; 0x50
 800626a:	f380 8811 	msr	BASEPRI, r0
 800626e:	f7ff f839 	bl	80052e4 <vTaskSwitchContext>
 8006272:	f04f 0000 	mov.w	r0, #0
 8006276:	f380 8811 	msr	BASEPRI, r0
 800627a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800627e:	6819      	ldr	r1, [r3, #0]
 8006280:	6808      	ldr	r0, [r1, #0]
 8006282:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006286:	f380 8809 	msr	PSP, r0
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	4770      	bx	lr

08006290 <pxCurrentTCBConst>:
 8006290:	20000984 	.word	0x20000984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop

08006298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	607b      	str	r3, [r7, #4]
}
 80062b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062b2:	f7fe ff59 	bl	8005168 <xTaskIncrementTick>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062bc:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <SysTick_Handler+0x40>)
 80062be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	2300      	movs	r3, #0
 80062c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f383 8811 	msr	BASEPRI, r3
}
 80062ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062e0:	4b0a      	ldr	r3, [pc, #40]	; (800630c <vPortSetupTimerInterrupt+0x30>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062e6:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <vPortSetupTimerInterrupt+0x34>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062ec:	4b09      	ldr	r3, [pc, #36]	; (8006314 <vPortSetupTimerInterrupt+0x38>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a09      	ldr	r2, [pc, #36]	; (8006318 <vPortSetupTimerInterrupt+0x3c>)
 80062f2:	fba2 2303 	umull	r2, r3, r2, r3
 80062f6:	099b      	lsrs	r3, r3, #6
 80062f8:	4a08      	ldr	r2, [pc, #32]	; (800631c <vPortSetupTimerInterrupt+0x40>)
 80062fa:	3b01      	subs	r3, #1
 80062fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062fe:	4b03      	ldr	r3, [pc, #12]	; (800630c <vPortSetupTimerInterrupt+0x30>)
 8006300:	2207      	movs	r2, #7
 8006302:	601a      	str	r2, [r3, #0]
}
 8006304:	bf00      	nop
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr
 800630c:	e000e010 	.word	0xe000e010
 8006310:	e000e018 	.word	0xe000e018
 8006314:	20000000 	.word	0x20000000
 8006318:	10624dd3 	.word	0x10624dd3
 800631c:	e000e014 	.word	0xe000e014

08006320 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006326:	f3ef 8305 	mrs	r3, IPSR
 800632a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b0f      	cmp	r3, #15
 8006330:	d914      	bls.n	800635c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006332:	4a16      	ldr	r2, [pc, #88]	; (800638c <vPortValidateInterruptPriority+0x6c>)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4413      	add	r3, r2
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800633c:	4b14      	ldr	r3, [pc, #80]	; (8006390 <vPortValidateInterruptPriority+0x70>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	7afa      	ldrb	r2, [r7, #11]
 8006342:	429a      	cmp	r2, r3
 8006344:	d20a      	bcs.n	800635c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	607b      	str	r3, [r7, #4]
}
 8006358:	bf00      	nop
 800635a:	e7fe      	b.n	800635a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800635c:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <vPortValidateInterruptPriority+0x74>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006364:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <vPortValidateInterruptPriority+0x78>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	429a      	cmp	r2, r3
 800636a:	d90a      	bls.n	8006382 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	603b      	str	r3, [r7, #0]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <vPortValidateInterruptPriority+0x60>
	}
 8006382:	bf00      	nop
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	bc80      	pop	{r7}
 800638a:	4770      	bx	lr
 800638c:	e000e3f0 	.word	0xe000e3f0
 8006390:	20000fb0 	.word	0x20000fb0
 8006394:	e000ed0c 	.word	0xe000ed0c
 8006398:	20000fb4 	.word	0x20000fb4

0800639c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08a      	sub	sp, #40	; 0x28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063a4:	2300      	movs	r3, #0
 80063a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063a8:	f7fe fe24 	bl	8004ff4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063ac:	4b58      	ldr	r3, [pc, #352]	; (8006510 <pvPortMalloc+0x174>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063b4:	f000 f910 	bl	80065d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063b8:	4b56      	ldr	r3, [pc, #344]	; (8006514 <pvPortMalloc+0x178>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4013      	ands	r3, r2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f040 808e 	bne.w	80064e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01d      	beq.n	8006408 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80063cc:	2208      	movs	r2, #8
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4413      	add	r3, r2
 80063d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d014      	beq.n	8006408 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f023 0307 	bic.w	r3, r3, #7
 80063e4:	3308      	adds	r3, #8
 80063e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f003 0307 	and.w	r3, r3, #7
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <pvPortMalloc+0x6c>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	617b      	str	r3, [r7, #20]
}
 8006404:	bf00      	nop
 8006406:	e7fe      	b.n	8006406 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d069      	beq.n	80064e2 <pvPortMalloc+0x146>
 800640e:	4b42      	ldr	r3, [pc, #264]	; (8006518 <pvPortMalloc+0x17c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	429a      	cmp	r2, r3
 8006416:	d864      	bhi.n	80064e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006418:	4b40      	ldr	r3, [pc, #256]	; (800651c <pvPortMalloc+0x180>)
 800641a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800641c:	4b3f      	ldr	r3, [pc, #252]	; (800651c <pvPortMalloc+0x180>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006422:	e004      	b.n	800642e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	429a      	cmp	r2, r3
 8006436:	d903      	bls.n	8006440 <pvPortMalloc+0xa4>
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1f1      	bne.n	8006424 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006440:	4b33      	ldr	r3, [pc, #204]	; (8006510 <pvPortMalloc+0x174>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006446:	429a      	cmp	r2, r3
 8006448:	d04b      	beq.n	80064e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2208      	movs	r2, #8
 8006450:	4413      	add	r3, r2
 8006452:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	1ad2      	subs	r2, r2, r3
 8006464:	2308      	movs	r3, #8
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	429a      	cmp	r2, r3
 800646a:	d91f      	bls.n	80064ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800646c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4413      	add	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <pvPortMalloc+0xf8>
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	613b      	str	r3, [r7, #16]
}
 8006490:	bf00      	nop
 8006492:	e7fe      	b.n	8006492 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	1ad2      	subs	r2, r2, r3
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064a6:	69b8      	ldr	r0, [r7, #24]
 80064a8:	f000 f8f8 	bl	800669c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064ac:	4b1a      	ldr	r3, [pc, #104]	; (8006518 <pvPortMalloc+0x17c>)
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	4a18      	ldr	r2, [pc, #96]	; (8006518 <pvPortMalloc+0x17c>)
 80064b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064ba:	4b17      	ldr	r3, [pc, #92]	; (8006518 <pvPortMalloc+0x17c>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	4b18      	ldr	r3, [pc, #96]	; (8006520 <pvPortMalloc+0x184>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d203      	bcs.n	80064ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064c6:	4b14      	ldr	r3, [pc, #80]	; (8006518 <pvPortMalloc+0x17c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a15      	ldr	r2, [pc, #84]	; (8006520 <pvPortMalloc+0x184>)
 80064cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	4b10      	ldr	r3, [pc, #64]	; (8006514 <pvPortMalloc+0x178>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	2200      	movs	r2, #0
 80064e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064e2:	f7fe fd95 	bl	8005010 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00a      	beq.n	8006506 <pvPortMalloc+0x16a>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	60fb      	str	r3, [r7, #12]
}
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <pvPortMalloc+0x168>
	return pvReturn;
 8006506:	69fb      	ldr	r3, [r7, #28]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3728      	adds	r7, #40	; 0x28
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20001bc0 	.word	0x20001bc0
 8006514:	20001bcc 	.word	0x20001bcc
 8006518:	20001bc4 	.word	0x20001bc4
 800651c:	20001bb8 	.word	0x20001bb8
 8006520:	20001bc8 	.word	0x20001bc8

08006524 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d048      	beq.n	80065c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006536:	2308      	movs	r3, #8
 8006538:	425b      	negs	r3, r3
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4413      	add	r3, r2
 800653e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	4b21      	ldr	r3, [pc, #132]	; (80065d0 <vPortFree+0xac>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4013      	ands	r3, r2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10a      	bne.n	8006568 <vPortFree+0x44>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	60fb      	str	r3, [r7, #12]
}
 8006564:	bf00      	nop
 8006566:	e7fe      	b.n	8006566 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <vPortFree+0x62>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	60bb      	str	r3, [r7, #8]
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	4b11      	ldr	r3, [pc, #68]	; (80065d0 <vPortFree+0xac>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4013      	ands	r3, r2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d019      	beq.n	80065c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d115      	bne.n	80065c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	4b0b      	ldr	r3, [pc, #44]	; (80065d0 <vPortFree+0xac>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	43db      	mvns	r3, r3
 80065a6:	401a      	ands	r2, r3
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065ac:	f7fe fd22 	bl	8004ff4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <vPortFree+0xb0>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4413      	add	r3, r2
 80065ba:	4a06      	ldr	r2, [pc, #24]	; (80065d4 <vPortFree+0xb0>)
 80065bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065be:	6938      	ldr	r0, [r7, #16]
 80065c0:	f000 f86c 	bl	800669c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80065c4:	f7fe fd24 	bl	8005010 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065c8:	bf00      	nop
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	20001bcc 	.word	0x20001bcc
 80065d4:	20001bc4 	.word	0x20001bc4

080065d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80065e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065e4:	4b27      	ldr	r3, [pc, #156]	; (8006684 <prvHeapInit+0xac>)
 80065e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f003 0307 	and.w	r3, r3, #7
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00c      	beq.n	800660c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3307      	adds	r3, #7
 80065f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0307 	bic.w	r3, r3, #7
 80065fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	4a1f      	ldr	r2, [pc, #124]	; (8006684 <prvHeapInit+0xac>)
 8006608:	4413      	add	r3, r2
 800660a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006610:	4a1d      	ldr	r2, [pc, #116]	; (8006688 <prvHeapInit+0xb0>)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006616:	4b1c      	ldr	r3, [pc, #112]	; (8006688 <prvHeapInit+0xb0>)
 8006618:	2200      	movs	r2, #0
 800661a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	4413      	add	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006624:	2208      	movs	r2, #8
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	1a9b      	subs	r3, r3, r2
 800662a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0307 	bic.w	r3, r3, #7
 8006632:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4a15      	ldr	r2, [pc, #84]	; (800668c <prvHeapInit+0xb4>)
 8006638:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800663a:	4b14      	ldr	r3, [pc, #80]	; (800668c <prvHeapInit+0xb4>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2200      	movs	r2, #0
 8006640:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006642:	4b12      	ldr	r3, [pc, #72]	; (800668c <prvHeapInit+0xb4>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2200      	movs	r2, #0
 8006648:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	1ad2      	subs	r2, r2, r3
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006658:	4b0c      	ldr	r3, [pc, #48]	; (800668c <prvHeapInit+0xb4>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	4a0a      	ldr	r2, [pc, #40]	; (8006690 <prvHeapInit+0xb8>)
 8006666:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	4a09      	ldr	r2, [pc, #36]	; (8006694 <prvHeapInit+0xbc>)
 800666e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006670:	4b09      	ldr	r3, [pc, #36]	; (8006698 <prvHeapInit+0xc0>)
 8006672:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006676:	601a      	str	r2, [r3, #0]
}
 8006678:	bf00      	nop
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	bc80      	pop	{r7}
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	20000fb8 	.word	0x20000fb8
 8006688:	20001bb8 	.word	0x20001bb8
 800668c:	20001bc0 	.word	0x20001bc0
 8006690:	20001bc8 	.word	0x20001bc8
 8006694:	20001bc4 	.word	0x20001bc4
 8006698:	20001bcc 	.word	0x20001bcc

0800669c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066a4:	4b27      	ldr	r3, [pc, #156]	; (8006744 <prvInsertBlockIntoFreeList+0xa8>)
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	e002      	b.n	80066b0 <prvInsertBlockIntoFreeList+0x14>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d8f7      	bhi.n	80066aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	4413      	add	r3, r2
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d108      	bne.n	80066de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	441a      	add	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	441a      	add	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d118      	bne.n	8006724 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	4b14      	ldr	r3, [pc, #80]	; (8006748 <prvInsertBlockIntoFreeList+0xac>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d00d      	beq.n	800671a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	441a      	add	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	e008      	b.n	800672c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800671a:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <prvInsertBlockIntoFreeList+0xac>)
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	e003      	b.n	800672c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	429a      	cmp	r2, r3
 8006732:	d002      	beq.n	800673a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800673a:	bf00      	nop
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	bc80      	pop	{r7}
 8006742:	4770      	bx	lr
 8006744:	20001bb8 	.word	0x20001bb8
 8006748:	20001bc0 	.word	0x20001bc0

0800674c <__errno>:
 800674c:	4b01      	ldr	r3, [pc, #4]	; (8006754 <__errno+0x8>)
 800674e:	6818      	ldr	r0, [r3, #0]
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	20000010 	.word	0x20000010

08006758 <std>:
 8006758:	2300      	movs	r3, #0
 800675a:	b510      	push	{r4, lr}
 800675c:	4604      	mov	r4, r0
 800675e:	e9c0 3300 	strd	r3, r3, [r0]
 8006762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006766:	6083      	str	r3, [r0, #8]
 8006768:	8181      	strh	r1, [r0, #12]
 800676a:	6643      	str	r3, [r0, #100]	; 0x64
 800676c:	81c2      	strh	r2, [r0, #14]
 800676e:	6183      	str	r3, [r0, #24]
 8006770:	4619      	mov	r1, r3
 8006772:	2208      	movs	r2, #8
 8006774:	305c      	adds	r0, #92	; 0x5c
 8006776:	f000 f91a 	bl	80069ae <memset>
 800677a:	4b05      	ldr	r3, [pc, #20]	; (8006790 <std+0x38>)
 800677c:	6224      	str	r4, [r4, #32]
 800677e:	6263      	str	r3, [r4, #36]	; 0x24
 8006780:	4b04      	ldr	r3, [pc, #16]	; (8006794 <std+0x3c>)
 8006782:	62a3      	str	r3, [r4, #40]	; 0x28
 8006784:	4b04      	ldr	r3, [pc, #16]	; (8006798 <std+0x40>)
 8006786:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006788:	4b04      	ldr	r3, [pc, #16]	; (800679c <std+0x44>)
 800678a:	6323      	str	r3, [r4, #48]	; 0x30
 800678c:	bd10      	pop	{r4, pc}
 800678e:	bf00      	nop
 8006790:	08007469 	.word	0x08007469
 8006794:	0800748b 	.word	0x0800748b
 8006798:	080074c3 	.word	0x080074c3
 800679c:	080074e7 	.word	0x080074e7

080067a0 <_cleanup_r>:
 80067a0:	4901      	ldr	r1, [pc, #4]	; (80067a8 <_cleanup_r+0x8>)
 80067a2:	f000 b8af 	b.w	8006904 <_fwalk_reent>
 80067a6:	bf00      	nop
 80067a8:	08008339 	.word	0x08008339

080067ac <__sfmoreglue>:
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	2568      	movs	r5, #104	; 0x68
 80067b0:	1e4a      	subs	r2, r1, #1
 80067b2:	4355      	muls	r5, r2
 80067b4:	460e      	mov	r6, r1
 80067b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067ba:	f000 f901 	bl	80069c0 <_malloc_r>
 80067be:	4604      	mov	r4, r0
 80067c0:	b140      	cbz	r0, 80067d4 <__sfmoreglue+0x28>
 80067c2:	2100      	movs	r1, #0
 80067c4:	e9c0 1600 	strd	r1, r6, [r0]
 80067c8:	300c      	adds	r0, #12
 80067ca:	60a0      	str	r0, [r4, #8]
 80067cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067d0:	f000 f8ed 	bl	80069ae <memset>
 80067d4:	4620      	mov	r0, r4
 80067d6:	bd70      	pop	{r4, r5, r6, pc}

080067d8 <__sfp_lock_acquire>:
 80067d8:	4801      	ldr	r0, [pc, #4]	; (80067e0 <__sfp_lock_acquire+0x8>)
 80067da:	f000 b8d8 	b.w	800698e <__retarget_lock_acquire_recursive>
 80067de:	bf00      	nop
 80067e0:	20001d1c 	.word	0x20001d1c

080067e4 <__sfp_lock_release>:
 80067e4:	4801      	ldr	r0, [pc, #4]	; (80067ec <__sfp_lock_release+0x8>)
 80067e6:	f000 b8d3 	b.w	8006990 <__retarget_lock_release_recursive>
 80067ea:	bf00      	nop
 80067ec:	20001d1c 	.word	0x20001d1c

080067f0 <__sinit_lock_acquire>:
 80067f0:	4801      	ldr	r0, [pc, #4]	; (80067f8 <__sinit_lock_acquire+0x8>)
 80067f2:	f000 b8cc 	b.w	800698e <__retarget_lock_acquire_recursive>
 80067f6:	bf00      	nop
 80067f8:	20001d17 	.word	0x20001d17

080067fc <__sinit_lock_release>:
 80067fc:	4801      	ldr	r0, [pc, #4]	; (8006804 <__sinit_lock_release+0x8>)
 80067fe:	f000 b8c7 	b.w	8006990 <__retarget_lock_release_recursive>
 8006802:	bf00      	nop
 8006804:	20001d17 	.word	0x20001d17

08006808 <__sinit>:
 8006808:	b510      	push	{r4, lr}
 800680a:	4604      	mov	r4, r0
 800680c:	f7ff fff0 	bl	80067f0 <__sinit_lock_acquire>
 8006810:	69a3      	ldr	r3, [r4, #24]
 8006812:	b11b      	cbz	r3, 800681c <__sinit+0x14>
 8006814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006818:	f7ff bff0 	b.w	80067fc <__sinit_lock_release>
 800681c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006820:	6523      	str	r3, [r4, #80]	; 0x50
 8006822:	4b13      	ldr	r3, [pc, #76]	; (8006870 <__sinit+0x68>)
 8006824:	4a13      	ldr	r2, [pc, #76]	; (8006874 <__sinit+0x6c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	62a2      	str	r2, [r4, #40]	; 0x28
 800682a:	42a3      	cmp	r3, r4
 800682c:	bf08      	it	eq
 800682e:	2301      	moveq	r3, #1
 8006830:	4620      	mov	r0, r4
 8006832:	bf08      	it	eq
 8006834:	61a3      	streq	r3, [r4, #24]
 8006836:	f000 f81f 	bl	8006878 <__sfp>
 800683a:	6060      	str	r0, [r4, #4]
 800683c:	4620      	mov	r0, r4
 800683e:	f000 f81b 	bl	8006878 <__sfp>
 8006842:	60a0      	str	r0, [r4, #8]
 8006844:	4620      	mov	r0, r4
 8006846:	f000 f817 	bl	8006878 <__sfp>
 800684a:	2200      	movs	r2, #0
 800684c:	2104      	movs	r1, #4
 800684e:	60e0      	str	r0, [r4, #12]
 8006850:	6860      	ldr	r0, [r4, #4]
 8006852:	f7ff ff81 	bl	8006758 <std>
 8006856:	2201      	movs	r2, #1
 8006858:	2109      	movs	r1, #9
 800685a:	68a0      	ldr	r0, [r4, #8]
 800685c:	f7ff ff7c 	bl	8006758 <std>
 8006860:	2202      	movs	r2, #2
 8006862:	2112      	movs	r1, #18
 8006864:	68e0      	ldr	r0, [r4, #12]
 8006866:	f7ff ff77 	bl	8006758 <std>
 800686a:	2301      	movs	r3, #1
 800686c:	61a3      	str	r3, [r4, #24]
 800686e:	e7d1      	b.n	8006814 <__sinit+0xc>
 8006870:	080096b0 	.word	0x080096b0
 8006874:	080067a1 	.word	0x080067a1

08006878 <__sfp>:
 8006878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687a:	4607      	mov	r7, r0
 800687c:	f7ff ffac 	bl	80067d8 <__sfp_lock_acquire>
 8006880:	4b1e      	ldr	r3, [pc, #120]	; (80068fc <__sfp+0x84>)
 8006882:	681e      	ldr	r6, [r3, #0]
 8006884:	69b3      	ldr	r3, [r6, #24]
 8006886:	b913      	cbnz	r3, 800688e <__sfp+0x16>
 8006888:	4630      	mov	r0, r6
 800688a:	f7ff ffbd 	bl	8006808 <__sinit>
 800688e:	3648      	adds	r6, #72	; 0x48
 8006890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006894:	3b01      	subs	r3, #1
 8006896:	d503      	bpl.n	80068a0 <__sfp+0x28>
 8006898:	6833      	ldr	r3, [r6, #0]
 800689a:	b30b      	cbz	r3, 80068e0 <__sfp+0x68>
 800689c:	6836      	ldr	r6, [r6, #0]
 800689e:	e7f7      	b.n	8006890 <__sfp+0x18>
 80068a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80068a4:	b9d5      	cbnz	r5, 80068dc <__sfp+0x64>
 80068a6:	4b16      	ldr	r3, [pc, #88]	; (8006900 <__sfp+0x88>)
 80068a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068ac:	60e3      	str	r3, [r4, #12]
 80068ae:	6665      	str	r5, [r4, #100]	; 0x64
 80068b0:	f000 f86c 	bl	800698c <__retarget_lock_init_recursive>
 80068b4:	f7ff ff96 	bl	80067e4 <__sfp_lock_release>
 80068b8:	2208      	movs	r2, #8
 80068ba:	4629      	mov	r1, r5
 80068bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80068c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80068c4:	6025      	str	r5, [r4, #0]
 80068c6:	61a5      	str	r5, [r4, #24]
 80068c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068cc:	f000 f86f 	bl	80069ae <memset>
 80068d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80068d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068d8:	4620      	mov	r0, r4
 80068da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068dc:	3468      	adds	r4, #104	; 0x68
 80068de:	e7d9      	b.n	8006894 <__sfp+0x1c>
 80068e0:	2104      	movs	r1, #4
 80068e2:	4638      	mov	r0, r7
 80068e4:	f7ff ff62 	bl	80067ac <__sfmoreglue>
 80068e8:	4604      	mov	r4, r0
 80068ea:	6030      	str	r0, [r6, #0]
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d1d5      	bne.n	800689c <__sfp+0x24>
 80068f0:	f7ff ff78 	bl	80067e4 <__sfp_lock_release>
 80068f4:	230c      	movs	r3, #12
 80068f6:	603b      	str	r3, [r7, #0]
 80068f8:	e7ee      	b.n	80068d8 <__sfp+0x60>
 80068fa:	bf00      	nop
 80068fc:	080096b0 	.word	0x080096b0
 8006900:	ffff0001 	.word	0xffff0001

08006904 <_fwalk_reent>:
 8006904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006908:	4606      	mov	r6, r0
 800690a:	4688      	mov	r8, r1
 800690c:	2700      	movs	r7, #0
 800690e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006912:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006916:	f1b9 0901 	subs.w	r9, r9, #1
 800691a:	d505      	bpl.n	8006928 <_fwalk_reent+0x24>
 800691c:	6824      	ldr	r4, [r4, #0]
 800691e:	2c00      	cmp	r4, #0
 8006920:	d1f7      	bne.n	8006912 <_fwalk_reent+0xe>
 8006922:	4638      	mov	r0, r7
 8006924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006928:	89ab      	ldrh	r3, [r5, #12]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d907      	bls.n	800693e <_fwalk_reent+0x3a>
 800692e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006932:	3301      	adds	r3, #1
 8006934:	d003      	beq.n	800693e <_fwalk_reent+0x3a>
 8006936:	4629      	mov	r1, r5
 8006938:	4630      	mov	r0, r6
 800693a:	47c0      	blx	r8
 800693c:	4307      	orrs	r7, r0
 800693e:	3568      	adds	r5, #104	; 0x68
 8006940:	e7e9      	b.n	8006916 <_fwalk_reent+0x12>
	...

08006944 <__libc_init_array>:
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	2600      	movs	r6, #0
 8006948:	4d0c      	ldr	r5, [pc, #48]	; (800697c <__libc_init_array+0x38>)
 800694a:	4c0d      	ldr	r4, [pc, #52]	; (8006980 <__libc_init_array+0x3c>)
 800694c:	1b64      	subs	r4, r4, r5
 800694e:	10a4      	asrs	r4, r4, #2
 8006950:	42a6      	cmp	r6, r4
 8006952:	d109      	bne.n	8006968 <__libc_init_array+0x24>
 8006954:	f002 fe30 	bl	80095b8 <_init>
 8006958:	2600      	movs	r6, #0
 800695a:	4d0a      	ldr	r5, [pc, #40]	; (8006984 <__libc_init_array+0x40>)
 800695c:	4c0a      	ldr	r4, [pc, #40]	; (8006988 <__libc_init_array+0x44>)
 800695e:	1b64      	subs	r4, r4, r5
 8006960:	10a4      	asrs	r4, r4, #2
 8006962:	42a6      	cmp	r6, r4
 8006964:	d105      	bne.n	8006972 <__libc_init_array+0x2e>
 8006966:	bd70      	pop	{r4, r5, r6, pc}
 8006968:	f855 3b04 	ldr.w	r3, [r5], #4
 800696c:	4798      	blx	r3
 800696e:	3601      	adds	r6, #1
 8006970:	e7ee      	b.n	8006950 <__libc_init_array+0xc>
 8006972:	f855 3b04 	ldr.w	r3, [r5], #4
 8006976:	4798      	blx	r3
 8006978:	3601      	adds	r6, #1
 800697a:	e7f2      	b.n	8006962 <__libc_init_array+0x1e>
 800697c:	08009a34 	.word	0x08009a34
 8006980:	08009a34 	.word	0x08009a34
 8006984:	08009a34 	.word	0x08009a34
 8006988:	08009a38 	.word	0x08009a38

0800698c <__retarget_lock_init_recursive>:
 800698c:	4770      	bx	lr

0800698e <__retarget_lock_acquire_recursive>:
 800698e:	4770      	bx	lr

08006990 <__retarget_lock_release_recursive>:
 8006990:	4770      	bx	lr

08006992 <memcpy>:
 8006992:	440a      	add	r2, r1
 8006994:	4291      	cmp	r1, r2
 8006996:	f100 33ff 	add.w	r3, r0, #4294967295
 800699a:	d100      	bne.n	800699e <memcpy+0xc>
 800699c:	4770      	bx	lr
 800699e:	b510      	push	{r4, lr}
 80069a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069a4:	4291      	cmp	r1, r2
 80069a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069aa:	d1f9      	bne.n	80069a0 <memcpy+0xe>
 80069ac:	bd10      	pop	{r4, pc}

080069ae <memset>:
 80069ae:	4603      	mov	r3, r0
 80069b0:	4402      	add	r2, r0
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d100      	bne.n	80069b8 <memset+0xa>
 80069b6:	4770      	bx	lr
 80069b8:	f803 1b01 	strb.w	r1, [r3], #1
 80069bc:	e7f9      	b.n	80069b2 <memset+0x4>
	...

080069c0 <_malloc_r>:
 80069c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c2:	1ccd      	adds	r5, r1, #3
 80069c4:	f025 0503 	bic.w	r5, r5, #3
 80069c8:	3508      	adds	r5, #8
 80069ca:	2d0c      	cmp	r5, #12
 80069cc:	bf38      	it	cc
 80069ce:	250c      	movcc	r5, #12
 80069d0:	2d00      	cmp	r5, #0
 80069d2:	4606      	mov	r6, r0
 80069d4:	db01      	blt.n	80069da <_malloc_r+0x1a>
 80069d6:	42a9      	cmp	r1, r5
 80069d8:	d903      	bls.n	80069e2 <_malloc_r+0x22>
 80069da:	230c      	movs	r3, #12
 80069dc:	6033      	str	r3, [r6, #0]
 80069de:	2000      	movs	r0, #0
 80069e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069e2:	f001 fd11 	bl	8008408 <__malloc_lock>
 80069e6:	4921      	ldr	r1, [pc, #132]	; (8006a6c <_malloc_r+0xac>)
 80069e8:	680a      	ldr	r2, [r1, #0]
 80069ea:	4614      	mov	r4, r2
 80069ec:	b99c      	cbnz	r4, 8006a16 <_malloc_r+0x56>
 80069ee:	4f20      	ldr	r7, [pc, #128]	; (8006a70 <_malloc_r+0xb0>)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	b923      	cbnz	r3, 80069fe <_malloc_r+0x3e>
 80069f4:	4621      	mov	r1, r4
 80069f6:	4630      	mov	r0, r6
 80069f8:	f000 fd06 	bl	8007408 <_sbrk_r>
 80069fc:	6038      	str	r0, [r7, #0]
 80069fe:	4629      	mov	r1, r5
 8006a00:	4630      	mov	r0, r6
 8006a02:	f000 fd01 	bl	8007408 <_sbrk_r>
 8006a06:	1c43      	adds	r3, r0, #1
 8006a08:	d123      	bne.n	8006a52 <_malloc_r+0x92>
 8006a0a:	230c      	movs	r3, #12
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	6033      	str	r3, [r6, #0]
 8006a10:	f001 fd00 	bl	8008414 <__malloc_unlock>
 8006a14:	e7e3      	b.n	80069de <_malloc_r+0x1e>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	1b5b      	subs	r3, r3, r5
 8006a1a:	d417      	bmi.n	8006a4c <_malloc_r+0x8c>
 8006a1c:	2b0b      	cmp	r3, #11
 8006a1e:	d903      	bls.n	8006a28 <_malloc_r+0x68>
 8006a20:	6023      	str	r3, [r4, #0]
 8006a22:	441c      	add	r4, r3
 8006a24:	6025      	str	r5, [r4, #0]
 8006a26:	e004      	b.n	8006a32 <_malloc_r+0x72>
 8006a28:	6863      	ldr	r3, [r4, #4]
 8006a2a:	42a2      	cmp	r2, r4
 8006a2c:	bf0c      	ite	eq
 8006a2e:	600b      	streq	r3, [r1, #0]
 8006a30:	6053      	strne	r3, [r2, #4]
 8006a32:	4630      	mov	r0, r6
 8006a34:	f001 fcee 	bl	8008414 <__malloc_unlock>
 8006a38:	f104 000b 	add.w	r0, r4, #11
 8006a3c:	1d23      	adds	r3, r4, #4
 8006a3e:	f020 0007 	bic.w	r0, r0, #7
 8006a42:	1ac2      	subs	r2, r0, r3
 8006a44:	d0cc      	beq.n	80069e0 <_malloc_r+0x20>
 8006a46:	1a1b      	subs	r3, r3, r0
 8006a48:	50a3      	str	r3, [r4, r2]
 8006a4a:	e7c9      	b.n	80069e0 <_malloc_r+0x20>
 8006a4c:	4622      	mov	r2, r4
 8006a4e:	6864      	ldr	r4, [r4, #4]
 8006a50:	e7cc      	b.n	80069ec <_malloc_r+0x2c>
 8006a52:	1cc4      	adds	r4, r0, #3
 8006a54:	f024 0403 	bic.w	r4, r4, #3
 8006a58:	42a0      	cmp	r0, r4
 8006a5a:	d0e3      	beq.n	8006a24 <_malloc_r+0x64>
 8006a5c:	1a21      	subs	r1, r4, r0
 8006a5e:	4630      	mov	r0, r6
 8006a60:	f000 fcd2 	bl	8007408 <_sbrk_r>
 8006a64:	3001      	adds	r0, #1
 8006a66:	d1dd      	bne.n	8006a24 <_malloc_r+0x64>
 8006a68:	e7cf      	b.n	8006a0a <_malloc_r+0x4a>
 8006a6a:	bf00      	nop
 8006a6c:	20001bd0 	.word	0x20001bd0
 8006a70:	20001bd4 	.word	0x20001bd4

08006a74 <__cvt>:
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a7a:	461f      	mov	r7, r3
 8006a7c:	bfbb      	ittet	lt
 8006a7e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006a82:	461f      	movlt	r7, r3
 8006a84:	2300      	movge	r3, #0
 8006a86:	232d      	movlt	r3, #45	; 0x2d
 8006a88:	b088      	sub	sp, #32
 8006a8a:	4614      	mov	r4, r2
 8006a8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a8e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006a90:	7013      	strb	r3, [r2, #0]
 8006a92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a94:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006a98:	f023 0820 	bic.w	r8, r3, #32
 8006a9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006aa0:	d005      	beq.n	8006aae <__cvt+0x3a>
 8006aa2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006aa6:	d100      	bne.n	8006aaa <__cvt+0x36>
 8006aa8:	3501      	adds	r5, #1
 8006aaa:	2302      	movs	r3, #2
 8006aac:	e000      	b.n	8006ab0 <__cvt+0x3c>
 8006aae:	2303      	movs	r3, #3
 8006ab0:	aa07      	add	r2, sp, #28
 8006ab2:	9204      	str	r2, [sp, #16]
 8006ab4:	aa06      	add	r2, sp, #24
 8006ab6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006aba:	e9cd 3500 	strd	r3, r5, [sp]
 8006abe:	4622      	mov	r2, r4
 8006ac0:	463b      	mov	r3, r7
 8006ac2:	f000 fdc5 	bl	8007650 <_dtoa_r>
 8006ac6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006aca:	4606      	mov	r6, r0
 8006acc:	d102      	bne.n	8006ad4 <__cvt+0x60>
 8006ace:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ad0:	07db      	lsls	r3, r3, #31
 8006ad2:	d522      	bpl.n	8006b1a <__cvt+0xa6>
 8006ad4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ad8:	eb06 0905 	add.w	r9, r6, r5
 8006adc:	d110      	bne.n	8006b00 <__cvt+0x8c>
 8006ade:	7833      	ldrb	r3, [r6, #0]
 8006ae0:	2b30      	cmp	r3, #48	; 0x30
 8006ae2:	d10a      	bne.n	8006afa <__cvt+0x86>
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	4620      	mov	r0, r4
 8006aea:	4639      	mov	r1, r7
 8006aec:	f7f9 ff5c 	bl	80009a8 <__aeabi_dcmpeq>
 8006af0:	b918      	cbnz	r0, 8006afa <__cvt+0x86>
 8006af2:	f1c5 0501 	rsb	r5, r5, #1
 8006af6:	f8ca 5000 	str.w	r5, [sl]
 8006afa:	f8da 3000 	ldr.w	r3, [sl]
 8006afe:	4499      	add	r9, r3
 8006b00:	2200      	movs	r2, #0
 8006b02:	2300      	movs	r3, #0
 8006b04:	4620      	mov	r0, r4
 8006b06:	4639      	mov	r1, r7
 8006b08:	f7f9 ff4e 	bl	80009a8 <__aeabi_dcmpeq>
 8006b0c:	b108      	cbz	r0, 8006b12 <__cvt+0x9e>
 8006b0e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006b12:	2230      	movs	r2, #48	; 0x30
 8006b14:	9b07      	ldr	r3, [sp, #28]
 8006b16:	454b      	cmp	r3, r9
 8006b18:	d307      	bcc.n	8006b2a <__cvt+0xb6>
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	9b07      	ldr	r3, [sp, #28]
 8006b1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b20:	1b9b      	subs	r3, r3, r6
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	b008      	add	sp, #32
 8006b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b2a:	1c59      	adds	r1, r3, #1
 8006b2c:	9107      	str	r1, [sp, #28]
 8006b2e:	701a      	strb	r2, [r3, #0]
 8006b30:	e7f0      	b.n	8006b14 <__cvt+0xa0>

08006b32 <__exponent>:
 8006b32:	4603      	mov	r3, r0
 8006b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b36:	2900      	cmp	r1, #0
 8006b38:	f803 2b02 	strb.w	r2, [r3], #2
 8006b3c:	bfb6      	itet	lt
 8006b3e:	222d      	movlt	r2, #45	; 0x2d
 8006b40:	222b      	movge	r2, #43	; 0x2b
 8006b42:	4249      	neglt	r1, r1
 8006b44:	2909      	cmp	r1, #9
 8006b46:	7042      	strb	r2, [r0, #1]
 8006b48:	dd2b      	ble.n	8006ba2 <__exponent+0x70>
 8006b4a:	f10d 0407 	add.w	r4, sp, #7
 8006b4e:	46a4      	mov	ip, r4
 8006b50:	270a      	movs	r7, #10
 8006b52:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b56:	460a      	mov	r2, r1
 8006b58:	46a6      	mov	lr, r4
 8006b5a:	fb07 1516 	mls	r5, r7, r6, r1
 8006b5e:	2a63      	cmp	r2, #99	; 0x63
 8006b60:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006b64:	4631      	mov	r1, r6
 8006b66:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b6e:	dcf0      	bgt.n	8006b52 <__exponent+0x20>
 8006b70:	3130      	adds	r1, #48	; 0x30
 8006b72:	f1ae 0502 	sub.w	r5, lr, #2
 8006b76:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	1c44      	adds	r4, r0, #1
 8006b7e:	4561      	cmp	r1, ip
 8006b80:	d30a      	bcc.n	8006b98 <__exponent+0x66>
 8006b82:	f10d 0209 	add.w	r2, sp, #9
 8006b86:	eba2 020e 	sub.w	r2, r2, lr
 8006b8a:	4565      	cmp	r5, ip
 8006b8c:	bf88      	it	hi
 8006b8e:	2200      	movhi	r2, #0
 8006b90:	4413      	add	r3, r2
 8006b92:	1a18      	subs	r0, r3, r0
 8006b94:	b003      	add	sp, #12
 8006b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b9c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ba0:	e7ed      	b.n	8006b7e <__exponent+0x4c>
 8006ba2:	2330      	movs	r3, #48	; 0x30
 8006ba4:	3130      	adds	r1, #48	; 0x30
 8006ba6:	7083      	strb	r3, [r0, #2]
 8006ba8:	70c1      	strb	r1, [r0, #3]
 8006baa:	1d03      	adds	r3, r0, #4
 8006bac:	e7f1      	b.n	8006b92 <__exponent+0x60>
	...

08006bb0 <_printf_float>:
 8006bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb4:	b091      	sub	sp, #68	; 0x44
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006bbc:	4616      	mov	r6, r2
 8006bbe:	461f      	mov	r7, r3
 8006bc0:	4605      	mov	r5, r0
 8006bc2:	f001 fbf5 	bl	80083b0 <_localeconv_r>
 8006bc6:	6803      	ldr	r3, [r0, #0]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	9309      	str	r3, [sp, #36]	; 0x24
 8006bcc:	f7f9 fac0 	bl	8000150 <strlen>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	930e      	str	r3, [sp, #56]	; 0x38
 8006bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8006bd8:	900a      	str	r0, [sp, #40]	; 0x28
 8006bda:	3307      	adds	r3, #7
 8006bdc:	f023 0307 	bic.w	r3, r3, #7
 8006be0:	f103 0208 	add.w	r2, r3, #8
 8006be4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006be8:	f8d4 b000 	ldr.w	fp, [r4]
 8006bec:	f8c8 2000 	str.w	r2, [r8]
 8006bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006bf8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006bfc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c02:	f04f 32ff 	mov.w	r2, #4294967295
 8006c06:	4640      	mov	r0, r8
 8006c08:	4b9c      	ldr	r3, [pc, #624]	; (8006e7c <_printf_float+0x2cc>)
 8006c0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c0c:	f7f9 fefe 	bl	8000a0c <__aeabi_dcmpun>
 8006c10:	bb70      	cbnz	r0, 8006c70 <_printf_float+0xc0>
 8006c12:	f04f 32ff 	mov.w	r2, #4294967295
 8006c16:	4640      	mov	r0, r8
 8006c18:	4b98      	ldr	r3, [pc, #608]	; (8006e7c <_printf_float+0x2cc>)
 8006c1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c1c:	f7f9 fed8 	bl	80009d0 <__aeabi_dcmple>
 8006c20:	bb30      	cbnz	r0, 8006c70 <_printf_float+0xc0>
 8006c22:	2200      	movs	r2, #0
 8006c24:	2300      	movs	r3, #0
 8006c26:	4640      	mov	r0, r8
 8006c28:	4651      	mov	r1, sl
 8006c2a:	f7f9 fec7 	bl	80009bc <__aeabi_dcmplt>
 8006c2e:	b110      	cbz	r0, 8006c36 <_printf_float+0x86>
 8006c30:	232d      	movs	r3, #45	; 0x2d
 8006c32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c36:	4b92      	ldr	r3, [pc, #584]	; (8006e80 <_printf_float+0x2d0>)
 8006c38:	4892      	ldr	r0, [pc, #584]	; (8006e84 <_printf_float+0x2d4>)
 8006c3a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006c3e:	bf94      	ite	ls
 8006c40:	4698      	movls	r8, r3
 8006c42:	4680      	movhi	r8, r0
 8006c44:	2303      	movs	r3, #3
 8006c46:	f04f 0a00 	mov.w	sl, #0
 8006c4a:	6123      	str	r3, [r4, #16]
 8006c4c:	f02b 0304 	bic.w	r3, fp, #4
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	4633      	mov	r3, r6
 8006c54:	4621      	mov	r1, r4
 8006c56:	4628      	mov	r0, r5
 8006c58:	9700      	str	r7, [sp, #0]
 8006c5a:	aa0f      	add	r2, sp, #60	; 0x3c
 8006c5c:	f000 f9d4 	bl	8007008 <_printf_common>
 8006c60:	3001      	adds	r0, #1
 8006c62:	f040 8090 	bne.w	8006d86 <_printf_float+0x1d6>
 8006c66:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6a:	b011      	add	sp, #68	; 0x44
 8006c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c70:	4642      	mov	r2, r8
 8006c72:	4653      	mov	r3, sl
 8006c74:	4640      	mov	r0, r8
 8006c76:	4651      	mov	r1, sl
 8006c78:	f7f9 fec8 	bl	8000a0c <__aeabi_dcmpun>
 8006c7c:	b148      	cbz	r0, 8006c92 <_printf_float+0xe2>
 8006c7e:	f1ba 0f00 	cmp.w	sl, #0
 8006c82:	bfb8      	it	lt
 8006c84:	232d      	movlt	r3, #45	; 0x2d
 8006c86:	4880      	ldr	r0, [pc, #512]	; (8006e88 <_printf_float+0x2d8>)
 8006c88:	bfb8      	it	lt
 8006c8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c8e:	4b7f      	ldr	r3, [pc, #508]	; (8006e8c <_printf_float+0x2dc>)
 8006c90:	e7d3      	b.n	8006c3a <_printf_float+0x8a>
 8006c92:	6863      	ldr	r3, [r4, #4]
 8006c94:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	d142      	bne.n	8006d22 <_printf_float+0x172>
 8006c9c:	2306      	movs	r3, #6
 8006c9e:	6063      	str	r3, [r4, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	9206      	str	r2, [sp, #24]
 8006ca4:	aa0e      	add	r2, sp, #56	; 0x38
 8006ca6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006caa:	aa0d      	add	r2, sp, #52	; 0x34
 8006cac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006cb0:	9203      	str	r2, [sp, #12]
 8006cb2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006cb6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006cba:	6023      	str	r3, [r4, #0]
 8006cbc:	6863      	ldr	r3, [r4, #4]
 8006cbe:	4642      	mov	r2, r8
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	4653      	mov	r3, sl
 8006cc6:	910b      	str	r1, [sp, #44]	; 0x2c
 8006cc8:	f7ff fed4 	bl	8006a74 <__cvt>
 8006ccc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cce:	4680      	mov	r8, r0
 8006cd0:	2947      	cmp	r1, #71	; 0x47
 8006cd2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006cd4:	d108      	bne.n	8006ce8 <_printf_float+0x138>
 8006cd6:	1cc8      	adds	r0, r1, #3
 8006cd8:	db02      	blt.n	8006ce0 <_printf_float+0x130>
 8006cda:	6863      	ldr	r3, [r4, #4]
 8006cdc:	4299      	cmp	r1, r3
 8006cde:	dd40      	ble.n	8006d62 <_printf_float+0x1b2>
 8006ce0:	f1a9 0902 	sub.w	r9, r9, #2
 8006ce4:	fa5f f989 	uxtb.w	r9, r9
 8006ce8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006cec:	d81f      	bhi.n	8006d2e <_printf_float+0x17e>
 8006cee:	464a      	mov	r2, r9
 8006cf0:	3901      	subs	r1, #1
 8006cf2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cf6:	910d      	str	r1, [sp, #52]	; 0x34
 8006cf8:	f7ff ff1b 	bl	8006b32 <__exponent>
 8006cfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cfe:	4682      	mov	sl, r0
 8006d00:	1813      	adds	r3, r2, r0
 8006d02:	2a01      	cmp	r2, #1
 8006d04:	6123      	str	r3, [r4, #16]
 8006d06:	dc02      	bgt.n	8006d0e <_printf_float+0x15e>
 8006d08:	6822      	ldr	r2, [r4, #0]
 8006d0a:	07d2      	lsls	r2, r2, #31
 8006d0c:	d501      	bpl.n	8006d12 <_printf_float+0x162>
 8006d0e:	3301      	adds	r3, #1
 8006d10:	6123      	str	r3, [r4, #16]
 8006d12:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d09b      	beq.n	8006c52 <_printf_float+0xa2>
 8006d1a:	232d      	movs	r3, #45	; 0x2d
 8006d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d20:	e797      	b.n	8006c52 <_printf_float+0xa2>
 8006d22:	2947      	cmp	r1, #71	; 0x47
 8006d24:	d1bc      	bne.n	8006ca0 <_printf_float+0xf0>
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1ba      	bne.n	8006ca0 <_printf_float+0xf0>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e7b7      	b.n	8006c9e <_printf_float+0xee>
 8006d2e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006d32:	d118      	bne.n	8006d66 <_printf_float+0x1b6>
 8006d34:	2900      	cmp	r1, #0
 8006d36:	6863      	ldr	r3, [r4, #4]
 8006d38:	dd0b      	ble.n	8006d52 <_printf_float+0x1a2>
 8006d3a:	6121      	str	r1, [r4, #16]
 8006d3c:	b913      	cbnz	r3, 8006d44 <_printf_float+0x194>
 8006d3e:	6822      	ldr	r2, [r4, #0]
 8006d40:	07d0      	lsls	r0, r2, #31
 8006d42:	d502      	bpl.n	8006d4a <_printf_float+0x19a>
 8006d44:	3301      	adds	r3, #1
 8006d46:	440b      	add	r3, r1
 8006d48:	6123      	str	r3, [r4, #16]
 8006d4a:	f04f 0a00 	mov.w	sl, #0
 8006d4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d50:	e7df      	b.n	8006d12 <_printf_float+0x162>
 8006d52:	b913      	cbnz	r3, 8006d5a <_printf_float+0x1aa>
 8006d54:	6822      	ldr	r2, [r4, #0]
 8006d56:	07d2      	lsls	r2, r2, #31
 8006d58:	d501      	bpl.n	8006d5e <_printf_float+0x1ae>
 8006d5a:	3302      	adds	r3, #2
 8006d5c:	e7f4      	b.n	8006d48 <_printf_float+0x198>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e7f2      	b.n	8006d48 <_printf_float+0x198>
 8006d62:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d68:	4299      	cmp	r1, r3
 8006d6a:	db05      	blt.n	8006d78 <_printf_float+0x1c8>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	6121      	str	r1, [r4, #16]
 8006d70:	07d8      	lsls	r0, r3, #31
 8006d72:	d5ea      	bpl.n	8006d4a <_printf_float+0x19a>
 8006d74:	1c4b      	adds	r3, r1, #1
 8006d76:	e7e7      	b.n	8006d48 <_printf_float+0x198>
 8006d78:	2900      	cmp	r1, #0
 8006d7a:	bfcc      	ite	gt
 8006d7c:	2201      	movgt	r2, #1
 8006d7e:	f1c1 0202 	rsble	r2, r1, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	e7e0      	b.n	8006d48 <_printf_float+0x198>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	055a      	lsls	r2, r3, #21
 8006d8a:	d407      	bmi.n	8006d9c <_printf_float+0x1ec>
 8006d8c:	6923      	ldr	r3, [r4, #16]
 8006d8e:	4642      	mov	r2, r8
 8006d90:	4631      	mov	r1, r6
 8006d92:	4628      	mov	r0, r5
 8006d94:	47b8      	blx	r7
 8006d96:	3001      	adds	r0, #1
 8006d98:	d12b      	bne.n	8006df2 <_printf_float+0x242>
 8006d9a:	e764      	b.n	8006c66 <_printf_float+0xb6>
 8006d9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006da0:	f240 80dd 	bls.w	8006f5e <_printf_float+0x3ae>
 8006da4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006da8:	2200      	movs	r2, #0
 8006daa:	2300      	movs	r3, #0
 8006dac:	f7f9 fdfc 	bl	80009a8 <__aeabi_dcmpeq>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d033      	beq.n	8006e1c <_printf_float+0x26c>
 8006db4:	2301      	movs	r3, #1
 8006db6:	4631      	mov	r1, r6
 8006db8:	4628      	mov	r0, r5
 8006dba:	4a35      	ldr	r2, [pc, #212]	; (8006e90 <_printf_float+0x2e0>)
 8006dbc:	47b8      	blx	r7
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	f43f af51 	beq.w	8006c66 <_printf_float+0xb6>
 8006dc4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	db02      	blt.n	8006dd2 <_printf_float+0x222>
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	07d8      	lsls	r0, r3, #31
 8006dd0:	d50f      	bpl.n	8006df2 <_printf_float+0x242>
 8006dd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dd6:	4631      	mov	r1, r6
 8006dd8:	4628      	mov	r0, r5
 8006dda:	47b8      	blx	r7
 8006ddc:	3001      	adds	r0, #1
 8006dde:	f43f af42 	beq.w	8006c66 <_printf_float+0xb6>
 8006de2:	f04f 0800 	mov.w	r8, #0
 8006de6:	f104 091a 	add.w	r9, r4, #26
 8006dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dec:	3b01      	subs	r3, #1
 8006dee:	4543      	cmp	r3, r8
 8006df0:	dc09      	bgt.n	8006e06 <_printf_float+0x256>
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	079b      	lsls	r3, r3, #30
 8006df6:	f100 8102 	bmi.w	8006ffe <_printf_float+0x44e>
 8006dfa:	68e0      	ldr	r0, [r4, #12]
 8006dfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dfe:	4298      	cmp	r0, r3
 8006e00:	bfb8      	it	lt
 8006e02:	4618      	movlt	r0, r3
 8006e04:	e731      	b.n	8006c6a <_printf_float+0xba>
 8006e06:	2301      	movs	r3, #1
 8006e08:	464a      	mov	r2, r9
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	47b8      	blx	r7
 8006e10:	3001      	adds	r0, #1
 8006e12:	f43f af28 	beq.w	8006c66 <_printf_float+0xb6>
 8006e16:	f108 0801 	add.w	r8, r8, #1
 8006e1a:	e7e6      	b.n	8006dea <_printf_float+0x23a>
 8006e1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	dc38      	bgt.n	8006e94 <_printf_float+0x2e4>
 8006e22:	2301      	movs	r3, #1
 8006e24:	4631      	mov	r1, r6
 8006e26:	4628      	mov	r0, r5
 8006e28:	4a19      	ldr	r2, [pc, #100]	; (8006e90 <_printf_float+0x2e0>)
 8006e2a:	47b8      	blx	r7
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	f43f af1a 	beq.w	8006c66 <_printf_float+0xb6>
 8006e32:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e36:	4313      	orrs	r3, r2
 8006e38:	d102      	bne.n	8006e40 <_printf_float+0x290>
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	07d9      	lsls	r1, r3, #31
 8006e3e:	d5d8      	bpl.n	8006df2 <_printf_float+0x242>
 8006e40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e44:	4631      	mov	r1, r6
 8006e46:	4628      	mov	r0, r5
 8006e48:	47b8      	blx	r7
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	f43f af0b 	beq.w	8006c66 <_printf_float+0xb6>
 8006e50:	f04f 0900 	mov.w	r9, #0
 8006e54:	f104 0a1a 	add.w	sl, r4, #26
 8006e58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e5a:	425b      	negs	r3, r3
 8006e5c:	454b      	cmp	r3, r9
 8006e5e:	dc01      	bgt.n	8006e64 <_printf_float+0x2b4>
 8006e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e62:	e794      	b.n	8006d8e <_printf_float+0x1de>
 8006e64:	2301      	movs	r3, #1
 8006e66:	4652      	mov	r2, sl
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	47b8      	blx	r7
 8006e6e:	3001      	adds	r0, #1
 8006e70:	f43f aef9 	beq.w	8006c66 <_printf_float+0xb6>
 8006e74:	f109 0901 	add.w	r9, r9, #1
 8006e78:	e7ee      	b.n	8006e58 <_printf_float+0x2a8>
 8006e7a:	bf00      	nop
 8006e7c:	7fefffff 	.word	0x7fefffff
 8006e80:	080096b4 	.word	0x080096b4
 8006e84:	080096b8 	.word	0x080096b8
 8006e88:	080096c0 	.word	0x080096c0
 8006e8c:	080096bc 	.word	0x080096bc
 8006e90:	080096c4 	.word	0x080096c4
 8006e94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	bfa8      	it	ge
 8006e9c:	461a      	movge	r2, r3
 8006e9e:	2a00      	cmp	r2, #0
 8006ea0:	4691      	mov	r9, r2
 8006ea2:	dc37      	bgt.n	8006f14 <_printf_float+0x364>
 8006ea4:	f04f 0b00 	mov.w	fp, #0
 8006ea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006eac:	f104 021a 	add.w	r2, r4, #26
 8006eb0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006eb4:	ebaa 0309 	sub.w	r3, sl, r9
 8006eb8:	455b      	cmp	r3, fp
 8006eba:	dc33      	bgt.n	8006f24 <_printf_float+0x374>
 8006ebc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	db3b      	blt.n	8006f3c <_printf_float+0x38c>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	07da      	lsls	r2, r3, #31
 8006ec8:	d438      	bmi.n	8006f3c <_printf_float+0x38c>
 8006eca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ecc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006ece:	eba2 030a 	sub.w	r3, r2, sl
 8006ed2:	eba2 0901 	sub.w	r9, r2, r1
 8006ed6:	4599      	cmp	r9, r3
 8006ed8:	bfa8      	it	ge
 8006eda:	4699      	movge	r9, r3
 8006edc:	f1b9 0f00 	cmp.w	r9, #0
 8006ee0:	dc34      	bgt.n	8006f4c <_printf_float+0x39c>
 8006ee2:	f04f 0800 	mov.w	r8, #0
 8006ee6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006eea:	f104 0a1a 	add.w	sl, r4, #26
 8006eee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006ef2:	1a9b      	subs	r3, r3, r2
 8006ef4:	eba3 0309 	sub.w	r3, r3, r9
 8006ef8:	4543      	cmp	r3, r8
 8006efa:	f77f af7a 	ble.w	8006df2 <_printf_float+0x242>
 8006efe:	2301      	movs	r3, #1
 8006f00:	4652      	mov	r2, sl
 8006f02:	4631      	mov	r1, r6
 8006f04:	4628      	mov	r0, r5
 8006f06:	47b8      	blx	r7
 8006f08:	3001      	adds	r0, #1
 8006f0a:	f43f aeac 	beq.w	8006c66 <_printf_float+0xb6>
 8006f0e:	f108 0801 	add.w	r8, r8, #1
 8006f12:	e7ec      	b.n	8006eee <_printf_float+0x33e>
 8006f14:	4613      	mov	r3, r2
 8006f16:	4631      	mov	r1, r6
 8006f18:	4642      	mov	r2, r8
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	47b8      	blx	r7
 8006f1e:	3001      	adds	r0, #1
 8006f20:	d1c0      	bne.n	8006ea4 <_printf_float+0x2f4>
 8006f22:	e6a0      	b.n	8006c66 <_printf_float+0xb6>
 8006f24:	2301      	movs	r3, #1
 8006f26:	4631      	mov	r1, r6
 8006f28:	4628      	mov	r0, r5
 8006f2a:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	f43f ae99 	beq.w	8006c66 <_printf_float+0xb6>
 8006f34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f36:	f10b 0b01 	add.w	fp, fp, #1
 8006f3a:	e7b9      	b.n	8006eb0 <_printf_float+0x300>
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f42:	4628      	mov	r0, r5
 8006f44:	47b8      	blx	r7
 8006f46:	3001      	adds	r0, #1
 8006f48:	d1bf      	bne.n	8006eca <_printf_float+0x31a>
 8006f4a:	e68c      	b.n	8006c66 <_printf_float+0xb6>
 8006f4c:	464b      	mov	r3, r9
 8006f4e:	4631      	mov	r1, r6
 8006f50:	4628      	mov	r0, r5
 8006f52:	eb08 020a 	add.w	r2, r8, sl
 8006f56:	47b8      	blx	r7
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d1c2      	bne.n	8006ee2 <_printf_float+0x332>
 8006f5c:	e683      	b.n	8006c66 <_printf_float+0xb6>
 8006f5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f60:	2a01      	cmp	r2, #1
 8006f62:	dc01      	bgt.n	8006f68 <_printf_float+0x3b8>
 8006f64:	07db      	lsls	r3, r3, #31
 8006f66:	d537      	bpl.n	8006fd8 <_printf_float+0x428>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	4642      	mov	r2, r8
 8006f6c:	4631      	mov	r1, r6
 8006f6e:	4628      	mov	r0, r5
 8006f70:	47b8      	blx	r7
 8006f72:	3001      	adds	r0, #1
 8006f74:	f43f ae77 	beq.w	8006c66 <_printf_float+0xb6>
 8006f78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f7c:	4631      	mov	r1, r6
 8006f7e:	4628      	mov	r0, r5
 8006f80:	47b8      	blx	r7
 8006f82:	3001      	adds	r0, #1
 8006f84:	f43f ae6f 	beq.w	8006c66 <_printf_float+0xb6>
 8006f88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f7f9 fd0a 	bl	80009a8 <__aeabi_dcmpeq>
 8006f94:	b9d8      	cbnz	r0, 8006fce <_printf_float+0x41e>
 8006f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f98:	f108 0201 	add.w	r2, r8, #1
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	47b8      	blx	r7
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d10e      	bne.n	8006fc6 <_printf_float+0x416>
 8006fa8:	e65d      	b.n	8006c66 <_printf_float+0xb6>
 8006faa:	2301      	movs	r3, #1
 8006fac:	464a      	mov	r2, r9
 8006fae:	4631      	mov	r1, r6
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	47b8      	blx	r7
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	f43f ae56 	beq.w	8006c66 <_printf_float+0xb6>
 8006fba:	f108 0801 	add.w	r8, r8, #1
 8006fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	4543      	cmp	r3, r8
 8006fc4:	dcf1      	bgt.n	8006faa <_printf_float+0x3fa>
 8006fc6:	4653      	mov	r3, sl
 8006fc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fcc:	e6e0      	b.n	8006d90 <_printf_float+0x1e0>
 8006fce:	f04f 0800 	mov.w	r8, #0
 8006fd2:	f104 091a 	add.w	r9, r4, #26
 8006fd6:	e7f2      	b.n	8006fbe <_printf_float+0x40e>
 8006fd8:	2301      	movs	r3, #1
 8006fda:	4642      	mov	r2, r8
 8006fdc:	e7df      	b.n	8006f9e <_printf_float+0x3ee>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	464a      	mov	r2, r9
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	47b8      	blx	r7
 8006fe8:	3001      	adds	r0, #1
 8006fea:	f43f ae3c 	beq.w	8006c66 <_printf_float+0xb6>
 8006fee:	f108 0801 	add.w	r8, r8, #1
 8006ff2:	68e3      	ldr	r3, [r4, #12]
 8006ff4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ff6:	1a5b      	subs	r3, r3, r1
 8006ff8:	4543      	cmp	r3, r8
 8006ffa:	dcf0      	bgt.n	8006fde <_printf_float+0x42e>
 8006ffc:	e6fd      	b.n	8006dfa <_printf_float+0x24a>
 8006ffe:	f04f 0800 	mov.w	r8, #0
 8007002:	f104 0919 	add.w	r9, r4, #25
 8007006:	e7f4      	b.n	8006ff2 <_printf_float+0x442>

08007008 <_printf_common>:
 8007008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800700c:	4616      	mov	r6, r2
 800700e:	4699      	mov	r9, r3
 8007010:	688a      	ldr	r2, [r1, #8]
 8007012:	690b      	ldr	r3, [r1, #16]
 8007014:	4607      	mov	r7, r0
 8007016:	4293      	cmp	r3, r2
 8007018:	bfb8      	it	lt
 800701a:	4613      	movlt	r3, r2
 800701c:	6033      	str	r3, [r6, #0]
 800701e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007022:	460c      	mov	r4, r1
 8007024:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007028:	b10a      	cbz	r2, 800702e <_printf_common+0x26>
 800702a:	3301      	adds	r3, #1
 800702c:	6033      	str	r3, [r6, #0]
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	0699      	lsls	r1, r3, #26
 8007032:	bf42      	ittt	mi
 8007034:	6833      	ldrmi	r3, [r6, #0]
 8007036:	3302      	addmi	r3, #2
 8007038:	6033      	strmi	r3, [r6, #0]
 800703a:	6825      	ldr	r5, [r4, #0]
 800703c:	f015 0506 	ands.w	r5, r5, #6
 8007040:	d106      	bne.n	8007050 <_printf_common+0x48>
 8007042:	f104 0a19 	add.w	sl, r4, #25
 8007046:	68e3      	ldr	r3, [r4, #12]
 8007048:	6832      	ldr	r2, [r6, #0]
 800704a:	1a9b      	subs	r3, r3, r2
 800704c:	42ab      	cmp	r3, r5
 800704e:	dc28      	bgt.n	80070a2 <_printf_common+0x9a>
 8007050:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007054:	1e13      	subs	r3, r2, #0
 8007056:	6822      	ldr	r2, [r4, #0]
 8007058:	bf18      	it	ne
 800705a:	2301      	movne	r3, #1
 800705c:	0692      	lsls	r2, r2, #26
 800705e:	d42d      	bmi.n	80070bc <_printf_common+0xb4>
 8007060:	4649      	mov	r1, r9
 8007062:	4638      	mov	r0, r7
 8007064:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007068:	47c0      	blx	r8
 800706a:	3001      	adds	r0, #1
 800706c:	d020      	beq.n	80070b0 <_printf_common+0xa8>
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	68e5      	ldr	r5, [r4, #12]
 8007072:	f003 0306 	and.w	r3, r3, #6
 8007076:	2b04      	cmp	r3, #4
 8007078:	bf18      	it	ne
 800707a:	2500      	movne	r5, #0
 800707c:	6832      	ldr	r2, [r6, #0]
 800707e:	f04f 0600 	mov.w	r6, #0
 8007082:	68a3      	ldr	r3, [r4, #8]
 8007084:	bf08      	it	eq
 8007086:	1aad      	subeq	r5, r5, r2
 8007088:	6922      	ldr	r2, [r4, #16]
 800708a:	bf08      	it	eq
 800708c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007090:	4293      	cmp	r3, r2
 8007092:	bfc4      	itt	gt
 8007094:	1a9b      	subgt	r3, r3, r2
 8007096:	18ed      	addgt	r5, r5, r3
 8007098:	341a      	adds	r4, #26
 800709a:	42b5      	cmp	r5, r6
 800709c:	d11a      	bne.n	80070d4 <_printf_common+0xcc>
 800709e:	2000      	movs	r0, #0
 80070a0:	e008      	b.n	80070b4 <_printf_common+0xac>
 80070a2:	2301      	movs	r3, #1
 80070a4:	4652      	mov	r2, sl
 80070a6:	4649      	mov	r1, r9
 80070a8:	4638      	mov	r0, r7
 80070aa:	47c0      	blx	r8
 80070ac:	3001      	adds	r0, #1
 80070ae:	d103      	bne.n	80070b8 <_printf_common+0xb0>
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295
 80070b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b8:	3501      	adds	r5, #1
 80070ba:	e7c4      	b.n	8007046 <_printf_common+0x3e>
 80070bc:	2030      	movs	r0, #48	; 0x30
 80070be:	18e1      	adds	r1, r4, r3
 80070c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070ca:	4422      	add	r2, r4
 80070cc:	3302      	adds	r3, #2
 80070ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070d2:	e7c5      	b.n	8007060 <_printf_common+0x58>
 80070d4:	2301      	movs	r3, #1
 80070d6:	4622      	mov	r2, r4
 80070d8:	4649      	mov	r1, r9
 80070da:	4638      	mov	r0, r7
 80070dc:	47c0      	blx	r8
 80070de:	3001      	adds	r0, #1
 80070e0:	d0e6      	beq.n	80070b0 <_printf_common+0xa8>
 80070e2:	3601      	adds	r6, #1
 80070e4:	e7d9      	b.n	800709a <_printf_common+0x92>
	...

080070e8 <_printf_i>:
 80070e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070ec:	460c      	mov	r4, r1
 80070ee:	7e27      	ldrb	r7, [r4, #24]
 80070f0:	4691      	mov	r9, r2
 80070f2:	2f78      	cmp	r7, #120	; 0x78
 80070f4:	4680      	mov	r8, r0
 80070f6:	469a      	mov	sl, r3
 80070f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070fe:	d807      	bhi.n	8007110 <_printf_i+0x28>
 8007100:	2f62      	cmp	r7, #98	; 0x62
 8007102:	d80a      	bhi.n	800711a <_printf_i+0x32>
 8007104:	2f00      	cmp	r7, #0
 8007106:	f000 80d9 	beq.w	80072bc <_printf_i+0x1d4>
 800710a:	2f58      	cmp	r7, #88	; 0x58
 800710c:	f000 80a4 	beq.w	8007258 <_printf_i+0x170>
 8007110:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007118:	e03a      	b.n	8007190 <_printf_i+0xa8>
 800711a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800711e:	2b15      	cmp	r3, #21
 8007120:	d8f6      	bhi.n	8007110 <_printf_i+0x28>
 8007122:	a001      	add	r0, pc, #4	; (adr r0, 8007128 <_printf_i+0x40>)
 8007124:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007128:	08007181 	.word	0x08007181
 800712c:	08007195 	.word	0x08007195
 8007130:	08007111 	.word	0x08007111
 8007134:	08007111 	.word	0x08007111
 8007138:	08007111 	.word	0x08007111
 800713c:	08007111 	.word	0x08007111
 8007140:	08007195 	.word	0x08007195
 8007144:	08007111 	.word	0x08007111
 8007148:	08007111 	.word	0x08007111
 800714c:	08007111 	.word	0x08007111
 8007150:	08007111 	.word	0x08007111
 8007154:	080072a3 	.word	0x080072a3
 8007158:	080071c5 	.word	0x080071c5
 800715c:	08007285 	.word	0x08007285
 8007160:	08007111 	.word	0x08007111
 8007164:	08007111 	.word	0x08007111
 8007168:	080072c5 	.word	0x080072c5
 800716c:	08007111 	.word	0x08007111
 8007170:	080071c5 	.word	0x080071c5
 8007174:	08007111 	.word	0x08007111
 8007178:	08007111 	.word	0x08007111
 800717c:	0800728d 	.word	0x0800728d
 8007180:	680b      	ldr	r3, [r1, #0]
 8007182:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007186:	1d1a      	adds	r2, r3, #4
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	600a      	str	r2, [r1, #0]
 800718c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007190:	2301      	movs	r3, #1
 8007192:	e0a4      	b.n	80072de <_printf_i+0x1f6>
 8007194:	6825      	ldr	r5, [r4, #0]
 8007196:	6808      	ldr	r0, [r1, #0]
 8007198:	062e      	lsls	r6, r5, #24
 800719a:	f100 0304 	add.w	r3, r0, #4
 800719e:	d50a      	bpl.n	80071b6 <_printf_i+0xce>
 80071a0:	6805      	ldr	r5, [r0, #0]
 80071a2:	600b      	str	r3, [r1, #0]
 80071a4:	2d00      	cmp	r5, #0
 80071a6:	da03      	bge.n	80071b0 <_printf_i+0xc8>
 80071a8:	232d      	movs	r3, #45	; 0x2d
 80071aa:	426d      	negs	r5, r5
 80071ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b0:	230a      	movs	r3, #10
 80071b2:	485e      	ldr	r0, [pc, #376]	; (800732c <_printf_i+0x244>)
 80071b4:	e019      	b.n	80071ea <_printf_i+0x102>
 80071b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80071ba:	6805      	ldr	r5, [r0, #0]
 80071bc:	600b      	str	r3, [r1, #0]
 80071be:	bf18      	it	ne
 80071c0:	b22d      	sxthne	r5, r5
 80071c2:	e7ef      	b.n	80071a4 <_printf_i+0xbc>
 80071c4:	680b      	ldr	r3, [r1, #0]
 80071c6:	6825      	ldr	r5, [r4, #0]
 80071c8:	1d18      	adds	r0, r3, #4
 80071ca:	6008      	str	r0, [r1, #0]
 80071cc:	0628      	lsls	r0, r5, #24
 80071ce:	d501      	bpl.n	80071d4 <_printf_i+0xec>
 80071d0:	681d      	ldr	r5, [r3, #0]
 80071d2:	e002      	b.n	80071da <_printf_i+0xf2>
 80071d4:	0669      	lsls	r1, r5, #25
 80071d6:	d5fb      	bpl.n	80071d0 <_printf_i+0xe8>
 80071d8:	881d      	ldrh	r5, [r3, #0]
 80071da:	2f6f      	cmp	r7, #111	; 0x6f
 80071dc:	bf0c      	ite	eq
 80071de:	2308      	moveq	r3, #8
 80071e0:	230a      	movne	r3, #10
 80071e2:	4852      	ldr	r0, [pc, #328]	; (800732c <_printf_i+0x244>)
 80071e4:	2100      	movs	r1, #0
 80071e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071ea:	6866      	ldr	r6, [r4, #4]
 80071ec:	2e00      	cmp	r6, #0
 80071ee:	bfa8      	it	ge
 80071f0:	6821      	ldrge	r1, [r4, #0]
 80071f2:	60a6      	str	r6, [r4, #8]
 80071f4:	bfa4      	itt	ge
 80071f6:	f021 0104 	bicge.w	r1, r1, #4
 80071fa:	6021      	strge	r1, [r4, #0]
 80071fc:	b90d      	cbnz	r5, 8007202 <_printf_i+0x11a>
 80071fe:	2e00      	cmp	r6, #0
 8007200:	d04d      	beq.n	800729e <_printf_i+0x1b6>
 8007202:	4616      	mov	r6, r2
 8007204:	fbb5 f1f3 	udiv	r1, r5, r3
 8007208:	fb03 5711 	mls	r7, r3, r1, r5
 800720c:	5dc7      	ldrb	r7, [r0, r7]
 800720e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007212:	462f      	mov	r7, r5
 8007214:	42bb      	cmp	r3, r7
 8007216:	460d      	mov	r5, r1
 8007218:	d9f4      	bls.n	8007204 <_printf_i+0x11c>
 800721a:	2b08      	cmp	r3, #8
 800721c:	d10b      	bne.n	8007236 <_printf_i+0x14e>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	07df      	lsls	r7, r3, #31
 8007222:	d508      	bpl.n	8007236 <_printf_i+0x14e>
 8007224:	6923      	ldr	r3, [r4, #16]
 8007226:	6861      	ldr	r1, [r4, #4]
 8007228:	4299      	cmp	r1, r3
 800722a:	bfde      	ittt	le
 800722c:	2330      	movle	r3, #48	; 0x30
 800722e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007232:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007236:	1b92      	subs	r2, r2, r6
 8007238:	6122      	str	r2, [r4, #16]
 800723a:	464b      	mov	r3, r9
 800723c:	4621      	mov	r1, r4
 800723e:	4640      	mov	r0, r8
 8007240:	f8cd a000 	str.w	sl, [sp]
 8007244:	aa03      	add	r2, sp, #12
 8007246:	f7ff fedf 	bl	8007008 <_printf_common>
 800724a:	3001      	adds	r0, #1
 800724c:	d14c      	bne.n	80072e8 <_printf_i+0x200>
 800724e:	f04f 30ff 	mov.w	r0, #4294967295
 8007252:	b004      	add	sp, #16
 8007254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007258:	4834      	ldr	r0, [pc, #208]	; (800732c <_printf_i+0x244>)
 800725a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800725e:	680e      	ldr	r6, [r1, #0]
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	f856 5b04 	ldr.w	r5, [r6], #4
 8007266:	061f      	lsls	r7, r3, #24
 8007268:	600e      	str	r6, [r1, #0]
 800726a:	d514      	bpl.n	8007296 <_printf_i+0x1ae>
 800726c:	07d9      	lsls	r1, r3, #31
 800726e:	bf44      	itt	mi
 8007270:	f043 0320 	orrmi.w	r3, r3, #32
 8007274:	6023      	strmi	r3, [r4, #0]
 8007276:	b91d      	cbnz	r5, 8007280 <_printf_i+0x198>
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	f023 0320 	bic.w	r3, r3, #32
 800727e:	6023      	str	r3, [r4, #0]
 8007280:	2310      	movs	r3, #16
 8007282:	e7af      	b.n	80071e4 <_printf_i+0xfc>
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	f043 0320 	orr.w	r3, r3, #32
 800728a:	6023      	str	r3, [r4, #0]
 800728c:	2378      	movs	r3, #120	; 0x78
 800728e:	4828      	ldr	r0, [pc, #160]	; (8007330 <_printf_i+0x248>)
 8007290:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007294:	e7e3      	b.n	800725e <_printf_i+0x176>
 8007296:	065e      	lsls	r6, r3, #25
 8007298:	bf48      	it	mi
 800729a:	b2ad      	uxthmi	r5, r5
 800729c:	e7e6      	b.n	800726c <_printf_i+0x184>
 800729e:	4616      	mov	r6, r2
 80072a0:	e7bb      	b.n	800721a <_printf_i+0x132>
 80072a2:	680b      	ldr	r3, [r1, #0]
 80072a4:	6826      	ldr	r6, [r4, #0]
 80072a6:	1d1d      	adds	r5, r3, #4
 80072a8:	6960      	ldr	r0, [r4, #20]
 80072aa:	600d      	str	r5, [r1, #0]
 80072ac:	0635      	lsls	r5, r6, #24
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	d501      	bpl.n	80072b6 <_printf_i+0x1ce>
 80072b2:	6018      	str	r0, [r3, #0]
 80072b4:	e002      	b.n	80072bc <_printf_i+0x1d4>
 80072b6:	0671      	lsls	r1, r6, #25
 80072b8:	d5fb      	bpl.n	80072b2 <_printf_i+0x1ca>
 80072ba:	8018      	strh	r0, [r3, #0]
 80072bc:	2300      	movs	r3, #0
 80072be:	4616      	mov	r6, r2
 80072c0:	6123      	str	r3, [r4, #16]
 80072c2:	e7ba      	b.n	800723a <_printf_i+0x152>
 80072c4:	680b      	ldr	r3, [r1, #0]
 80072c6:	1d1a      	adds	r2, r3, #4
 80072c8:	600a      	str	r2, [r1, #0]
 80072ca:	681e      	ldr	r6, [r3, #0]
 80072cc:	2100      	movs	r1, #0
 80072ce:	4630      	mov	r0, r6
 80072d0:	6862      	ldr	r2, [r4, #4]
 80072d2:	f001 f88b 	bl	80083ec <memchr>
 80072d6:	b108      	cbz	r0, 80072dc <_printf_i+0x1f4>
 80072d8:	1b80      	subs	r0, r0, r6
 80072da:	6060      	str	r0, [r4, #4]
 80072dc:	6863      	ldr	r3, [r4, #4]
 80072de:	6123      	str	r3, [r4, #16]
 80072e0:	2300      	movs	r3, #0
 80072e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072e6:	e7a8      	b.n	800723a <_printf_i+0x152>
 80072e8:	4632      	mov	r2, r6
 80072ea:	4649      	mov	r1, r9
 80072ec:	4640      	mov	r0, r8
 80072ee:	6923      	ldr	r3, [r4, #16]
 80072f0:	47d0      	blx	sl
 80072f2:	3001      	adds	r0, #1
 80072f4:	d0ab      	beq.n	800724e <_printf_i+0x166>
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	079b      	lsls	r3, r3, #30
 80072fa:	d413      	bmi.n	8007324 <_printf_i+0x23c>
 80072fc:	68e0      	ldr	r0, [r4, #12]
 80072fe:	9b03      	ldr	r3, [sp, #12]
 8007300:	4298      	cmp	r0, r3
 8007302:	bfb8      	it	lt
 8007304:	4618      	movlt	r0, r3
 8007306:	e7a4      	b.n	8007252 <_printf_i+0x16a>
 8007308:	2301      	movs	r3, #1
 800730a:	4632      	mov	r2, r6
 800730c:	4649      	mov	r1, r9
 800730e:	4640      	mov	r0, r8
 8007310:	47d0      	blx	sl
 8007312:	3001      	adds	r0, #1
 8007314:	d09b      	beq.n	800724e <_printf_i+0x166>
 8007316:	3501      	adds	r5, #1
 8007318:	68e3      	ldr	r3, [r4, #12]
 800731a:	9903      	ldr	r1, [sp, #12]
 800731c:	1a5b      	subs	r3, r3, r1
 800731e:	42ab      	cmp	r3, r5
 8007320:	dcf2      	bgt.n	8007308 <_printf_i+0x220>
 8007322:	e7eb      	b.n	80072fc <_printf_i+0x214>
 8007324:	2500      	movs	r5, #0
 8007326:	f104 0619 	add.w	r6, r4, #25
 800732a:	e7f5      	b.n	8007318 <_printf_i+0x230>
 800732c:	080096c6 	.word	0x080096c6
 8007330:	080096d7 	.word	0x080096d7

08007334 <cleanup_glue>:
 8007334:	b538      	push	{r3, r4, r5, lr}
 8007336:	460c      	mov	r4, r1
 8007338:	6809      	ldr	r1, [r1, #0]
 800733a:	4605      	mov	r5, r0
 800733c:	b109      	cbz	r1, 8007342 <cleanup_glue+0xe>
 800733e:	f7ff fff9 	bl	8007334 <cleanup_glue>
 8007342:	4621      	mov	r1, r4
 8007344:	4628      	mov	r0, r5
 8007346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800734a:	f001 bbf9 	b.w	8008b40 <_free_r>
	...

08007350 <_reclaim_reent>:
 8007350:	4b2c      	ldr	r3, [pc, #176]	; (8007404 <_reclaim_reent+0xb4>)
 8007352:	b570      	push	{r4, r5, r6, lr}
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4604      	mov	r4, r0
 8007358:	4283      	cmp	r3, r0
 800735a:	d051      	beq.n	8007400 <_reclaim_reent+0xb0>
 800735c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800735e:	b143      	cbz	r3, 8007372 <_reclaim_reent+0x22>
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d14a      	bne.n	80073fc <_reclaim_reent+0xac>
 8007366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007368:	6819      	ldr	r1, [r3, #0]
 800736a:	b111      	cbz	r1, 8007372 <_reclaim_reent+0x22>
 800736c:	4620      	mov	r0, r4
 800736e:	f001 fbe7 	bl	8008b40 <_free_r>
 8007372:	6961      	ldr	r1, [r4, #20]
 8007374:	b111      	cbz	r1, 800737c <_reclaim_reent+0x2c>
 8007376:	4620      	mov	r0, r4
 8007378:	f001 fbe2 	bl	8008b40 <_free_r>
 800737c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800737e:	b111      	cbz	r1, 8007386 <_reclaim_reent+0x36>
 8007380:	4620      	mov	r0, r4
 8007382:	f001 fbdd 	bl	8008b40 <_free_r>
 8007386:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007388:	b111      	cbz	r1, 8007390 <_reclaim_reent+0x40>
 800738a:	4620      	mov	r0, r4
 800738c:	f001 fbd8 	bl	8008b40 <_free_r>
 8007390:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007392:	b111      	cbz	r1, 800739a <_reclaim_reent+0x4a>
 8007394:	4620      	mov	r0, r4
 8007396:	f001 fbd3 	bl	8008b40 <_free_r>
 800739a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800739c:	b111      	cbz	r1, 80073a4 <_reclaim_reent+0x54>
 800739e:	4620      	mov	r0, r4
 80073a0:	f001 fbce 	bl	8008b40 <_free_r>
 80073a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80073a6:	b111      	cbz	r1, 80073ae <_reclaim_reent+0x5e>
 80073a8:	4620      	mov	r0, r4
 80073aa:	f001 fbc9 	bl	8008b40 <_free_r>
 80073ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80073b0:	b111      	cbz	r1, 80073b8 <_reclaim_reent+0x68>
 80073b2:	4620      	mov	r0, r4
 80073b4:	f001 fbc4 	bl	8008b40 <_free_r>
 80073b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073ba:	b111      	cbz	r1, 80073c2 <_reclaim_reent+0x72>
 80073bc:	4620      	mov	r0, r4
 80073be:	f001 fbbf 	bl	8008b40 <_free_r>
 80073c2:	69a3      	ldr	r3, [r4, #24]
 80073c4:	b1e3      	cbz	r3, 8007400 <_reclaim_reent+0xb0>
 80073c6:	4620      	mov	r0, r4
 80073c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80073ca:	4798      	blx	r3
 80073cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80073ce:	b1b9      	cbz	r1, 8007400 <_reclaim_reent+0xb0>
 80073d0:	4620      	mov	r0, r4
 80073d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80073d6:	f7ff bfad 	b.w	8007334 <cleanup_glue>
 80073da:	5949      	ldr	r1, [r1, r5]
 80073dc:	b941      	cbnz	r1, 80073f0 <_reclaim_reent+0xa0>
 80073de:	3504      	adds	r5, #4
 80073e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073e2:	2d80      	cmp	r5, #128	; 0x80
 80073e4:	68d9      	ldr	r1, [r3, #12]
 80073e6:	d1f8      	bne.n	80073da <_reclaim_reent+0x8a>
 80073e8:	4620      	mov	r0, r4
 80073ea:	f001 fba9 	bl	8008b40 <_free_r>
 80073ee:	e7ba      	b.n	8007366 <_reclaim_reent+0x16>
 80073f0:	680e      	ldr	r6, [r1, #0]
 80073f2:	4620      	mov	r0, r4
 80073f4:	f001 fba4 	bl	8008b40 <_free_r>
 80073f8:	4631      	mov	r1, r6
 80073fa:	e7ef      	b.n	80073dc <_reclaim_reent+0x8c>
 80073fc:	2500      	movs	r5, #0
 80073fe:	e7ef      	b.n	80073e0 <_reclaim_reent+0x90>
 8007400:	bd70      	pop	{r4, r5, r6, pc}
 8007402:	bf00      	nop
 8007404:	20000010 	.word	0x20000010

08007408 <_sbrk_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	2300      	movs	r3, #0
 800740c:	4d05      	ldr	r5, [pc, #20]	; (8007424 <_sbrk_r+0x1c>)
 800740e:	4604      	mov	r4, r0
 8007410:	4608      	mov	r0, r1
 8007412:	602b      	str	r3, [r5, #0]
 8007414:	f7f9 ffce 	bl	80013b4 <_sbrk>
 8007418:	1c43      	adds	r3, r0, #1
 800741a:	d102      	bne.n	8007422 <_sbrk_r+0x1a>
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	b103      	cbz	r3, 8007422 <_sbrk_r+0x1a>
 8007420:	6023      	str	r3, [r4, #0]
 8007422:	bd38      	pop	{r3, r4, r5, pc}
 8007424:	20001d20 	.word	0x20001d20

08007428 <siprintf>:
 8007428:	b40e      	push	{r1, r2, r3}
 800742a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800742e:	b500      	push	{lr}
 8007430:	b09c      	sub	sp, #112	; 0x70
 8007432:	ab1d      	add	r3, sp, #116	; 0x74
 8007434:	9002      	str	r0, [sp, #8]
 8007436:	9006      	str	r0, [sp, #24]
 8007438:	9107      	str	r1, [sp, #28]
 800743a:	9104      	str	r1, [sp, #16]
 800743c:	4808      	ldr	r0, [pc, #32]	; (8007460 <siprintf+0x38>)
 800743e:	4909      	ldr	r1, [pc, #36]	; (8007464 <siprintf+0x3c>)
 8007440:	f853 2b04 	ldr.w	r2, [r3], #4
 8007444:	9105      	str	r1, [sp, #20]
 8007446:	6800      	ldr	r0, [r0, #0]
 8007448:	a902      	add	r1, sp, #8
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	f001 fc20 	bl	8008c90 <_svfiprintf_r>
 8007450:	2200      	movs	r2, #0
 8007452:	9b02      	ldr	r3, [sp, #8]
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	b01c      	add	sp, #112	; 0x70
 8007458:	f85d eb04 	ldr.w	lr, [sp], #4
 800745c:	b003      	add	sp, #12
 800745e:	4770      	bx	lr
 8007460:	20000010 	.word	0x20000010
 8007464:	ffff0208 	.word	0xffff0208

08007468 <__sread>:
 8007468:	b510      	push	{r4, lr}
 800746a:	460c      	mov	r4, r1
 800746c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007470:	f001 fd0e 	bl	8008e90 <_read_r>
 8007474:	2800      	cmp	r0, #0
 8007476:	bfab      	itete	ge
 8007478:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800747a:	89a3      	ldrhlt	r3, [r4, #12]
 800747c:	181b      	addge	r3, r3, r0
 800747e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007482:	bfac      	ite	ge
 8007484:	6563      	strge	r3, [r4, #84]	; 0x54
 8007486:	81a3      	strhlt	r3, [r4, #12]
 8007488:	bd10      	pop	{r4, pc}

0800748a <__swrite>:
 800748a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800748e:	461f      	mov	r7, r3
 8007490:	898b      	ldrh	r3, [r1, #12]
 8007492:	4605      	mov	r5, r0
 8007494:	05db      	lsls	r3, r3, #23
 8007496:	460c      	mov	r4, r1
 8007498:	4616      	mov	r6, r2
 800749a:	d505      	bpl.n	80074a8 <__swrite+0x1e>
 800749c:	2302      	movs	r3, #2
 800749e:	2200      	movs	r2, #0
 80074a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a4:	f000 ff88 	bl	80083b8 <_lseek_r>
 80074a8:	89a3      	ldrh	r3, [r4, #12]
 80074aa:	4632      	mov	r2, r6
 80074ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074b0:	81a3      	strh	r3, [r4, #12]
 80074b2:	4628      	mov	r0, r5
 80074b4:	463b      	mov	r3, r7
 80074b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074be:	f000 b817 	b.w	80074f0 <_write_r>

080074c2 <__sseek>:
 80074c2:	b510      	push	{r4, lr}
 80074c4:	460c      	mov	r4, r1
 80074c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ca:	f000 ff75 	bl	80083b8 <_lseek_r>
 80074ce:	1c43      	adds	r3, r0, #1
 80074d0:	89a3      	ldrh	r3, [r4, #12]
 80074d2:	bf15      	itete	ne
 80074d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80074d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074de:	81a3      	strheq	r3, [r4, #12]
 80074e0:	bf18      	it	ne
 80074e2:	81a3      	strhne	r3, [r4, #12]
 80074e4:	bd10      	pop	{r4, pc}

080074e6 <__sclose>:
 80074e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ea:	f000 b813 	b.w	8007514 <_close_r>
	...

080074f0 <_write_r>:
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	4604      	mov	r4, r0
 80074f4:	4608      	mov	r0, r1
 80074f6:	4611      	mov	r1, r2
 80074f8:	2200      	movs	r2, #0
 80074fa:	4d05      	ldr	r5, [pc, #20]	; (8007510 <_write_r+0x20>)
 80074fc:	602a      	str	r2, [r5, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	f7f9 ff0c 	bl	800131c <_write>
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	d102      	bne.n	800750e <_write_r+0x1e>
 8007508:	682b      	ldr	r3, [r5, #0]
 800750a:	b103      	cbz	r3, 800750e <_write_r+0x1e>
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	bd38      	pop	{r3, r4, r5, pc}
 8007510:	20001d20 	.word	0x20001d20

08007514 <_close_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	2300      	movs	r3, #0
 8007518:	4d05      	ldr	r5, [pc, #20]	; (8007530 <_close_r+0x1c>)
 800751a:	4604      	mov	r4, r0
 800751c:	4608      	mov	r0, r1
 800751e:	602b      	str	r3, [r5, #0]
 8007520:	f7f9 ff18 	bl	8001354 <_close>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	d102      	bne.n	800752e <_close_r+0x1a>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	b103      	cbz	r3, 800752e <_close_r+0x1a>
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	20001d20 	.word	0x20001d20

08007534 <quorem>:
 8007534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007538:	6903      	ldr	r3, [r0, #16]
 800753a:	690c      	ldr	r4, [r1, #16]
 800753c:	4607      	mov	r7, r0
 800753e:	42a3      	cmp	r3, r4
 8007540:	f2c0 8083 	blt.w	800764a <quorem+0x116>
 8007544:	3c01      	subs	r4, #1
 8007546:	f100 0514 	add.w	r5, r0, #20
 800754a:	f101 0814 	add.w	r8, r1, #20
 800754e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007552:	9301      	str	r3, [sp, #4]
 8007554:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007558:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800755c:	3301      	adds	r3, #1
 800755e:	429a      	cmp	r2, r3
 8007560:	fbb2 f6f3 	udiv	r6, r2, r3
 8007564:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007568:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800756c:	d332      	bcc.n	80075d4 <quorem+0xa0>
 800756e:	f04f 0e00 	mov.w	lr, #0
 8007572:	4640      	mov	r0, r8
 8007574:	46ac      	mov	ip, r5
 8007576:	46f2      	mov	sl, lr
 8007578:	f850 2b04 	ldr.w	r2, [r0], #4
 800757c:	b293      	uxth	r3, r2
 800757e:	fb06 e303 	mla	r3, r6, r3, lr
 8007582:	0c12      	lsrs	r2, r2, #16
 8007584:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007588:	fb06 e202 	mla	r2, r6, r2, lr
 800758c:	b29b      	uxth	r3, r3
 800758e:	ebaa 0303 	sub.w	r3, sl, r3
 8007592:	f8dc a000 	ldr.w	sl, [ip]
 8007596:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800759a:	fa1f fa8a 	uxth.w	sl, sl
 800759e:	4453      	add	r3, sl
 80075a0:	fa1f fa82 	uxth.w	sl, r2
 80075a4:	f8dc 2000 	ldr.w	r2, [ip]
 80075a8:	4581      	cmp	r9, r0
 80075aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80075ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80075bc:	f84c 3b04 	str.w	r3, [ip], #4
 80075c0:	d2da      	bcs.n	8007578 <quorem+0x44>
 80075c2:	f855 300b 	ldr.w	r3, [r5, fp]
 80075c6:	b92b      	cbnz	r3, 80075d4 <quorem+0xa0>
 80075c8:	9b01      	ldr	r3, [sp, #4]
 80075ca:	3b04      	subs	r3, #4
 80075cc:	429d      	cmp	r5, r3
 80075ce:	461a      	mov	r2, r3
 80075d0:	d32f      	bcc.n	8007632 <quorem+0xfe>
 80075d2:	613c      	str	r4, [r7, #16]
 80075d4:	4638      	mov	r0, r7
 80075d6:	f001 f99d 	bl	8008914 <__mcmp>
 80075da:	2800      	cmp	r0, #0
 80075dc:	db25      	blt.n	800762a <quorem+0xf6>
 80075de:	4628      	mov	r0, r5
 80075e0:	f04f 0c00 	mov.w	ip, #0
 80075e4:	3601      	adds	r6, #1
 80075e6:	f858 1b04 	ldr.w	r1, [r8], #4
 80075ea:	f8d0 e000 	ldr.w	lr, [r0]
 80075ee:	b28b      	uxth	r3, r1
 80075f0:	ebac 0303 	sub.w	r3, ip, r3
 80075f4:	fa1f f28e 	uxth.w	r2, lr
 80075f8:	4413      	add	r3, r2
 80075fa:	0c0a      	lsrs	r2, r1, #16
 80075fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007600:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007604:	b29b      	uxth	r3, r3
 8007606:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800760a:	45c1      	cmp	r9, r8
 800760c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007610:	f840 3b04 	str.w	r3, [r0], #4
 8007614:	d2e7      	bcs.n	80075e6 <quorem+0xb2>
 8007616:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800761a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800761e:	b922      	cbnz	r2, 800762a <quorem+0xf6>
 8007620:	3b04      	subs	r3, #4
 8007622:	429d      	cmp	r5, r3
 8007624:	461a      	mov	r2, r3
 8007626:	d30a      	bcc.n	800763e <quorem+0x10a>
 8007628:	613c      	str	r4, [r7, #16]
 800762a:	4630      	mov	r0, r6
 800762c:	b003      	add	sp, #12
 800762e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007632:	6812      	ldr	r2, [r2, #0]
 8007634:	3b04      	subs	r3, #4
 8007636:	2a00      	cmp	r2, #0
 8007638:	d1cb      	bne.n	80075d2 <quorem+0x9e>
 800763a:	3c01      	subs	r4, #1
 800763c:	e7c6      	b.n	80075cc <quorem+0x98>
 800763e:	6812      	ldr	r2, [r2, #0]
 8007640:	3b04      	subs	r3, #4
 8007642:	2a00      	cmp	r2, #0
 8007644:	d1f0      	bne.n	8007628 <quorem+0xf4>
 8007646:	3c01      	subs	r4, #1
 8007648:	e7eb      	b.n	8007622 <quorem+0xee>
 800764a:	2000      	movs	r0, #0
 800764c:	e7ee      	b.n	800762c <quorem+0xf8>
	...

08007650 <_dtoa_r>:
 8007650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007654:	4616      	mov	r6, r2
 8007656:	461f      	mov	r7, r3
 8007658:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800765a:	b099      	sub	sp, #100	; 0x64
 800765c:	4605      	mov	r5, r0
 800765e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007662:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007666:	b974      	cbnz	r4, 8007686 <_dtoa_r+0x36>
 8007668:	2010      	movs	r0, #16
 800766a:	f000 feb7 	bl	80083dc <malloc>
 800766e:	4602      	mov	r2, r0
 8007670:	6268      	str	r0, [r5, #36]	; 0x24
 8007672:	b920      	cbnz	r0, 800767e <_dtoa_r+0x2e>
 8007674:	21ea      	movs	r1, #234	; 0xea
 8007676:	4bae      	ldr	r3, [pc, #696]	; (8007930 <_dtoa_r+0x2e0>)
 8007678:	48ae      	ldr	r0, [pc, #696]	; (8007934 <_dtoa_r+0x2e4>)
 800767a:	f001 fc1b 	bl	8008eb4 <__assert_func>
 800767e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007682:	6004      	str	r4, [r0, #0]
 8007684:	60c4      	str	r4, [r0, #12]
 8007686:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007688:	6819      	ldr	r1, [r3, #0]
 800768a:	b151      	cbz	r1, 80076a2 <_dtoa_r+0x52>
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	2301      	movs	r3, #1
 8007690:	4093      	lsls	r3, r2
 8007692:	604a      	str	r2, [r1, #4]
 8007694:	608b      	str	r3, [r1, #8]
 8007696:	4628      	mov	r0, r5
 8007698:	f000 ff02 	bl	80084a0 <_Bfree>
 800769c:	2200      	movs	r2, #0
 800769e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076a0:	601a      	str	r2, [r3, #0]
 80076a2:	1e3b      	subs	r3, r7, #0
 80076a4:	bfaf      	iteee	ge
 80076a6:	2300      	movge	r3, #0
 80076a8:	2201      	movlt	r2, #1
 80076aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076ae:	9305      	strlt	r3, [sp, #20]
 80076b0:	bfa8      	it	ge
 80076b2:	f8c8 3000 	strge.w	r3, [r8]
 80076b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80076ba:	4b9f      	ldr	r3, [pc, #636]	; (8007938 <_dtoa_r+0x2e8>)
 80076bc:	bfb8      	it	lt
 80076be:	f8c8 2000 	strlt.w	r2, [r8]
 80076c2:	ea33 0309 	bics.w	r3, r3, r9
 80076c6:	d119      	bne.n	80076fc <_dtoa_r+0xac>
 80076c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80076cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076d4:	4333      	orrs	r3, r6
 80076d6:	f000 8580 	beq.w	80081da <_dtoa_r+0xb8a>
 80076da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076dc:	b953      	cbnz	r3, 80076f4 <_dtoa_r+0xa4>
 80076de:	4b97      	ldr	r3, [pc, #604]	; (800793c <_dtoa_r+0x2ec>)
 80076e0:	e022      	b.n	8007728 <_dtoa_r+0xd8>
 80076e2:	4b97      	ldr	r3, [pc, #604]	; (8007940 <_dtoa_r+0x2f0>)
 80076e4:	9308      	str	r3, [sp, #32]
 80076e6:	3308      	adds	r3, #8
 80076e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	9808      	ldr	r0, [sp, #32]
 80076ee:	b019      	add	sp, #100	; 0x64
 80076f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f4:	4b91      	ldr	r3, [pc, #580]	; (800793c <_dtoa_r+0x2ec>)
 80076f6:	9308      	str	r3, [sp, #32]
 80076f8:	3303      	adds	r3, #3
 80076fa:	e7f5      	b.n	80076e8 <_dtoa_r+0x98>
 80076fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007700:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007704:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007708:	2200      	movs	r2, #0
 800770a:	2300      	movs	r3, #0
 800770c:	f7f9 f94c 	bl	80009a8 <__aeabi_dcmpeq>
 8007710:	4680      	mov	r8, r0
 8007712:	b158      	cbz	r0, 800772c <_dtoa_r+0xdc>
 8007714:	2301      	movs	r3, #1
 8007716:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007718:	6013      	str	r3, [r2, #0]
 800771a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 8559 	beq.w	80081d4 <_dtoa_r+0xb84>
 8007722:	4888      	ldr	r0, [pc, #544]	; (8007944 <_dtoa_r+0x2f4>)
 8007724:	6018      	str	r0, [r3, #0]
 8007726:	1e43      	subs	r3, r0, #1
 8007728:	9308      	str	r3, [sp, #32]
 800772a:	e7df      	b.n	80076ec <_dtoa_r+0x9c>
 800772c:	ab16      	add	r3, sp, #88	; 0x58
 800772e:	9301      	str	r3, [sp, #4]
 8007730:	ab17      	add	r3, sp, #92	; 0x5c
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	4628      	mov	r0, r5
 8007736:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800773a:	f001 f997 	bl	8008a6c <__d2b>
 800773e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007742:	4682      	mov	sl, r0
 8007744:	2c00      	cmp	r4, #0
 8007746:	d07e      	beq.n	8007846 <_dtoa_r+0x1f6>
 8007748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800774c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800774e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007752:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007756:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800775a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800775e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007762:	2200      	movs	r2, #0
 8007764:	4b78      	ldr	r3, [pc, #480]	; (8007948 <_dtoa_r+0x2f8>)
 8007766:	f7f8 fcff 	bl	8000168 <__aeabi_dsub>
 800776a:	a36b      	add	r3, pc, #428	; (adr r3, 8007918 <_dtoa_r+0x2c8>)
 800776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007770:	f7f8 feb2 	bl	80004d8 <__aeabi_dmul>
 8007774:	a36a      	add	r3, pc, #424	; (adr r3, 8007920 <_dtoa_r+0x2d0>)
 8007776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777a:	f7f8 fcf7 	bl	800016c <__adddf3>
 800777e:	4606      	mov	r6, r0
 8007780:	4620      	mov	r0, r4
 8007782:	460f      	mov	r7, r1
 8007784:	f7f8 fe3e 	bl	8000404 <__aeabi_i2d>
 8007788:	a367      	add	r3, pc, #412	; (adr r3, 8007928 <_dtoa_r+0x2d8>)
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	f7f8 fea3 	bl	80004d8 <__aeabi_dmul>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	4630      	mov	r0, r6
 8007798:	4639      	mov	r1, r7
 800779a:	f7f8 fce7 	bl	800016c <__adddf3>
 800779e:	4606      	mov	r6, r0
 80077a0:	460f      	mov	r7, r1
 80077a2:	f7f9 f949 	bl	8000a38 <__aeabi_d2iz>
 80077a6:	2200      	movs	r2, #0
 80077a8:	4681      	mov	r9, r0
 80077aa:	2300      	movs	r3, #0
 80077ac:	4630      	mov	r0, r6
 80077ae:	4639      	mov	r1, r7
 80077b0:	f7f9 f904 	bl	80009bc <__aeabi_dcmplt>
 80077b4:	b148      	cbz	r0, 80077ca <_dtoa_r+0x17a>
 80077b6:	4648      	mov	r0, r9
 80077b8:	f7f8 fe24 	bl	8000404 <__aeabi_i2d>
 80077bc:	4632      	mov	r2, r6
 80077be:	463b      	mov	r3, r7
 80077c0:	f7f9 f8f2 	bl	80009a8 <__aeabi_dcmpeq>
 80077c4:	b908      	cbnz	r0, 80077ca <_dtoa_r+0x17a>
 80077c6:	f109 39ff 	add.w	r9, r9, #4294967295
 80077ca:	f1b9 0f16 	cmp.w	r9, #22
 80077ce:	d857      	bhi.n	8007880 <_dtoa_r+0x230>
 80077d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077d4:	4b5d      	ldr	r3, [pc, #372]	; (800794c <_dtoa_r+0x2fc>)
 80077d6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80077da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077de:	f7f9 f8ed 	bl	80009bc <__aeabi_dcmplt>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	d04e      	beq.n	8007884 <_dtoa_r+0x234>
 80077e6:	2300      	movs	r3, #0
 80077e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80077ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80077ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80077f0:	1b1c      	subs	r4, r3, r4
 80077f2:	1e63      	subs	r3, r4, #1
 80077f4:	9309      	str	r3, [sp, #36]	; 0x24
 80077f6:	bf49      	itett	mi
 80077f8:	f1c4 0301 	rsbmi	r3, r4, #1
 80077fc:	2300      	movpl	r3, #0
 80077fe:	9306      	strmi	r3, [sp, #24]
 8007800:	2300      	movmi	r3, #0
 8007802:	bf54      	ite	pl
 8007804:	9306      	strpl	r3, [sp, #24]
 8007806:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007808:	f1b9 0f00 	cmp.w	r9, #0
 800780c:	db3c      	blt.n	8007888 <_dtoa_r+0x238>
 800780e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007810:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007814:	444b      	add	r3, r9
 8007816:	9309      	str	r3, [sp, #36]	; 0x24
 8007818:	2300      	movs	r3, #0
 800781a:	930a      	str	r3, [sp, #40]	; 0x28
 800781c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800781e:	2b09      	cmp	r3, #9
 8007820:	d86c      	bhi.n	80078fc <_dtoa_r+0x2ac>
 8007822:	2b05      	cmp	r3, #5
 8007824:	bfc4      	itt	gt
 8007826:	3b04      	subgt	r3, #4
 8007828:	9322      	strgt	r3, [sp, #136]	; 0x88
 800782a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800782c:	bfc8      	it	gt
 800782e:	2400      	movgt	r4, #0
 8007830:	f1a3 0302 	sub.w	r3, r3, #2
 8007834:	bfd8      	it	le
 8007836:	2401      	movle	r4, #1
 8007838:	2b03      	cmp	r3, #3
 800783a:	f200 808b 	bhi.w	8007954 <_dtoa_r+0x304>
 800783e:	e8df f003 	tbb	[pc, r3]
 8007842:	4f2d      	.short	0x4f2d
 8007844:	5b4d      	.short	0x5b4d
 8007846:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800784a:	441c      	add	r4, r3
 800784c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007850:	2b20      	cmp	r3, #32
 8007852:	bfc3      	ittte	gt
 8007854:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007858:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800785c:	fa09 f303 	lslgt.w	r3, r9, r3
 8007860:	f1c3 0320 	rsble	r3, r3, #32
 8007864:	bfc6      	itte	gt
 8007866:	fa26 f000 	lsrgt.w	r0, r6, r0
 800786a:	4318      	orrgt	r0, r3
 800786c:	fa06 f003 	lslle.w	r0, r6, r3
 8007870:	f7f8 fdb8 	bl	80003e4 <__aeabi_ui2d>
 8007874:	2301      	movs	r3, #1
 8007876:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800787a:	3c01      	subs	r4, #1
 800787c:	9313      	str	r3, [sp, #76]	; 0x4c
 800787e:	e770      	b.n	8007762 <_dtoa_r+0x112>
 8007880:	2301      	movs	r3, #1
 8007882:	e7b3      	b.n	80077ec <_dtoa_r+0x19c>
 8007884:	900f      	str	r0, [sp, #60]	; 0x3c
 8007886:	e7b2      	b.n	80077ee <_dtoa_r+0x19e>
 8007888:	9b06      	ldr	r3, [sp, #24]
 800788a:	eba3 0309 	sub.w	r3, r3, r9
 800788e:	9306      	str	r3, [sp, #24]
 8007890:	f1c9 0300 	rsb	r3, r9, #0
 8007894:	930a      	str	r3, [sp, #40]	; 0x28
 8007896:	2300      	movs	r3, #0
 8007898:	930e      	str	r3, [sp, #56]	; 0x38
 800789a:	e7bf      	b.n	800781c <_dtoa_r+0x1cc>
 800789c:	2300      	movs	r3, #0
 800789e:	930b      	str	r3, [sp, #44]	; 0x2c
 80078a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	dc59      	bgt.n	800795a <_dtoa_r+0x30a>
 80078a6:	f04f 0b01 	mov.w	fp, #1
 80078aa:	465b      	mov	r3, fp
 80078ac:	f8cd b008 	str.w	fp, [sp, #8]
 80078b0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80078b4:	2200      	movs	r2, #0
 80078b6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80078b8:	6042      	str	r2, [r0, #4]
 80078ba:	2204      	movs	r2, #4
 80078bc:	f102 0614 	add.w	r6, r2, #20
 80078c0:	429e      	cmp	r6, r3
 80078c2:	6841      	ldr	r1, [r0, #4]
 80078c4:	d94f      	bls.n	8007966 <_dtoa_r+0x316>
 80078c6:	4628      	mov	r0, r5
 80078c8:	f000 fdaa 	bl	8008420 <_Balloc>
 80078cc:	9008      	str	r0, [sp, #32]
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d14d      	bne.n	800796e <_dtoa_r+0x31e>
 80078d2:	4602      	mov	r2, r0
 80078d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80078d8:	4b1d      	ldr	r3, [pc, #116]	; (8007950 <_dtoa_r+0x300>)
 80078da:	e6cd      	b.n	8007678 <_dtoa_r+0x28>
 80078dc:	2301      	movs	r3, #1
 80078de:	e7de      	b.n	800789e <_dtoa_r+0x24e>
 80078e0:	2300      	movs	r3, #0
 80078e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80078e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078e6:	eb09 0b03 	add.w	fp, r9, r3
 80078ea:	f10b 0301 	add.w	r3, fp, #1
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	9302      	str	r3, [sp, #8]
 80078f2:	bfb8      	it	lt
 80078f4:	2301      	movlt	r3, #1
 80078f6:	e7dd      	b.n	80078b4 <_dtoa_r+0x264>
 80078f8:	2301      	movs	r3, #1
 80078fa:	e7f2      	b.n	80078e2 <_dtoa_r+0x292>
 80078fc:	2401      	movs	r4, #1
 80078fe:	2300      	movs	r3, #0
 8007900:	940b      	str	r4, [sp, #44]	; 0x2c
 8007902:	9322      	str	r3, [sp, #136]	; 0x88
 8007904:	f04f 3bff 	mov.w	fp, #4294967295
 8007908:	2200      	movs	r2, #0
 800790a:	2312      	movs	r3, #18
 800790c:	f8cd b008 	str.w	fp, [sp, #8]
 8007910:	9223      	str	r2, [sp, #140]	; 0x8c
 8007912:	e7cf      	b.n	80078b4 <_dtoa_r+0x264>
 8007914:	f3af 8000 	nop.w
 8007918:	636f4361 	.word	0x636f4361
 800791c:	3fd287a7 	.word	0x3fd287a7
 8007920:	8b60c8b3 	.word	0x8b60c8b3
 8007924:	3fc68a28 	.word	0x3fc68a28
 8007928:	509f79fb 	.word	0x509f79fb
 800792c:	3fd34413 	.word	0x3fd34413
 8007930:	080096f5 	.word	0x080096f5
 8007934:	0800970c 	.word	0x0800970c
 8007938:	7ff00000 	.word	0x7ff00000
 800793c:	080096f1 	.word	0x080096f1
 8007940:	080096e8 	.word	0x080096e8
 8007944:	080096c5 	.word	0x080096c5
 8007948:	3ff80000 	.word	0x3ff80000
 800794c:	08009808 	.word	0x08009808
 8007950:	0800976b 	.word	0x0800976b
 8007954:	2301      	movs	r3, #1
 8007956:	930b      	str	r3, [sp, #44]	; 0x2c
 8007958:	e7d4      	b.n	8007904 <_dtoa_r+0x2b4>
 800795a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800795e:	465b      	mov	r3, fp
 8007960:	f8cd b008 	str.w	fp, [sp, #8]
 8007964:	e7a6      	b.n	80078b4 <_dtoa_r+0x264>
 8007966:	3101      	adds	r1, #1
 8007968:	6041      	str	r1, [r0, #4]
 800796a:	0052      	lsls	r2, r2, #1
 800796c:	e7a6      	b.n	80078bc <_dtoa_r+0x26c>
 800796e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007970:	9a08      	ldr	r2, [sp, #32]
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	9b02      	ldr	r3, [sp, #8]
 8007976:	2b0e      	cmp	r3, #14
 8007978:	f200 80a8 	bhi.w	8007acc <_dtoa_r+0x47c>
 800797c:	2c00      	cmp	r4, #0
 800797e:	f000 80a5 	beq.w	8007acc <_dtoa_r+0x47c>
 8007982:	f1b9 0f00 	cmp.w	r9, #0
 8007986:	dd34      	ble.n	80079f2 <_dtoa_r+0x3a2>
 8007988:	4a9a      	ldr	r2, [pc, #616]	; (8007bf4 <_dtoa_r+0x5a4>)
 800798a:	f009 030f 	and.w	r3, r9, #15
 800798e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007992:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007996:	e9d3 3400 	ldrd	r3, r4, [r3]
 800799a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800799e:	ea4f 1429 	mov.w	r4, r9, asr #4
 80079a2:	d016      	beq.n	80079d2 <_dtoa_r+0x382>
 80079a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079a8:	4b93      	ldr	r3, [pc, #588]	; (8007bf8 <_dtoa_r+0x5a8>)
 80079aa:	2703      	movs	r7, #3
 80079ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079b0:	f7f8 febc 	bl	800072c <__aeabi_ddiv>
 80079b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079b8:	f004 040f 	and.w	r4, r4, #15
 80079bc:	4e8e      	ldr	r6, [pc, #568]	; (8007bf8 <_dtoa_r+0x5a8>)
 80079be:	b954      	cbnz	r4, 80079d6 <_dtoa_r+0x386>
 80079c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079c8:	f7f8 feb0 	bl	800072c <__aeabi_ddiv>
 80079cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079d0:	e029      	b.n	8007a26 <_dtoa_r+0x3d6>
 80079d2:	2702      	movs	r7, #2
 80079d4:	e7f2      	b.n	80079bc <_dtoa_r+0x36c>
 80079d6:	07e1      	lsls	r1, r4, #31
 80079d8:	d508      	bpl.n	80079ec <_dtoa_r+0x39c>
 80079da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80079e2:	f7f8 fd79 	bl	80004d8 <__aeabi_dmul>
 80079e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079ea:	3701      	adds	r7, #1
 80079ec:	1064      	asrs	r4, r4, #1
 80079ee:	3608      	adds	r6, #8
 80079f0:	e7e5      	b.n	80079be <_dtoa_r+0x36e>
 80079f2:	f000 80a5 	beq.w	8007b40 <_dtoa_r+0x4f0>
 80079f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079fa:	f1c9 0400 	rsb	r4, r9, #0
 80079fe:	4b7d      	ldr	r3, [pc, #500]	; (8007bf4 <_dtoa_r+0x5a4>)
 8007a00:	f004 020f 	and.w	r2, r4, #15
 8007a04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0c:	f7f8 fd64 	bl	80004d8 <__aeabi_dmul>
 8007a10:	2702      	movs	r7, #2
 8007a12:	2300      	movs	r3, #0
 8007a14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a18:	4e77      	ldr	r6, [pc, #476]	; (8007bf8 <_dtoa_r+0x5a8>)
 8007a1a:	1124      	asrs	r4, r4, #4
 8007a1c:	2c00      	cmp	r4, #0
 8007a1e:	f040 8084 	bne.w	8007b2a <_dtoa_r+0x4da>
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1d2      	bne.n	80079cc <_dtoa_r+0x37c>
 8007a26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 808b 	beq.w	8007b44 <_dtoa_r+0x4f4>
 8007a2e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007a32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007a36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	4b6f      	ldr	r3, [pc, #444]	; (8007bfc <_dtoa_r+0x5ac>)
 8007a3e:	f7f8 ffbd 	bl	80009bc <__aeabi_dcmplt>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d07e      	beq.n	8007b44 <_dtoa_r+0x4f4>
 8007a46:	9b02      	ldr	r3, [sp, #8]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d07b      	beq.n	8007b44 <_dtoa_r+0x4f4>
 8007a4c:	f1bb 0f00 	cmp.w	fp, #0
 8007a50:	dd38      	ble.n	8007ac4 <_dtoa_r+0x474>
 8007a52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a56:	2200      	movs	r2, #0
 8007a58:	4b69      	ldr	r3, [pc, #420]	; (8007c00 <_dtoa_r+0x5b0>)
 8007a5a:	f7f8 fd3d 	bl	80004d8 <__aeabi_dmul>
 8007a5e:	465c      	mov	r4, fp
 8007a60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a64:	f109 38ff 	add.w	r8, r9, #4294967295
 8007a68:	3701      	adds	r7, #1
 8007a6a:	4638      	mov	r0, r7
 8007a6c:	f7f8 fcca 	bl	8000404 <__aeabi_i2d>
 8007a70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a74:	f7f8 fd30 	bl	80004d8 <__aeabi_dmul>
 8007a78:	2200      	movs	r2, #0
 8007a7a:	4b62      	ldr	r3, [pc, #392]	; (8007c04 <_dtoa_r+0x5b4>)
 8007a7c:	f7f8 fb76 	bl	800016c <__adddf3>
 8007a80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007a84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a88:	9611      	str	r6, [sp, #68]	; 0x44
 8007a8a:	2c00      	cmp	r4, #0
 8007a8c:	d15d      	bne.n	8007b4a <_dtoa_r+0x4fa>
 8007a8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a92:	2200      	movs	r2, #0
 8007a94:	4b5c      	ldr	r3, [pc, #368]	; (8007c08 <_dtoa_r+0x5b8>)
 8007a96:	f7f8 fb67 	bl	8000168 <__aeabi_dsub>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007aa2:	4633      	mov	r3, r6
 8007aa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007aa6:	f7f8 ffa7 	bl	80009f8 <__aeabi_dcmpgt>
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	f040 829e 	bne.w	8007fec <_dtoa_r+0x99c>
 8007ab0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ab4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ab6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007aba:	f7f8 ff7f 	bl	80009bc <__aeabi_dcmplt>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	f040 8292 	bne.w	8007fe8 <_dtoa_r+0x998>
 8007ac4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007ac8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007acc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f2c0 8153 	blt.w	8007d7a <_dtoa_r+0x72a>
 8007ad4:	f1b9 0f0e 	cmp.w	r9, #14
 8007ad8:	f300 814f 	bgt.w	8007d7a <_dtoa_r+0x72a>
 8007adc:	4b45      	ldr	r3, [pc, #276]	; (8007bf4 <_dtoa_r+0x5a4>)
 8007ade:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007ae2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ae6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007aea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f280 80db 	bge.w	8007ca8 <_dtoa_r+0x658>
 8007af2:	9b02      	ldr	r3, [sp, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f300 80d7 	bgt.w	8007ca8 <_dtoa_r+0x658>
 8007afa:	f040 8274 	bne.w	8007fe6 <_dtoa_r+0x996>
 8007afe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b02:	2200      	movs	r2, #0
 8007b04:	4b40      	ldr	r3, [pc, #256]	; (8007c08 <_dtoa_r+0x5b8>)
 8007b06:	f7f8 fce7 	bl	80004d8 <__aeabi_dmul>
 8007b0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b0e:	f7f8 ff69 	bl	80009e4 <__aeabi_dcmpge>
 8007b12:	9c02      	ldr	r4, [sp, #8]
 8007b14:	4626      	mov	r6, r4
 8007b16:	2800      	cmp	r0, #0
 8007b18:	f040 824a 	bne.w	8007fb0 <_dtoa_r+0x960>
 8007b1c:	2331      	movs	r3, #49	; 0x31
 8007b1e:	9f08      	ldr	r7, [sp, #32]
 8007b20:	f109 0901 	add.w	r9, r9, #1
 8007b24:	f807 3b01 	strb.w	r3, [r7], #1
 8007b28:	e246      	b.n	8007fb8 <_dtoa_r+0x968>
 8007b2a:	07e2      	lsls	r2, r4, #31
 8007b2c:	d505      	bpl.n	8007b3a <_dtoa_r+0x4ea>
 8007b2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b32:	f7f8 fcd1 	bl	80004d8 <__aeabi_dmul>
 8007b36:	2301      	movs	r3, #1
 8007b38:	3701      	adds	r7, #1
 8007b3a:	1064      	asrs	r4, r4, #1
 8007b3c:	3608      	adds	r6, #8
 8007b3e:	e76d      	b.n	8007a1c <_dtoa_r+0x3cc>
 8007b40:	2702      	movs	r7, #2
 8007b42:	e770      	b.n	8007a26 <_dtoa_r+0x3d6>
 8007b44:	46c8      	mov	r8, r9
 8007b46:	9c02      	ldr	r4, [sp, #8]
 8007b48:	e78f      	b.n	8007a6a <_dtoa_r+0x41a>
 8007b4a:	9908      	ldr	r1, [sp, #32]
 8007b4c:	4b29      	ldr	r3, [pc, #164]	; (8007bf4 <_dtoa_r+0x5a4>)
 8007b4e:	4421      	add	r1, r4
 8007b50:	9112      	str	r1, [sp, #72]	; 0x48
 8007b52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b58:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007b5c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b60:	2900      	cmp	r1, #0
 8007b62:	d055      	beq.n	8007c10 <_dtoa_r+0x5c0>
 8007b64:	2000      	movs	r0, #0
 8007b66:	4929      	ldr	r1, [pc, #164]	; (8007c0c <_dtoa_r+0x5bc>)
 8007b68:	f7f8 fde0 	bl	800072c <__aeabi_ddiv>
 8007b6c:	463b      	mov	r3, r7
 8007b6e:	4632      	mov	r2, r6
 8007b70:	f7f8 fafa 	bl	8000168 <__aeabi_dsub>
 8007b74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b78:	9f08      	ldr	r7, [sp, #32]
 8007b7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b7e:	f7f8 ff5b 	bl	8000a38 <__aeabi_d2iz>
 8007b82:	4604      	mov	r4, r0
 8007b84:	f7f8 fc3e 	bl	8000404 <__aeabi_i2d>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b90:	f7f8 faea 	bl	8000168 <__aeabi_dsub>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	3430      	adds	r4, #48	; 0x30
 8007b9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ba2:	f807 4b01 	strb.w	r4, [r7], #1
 8007ba6:	f7f8 ff09 	bl	80009bc <__aeabi_dcmplt>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d174      	bne.n	8007c98 <_dtoa_r+0x648>
 8007bae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	4911      	ldr	r1, [pc, #68]	; (8007bfc <_dtoa_r+0x5ac>)
 8007bb6:	f7f8 fad7 	bl	8000168 <__aeabi_dsub>
 8007bba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007bbe:	f7f8 fefd 	bl	80009bc <__aeabi_dcmplt>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	f040 80b6 	bne.w	8007d34 <_dtoa_r+0x6e4>
 8007bc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bca:	429f      	cmp	r7, r3
 8007bcc:	f43f af7a 	beq.w	8007ac4 <_dtoa_r+0x474>
 8007bd0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	4b0a      	ldr	r3, [pc, #40]	; (8007c00 <_dtoa_r+0x5b0>)
 8007bd8:	f7f8 fc7e 	bl	80004d8 <__aeabi_dmul>
 8007bdc:	2200      	movs	r2, #0
 8007bde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007be2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007be6:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <_dtoa_r+0x5b0>)
 8007be8:	f7f8 fc76 	bl	80004d8 <__aeabi_dmul>
 8007bec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bf0:	e7c3      	b.n	8007b7a <_dtoa_r+0x52a>
 8007bf2:	bf00      	nop
 8007bf4:	08009808 	.word	0x08009808
 8007bf8:	080097e0 	.word	0x080097e0
 8007bfc:	3ff00000 	.word	0x3ff00000
 8007c00:	40240000 	.word	0x40240000
 8007c04:	401c0000 	.word	0x401c0000
 8007c08:	40140000 	.word	0x40140000
 8007c0c:	3fe00000 	.word	0x3fe00000
 8007c10:	4630      	mov	r0, r6
 8007c12:	4639      	mov	r1, r7
 8007c14:	f7f8 fc60 	bl	80004d8 <__aeabi_dmul>
 8007c18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c1e:	9c08      	ldr	r4, [sp, #32]
 8007c20:	9314      	str	r3, [sp, #80]	; 0x50
 8007c22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c26:	f7f8 ff07 	bl	8000a38 <__aeabi_d2iz>
 8007c2a:	9015      	str	r0, [sp, #84]	; 0x54
 8007c2c:	f7f8 fbea 	bl	8000404 <__aeabi_i2d>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c38:	f7f8 fa96 	bl	8000168 <__aeabi_dsub>
 8007c3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c3e:	4606      	mov	r6, r0
 8007c40:	3330      	adds	r3, #48	; 0x30
 8007c42:	f804 3b01 	strb.w	r3, [r4], #1
 8007c46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c48:	460f      	mov	r7, r1
 8007c4a:	429c      	cmp	r4, r3
 8007c4c:	f04f 0200 	mov.w	r2, #0
 8007c50:	d124      	bne.n	8007c9c <_dtoa_r+0x64c>
 8007c52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c56:	4bb3      	ldr	r3, [pc, #716]	; (8007f24 <_dtoa_r+0x8d4>)
 8007c58:	f7f8 fa88 	bl	800016c <__adddf3>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	4630      	mov	r0, r6
 8007c62:	4639      	mov	r1, r7
 8007c64:	f7f8 fec8 	bl	80009f8 <__aeabi_dcmpgt>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	d162      	bne.n	8007d32 <_dtoa_r+0x6e2>
 8007c6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c70:	2000      	movs	r0, #0
 8007c72:	49ac      	ldr	r1, [pc, #688]	; (8007f24 <_dtoa_r+0x8d4>)
 8007c74:	f7f8 fa78 	bl	8000168 <__aeabi_dsub>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	4639      	mov	r1, r7
 8007c80:	f7f8 fe9c 	bl	80009bc <__aeabi_dcmplt>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	f43f af1d 	beq.w	8007ac4 <_dtoa_r+0x474>
 8007c8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007c8c:	1e7b      	subs	r3, r7, #1
 8007c8e:	9314      	str	r3, [sp, #80]	; 0x50
 8007c90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007c94:	2b30      	cmp	r3, #48	; 0x30
 8007c96:	d0f8      	beq.n	8007c8a <_dtoa_r+0x63a>
 8007c98:	46c1      	mov	r9, r8
 8007c9a:	e03a      	b.n	8007d12 <_dtoa_r+0x6c2>
 8007c9c:	4ba2      	ldr	r3, [pc, #648]	; (8007f28 <_dtoa_r+0x8d8>)
 8007c9e:	f7f8 fc1b 	bl	80004d8 <__aeabi_dmul>
 8007ca2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ca6:	e7bc      	b.n	8007c22 <_dtoa_r+0x5d2>
 8007ca8:	9f08      	ldr	r7, [sp, #32]
 8007caa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cb2:	f7f8 fd3b 	bl	800072c <__aeabi_ddiv>
 8007cb6:	f7f8 febf 	bl	8000a38 <__aeabi_d2iz>
 8007cba:	4604      	mov	r4, r0
 8007cbc:	f7f8 fba2 	bl	8000404 <__aeabi_i2d>
 8007cc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cc4:	f7f8 fc08 	bl	80004d8 <__aeabi_dmul>
 8007cc8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4602      	mov	r2, r0
 8007cd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cd4:	f7f8 fa48 	bl	8000168 <__aeabi_dsub>
 8007cd8:	f807 6b01 	strb.w	r6, [r7], #1
 8007cdc:	9e08      	ldr	r6, [sp, #32]
 8007cde:	9b02      	ldr	r3, [sp, #8]
 8007ce0:	1bbe      	subs	r6, r7, r6
 8007ce2:	42b3      	cmp	r3, r6
 8007ce4:	d13a      	bne.n	8007d5c <_dtoa_r+0x70c>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	f7f8 fa3f 	bl	800016c <__adddf3>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cfa:	f7f8 fe7d 	bl	80009f8 <__aeabi_dcmpgt>
 8007cfe:	bb58      	cbnz	r0, 8007d58 <_dtoa_r+0x708>
 8007d00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d08:	f7f8 fe4e 	bl	80009a8 <__aeabi_dcmpeq>
 8007d0c:	b108      	cbz	r0, 8007d12 <_dtoa_r+0x6c2>
 8007d0e:	07e1      	lsls	r1, r4, #31
 8007d10:	d422      	bmi.n	8007d58 <_dtoa_r+0x708>
 8007d12:	4628      	mov	r0, r5
 8007d14:	4651      	mov	r1, sl
 8007d16:	f000 fbc3 	bl	80084a0 <_Bfree>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	703b      	strb	r3, [r7, #0]
 8007d1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007d20:	f109 0001 	add.w	r0, r9, #1
 8007d24:	6018      	str	r0, [r3, #0]
 8007d26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f43f acdf 	beq.w	80076ec <_dtoa_r+0x9c>
 8007d2e:	601f      	str	r7, [r3, #0]
 8007d30:	e4dc      	b.n	80076ec <_dtoa_r+0x9c>
 8007d32:	4627      	mov	r7, r4
 8007d34:	463b      	mov	r3, r7
 8007d36:	461f      	mov	r7, r3
 8007d38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d3c:	2a39      	cmp	r2, #57	; 0x39
 8007d3e:	d107      	bne.n	8007d50 <_dtoa_r+0x700>
 8007d40:	9a08      	ldr	r2, [sp, #32]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d1f7      	bne.n	8007d36 <_dtoa_r+0x6e6>
 8007d46:	2230      	movs	r2, #48	; 0x30
 8007d48:	9908      	ldr	r1, [sp, #32]
 8007d4a:	f108 0801 	add.w	r8, r8, #1
 8007d4e:	700a      	strb	r2, [r1, #0]
 8007d50:	781a      	ldrb	r2, [r3, #0]
 8007d52:	3201      	adds	r2, #1
 8007d54:	701a      	strb	r2, [r3, #0]
 8007d56:	e79f      	b.n	8007c98 <_dtoa_r+0x648>
 8007d58:	46c8      	mov	r8, r9
 8007d5a:	e7eb      	b.n	8007d34 <_dtoa_r+0x6e4>
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	4b72      	ldr	r3, [pc, #456]	; (8007f28 <_dtoa_r+0x8d8>)
 8007d60:	f7f8 fbba 	bl	80004d8 <__aeabi_dmul>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f7f8 fe1a 	bl	80009a8 <__aeabi_dcmpeq>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d098      	beq.n	8007caa <_dtoa_r+0x65a>
 8007d78:	e7cb      	b.n	8007d12 <_dtoa_r+0x6c2>
 8007d7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d7c:	2a00      	cmp	r2, #0
 8007d7e:	f000 80cd 	beq.w	8007f1c <_dtoa_r+0x8cc>
 8007d82:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007d84:	2a01      	cmp	r2, #1
 8007d86:	f300 80af 	bgt.w	8007ee8 <_dtoa_r+0x898>
 8007d8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d8c:	2a00      	cmp	r2, #0
 8007d8e:	f000 80a7 	beq.w	8007ee0 <_dtoa_r+0x890>
 8007d92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d98:	9f06      	ldr	r7, [sp, #24]
 8007d9a:	9a06      	ldr	r2, [sp, #24]
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	441a      	add	r2, r3
 8007da0:	9206      	str	r2, [sp, #24]
 8007da2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007da4:	4628      	mov	r0, r5
 8007da6:	441a      	add	r2, r3
 8007da8:	9209      	str	r2, [sp, #36]	; 0x24
 8007daa:	f000 fc33 	bl	8008614 <__i2b>
 8007dae:	4606      	mov	r6, r0
 8007db0:	2f00      	cmp	r7, #0
 8007db2:	dd0c      	ble.n	8007dce <_dtoa_r+0x77e>
 8007db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	dd09      	ble.n	8007dce <_dtoa_r+0x77e>
 8007dba:	42bb      	cmp	r3, r7
 8007dbc:	bfa8      	it	ge
 8007dbe:	463b      	movge	r3, r7
 8007dc0:	9a06      	ldr	r2, [sp, #24]
 8007dc2:	1aff      	subs	r7, r7, r3
 8007dc4:	1ad2      	subs	r2, r2, r3
 8007dc6:	9206      	str	r2, [sp, #24]
 8007dc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8007dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd0:	b1f3      	cbz	r3, 8007e10 <_dtoa_r+0x7c0>
 8007dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 80a9 	beq.w	8007f2c <_dtoa_r+0x8dc>
 8007dda:	2c00      	cmp	r4, #0
 8007ddc:	dd10      	ble.n	8007e00 <_dtoa_r+0x7b0>
 8007dde:	4631      	mov	r1, r6
 8007de0:	4622      	mov	r2, r4
 8007de2:	4628      	mov	r0, r5
 8007de4:	f000 fcd0 	bl	8008788 <__pow5mult>
 8007de8:	4652      	mov	r2, sl
 8007dea:	4601      	mov	r1, r0
 8007dec:	4606      	mov	r6, r0
 8007dee:	4628      	mov	r0, r5
 8007df0:	f000 fc26 	bl	8008640 <__multiply>
 8007df4:	4680      	mov	r8, r0
 8007df6:	4651      	mov	r1, sl
 8007df8:	4628      	mov	r0, r5
 8007dfa:	f000 fb51 	bl	80084a0 <_Bfree>
 8007dfe:	46c2      	mov	sl, r8
 8007e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e02:	1b1a      	subs	r2, r3, r4
 8007e04:	d004      	beq.n	8007e10 <_dtoa_r+0x7c0>
 8007e06:	4651      	mov	r1, sl
 8007e08:	4628      	mov	r0, r5
 8007e0a:	f000 fcbd 	bl	8008788 <__pow5mult>
 8007e0e:	4682      	mov	sl, r0
 8007e10:	2101      	movs	r1, #1
 8007e12:	4628      	mov	r0, r5
 8007e14:	f000 fbfe 	bl	8008614 <__i2b>
 8007e18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f340 8087 	ble.w	8007f30 <_dtoa_r+0x8e0>
 8007e22:	461a      	mov	r2, r3
 8007e24:	4601      	mov	r1, r0
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 fcae 	bl	8008788 <__pow5mult>
 8007e2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e2e:	4604      	mov	r4, r0
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	f340 8080 	ble.w	8007f36 <_dtoa_r+0x8e6>
 8007e36:	f04f 0800 	mov.w	r8, #0
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e40:	6918      	ldr	r0, [r3, #16]
 8007e42:	f000 fb99 	bl	8008578 <__hi0bits>
 8007e46:	f1c0 0020 	rsb	r0, r0, #32
 8007e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e4c:	4418      	add	r0, r3
 8007e4e:	f010 001f 	ands.w	r0, r0, #31
 8007e52:	f000 8092 	beq.w	8007f7a <_dtoa_r+0x92a>
 8007e56:	f1c0 0320 	rsb	r3, r0, #32
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	f340 808a 	ble.w	8007f74 <_dtoa_r+0x924>
 8007e60:	f1c0 001c 	rsb	r0, r0, #28
 8007e64:	9b06      	ldr	r3, [sp, #24]
 8007e66:	4407      	add	r7, r0
 8007e68:	4403      	add	r3, r0
 8007e6a:	9306      	str	r3, [sp, #24]
 8007e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e6e:	4403      	add	r3, r0
 8007e70:	9309      	str	r3, [sp, #36]	; 0x24
 8007e72:	9b06      	ldr	r3, [sp, #24]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	dd05      	ble.n	8007e84 <_dtoa_r+0x834>
 8007e78:	4651      	mov	r1, sl
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	f000 fcdd 	bl	800883c <__lshift>
 8007e82:	4682      	mov	sl, r0
 8007e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	dd05      	ble.n	8007e96 <_dtoa_r+0x846>
 8007e8a:	4621      	mov	r1, r4
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	4628      	mov	r0, r5
 8007e90:	f000 fcd4 	bl	800883c <__lshift>
 8007e94:	4604      	mov	r4, r0
 8007e96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d070      	beq.n	8007f7e <_dtoa_r+0x92e>
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	4650      	mov	r0, sl
 8007ea0:	f000 fd38 	bl	8008914 <__mcmp>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	da6a      	bge.n	8007f7e <_dtoa_r+0x92e>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	4651      	mov	r1, sl
 8007eac:	220a      	movs	r2, #10
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f000 fb18 	bl	80084e4 <__multadd>
 8007eb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eb6:	4682      	mov	sl, r0
 8007eb8:	f109 39ff 	add.w	r9, r9, #4294967295
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 8193 	beq.w	80081e8 <_dtoa_r+0xb98>
 8007ec2:	4631      	mov	r1, r6
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	220a      	movs	r2, #10
 8007ec8:	4628      	mov	r0, r5
 8007eca:	f000 fb0b 	bl	80084e4 <__multadd>
 8007ece:	f1bb 0f00 	cmp.w	fp, #0
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	f300 8093 	bgt.w	8007ffe <_dtoa_r+0x9ae>
 8007ed8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	dc57      	bgt.n	8007f8e <_dtoa_r+0x93e>
 8007ede:	e08e      	b.n	8007ffe <_dtoa_r+0x9ae>
 8007ee0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ee2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ee6:	e756      	b.n	8007d96 <_dtoa_r+0x746>
 8007ee8:	9b02      	ldr	r3, [sp, #8]
 8007eea:	1e5c      	subs	r4, r3, #1
 8007eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eee:	42a3      	cmp	r3, r4
 8007ef0:	bfb7      	itett	lt
 8007ef2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007ef4:	1b1c      	subge	r4, r3, r4
 8007ef6:	1ae2      	sublt	r2, r4, r3
 8007ef8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007efa:	bfbe      	ittt	lt
 8007efc:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007efe:	189b      	addlt	r3, r3, r2
 8007f00:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007f02:	9b02      	ldr	r3, [sp, #8]
 8007f04:	bfb8      	it	lt
 8007f06:	2400      	movlt	r4, #0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bfbb      	ittet	lt
 8007f0c:	9b06      	ldrlt	r3, [sp, #24]
 8007f0e:	9a02      	ldrlt	r2, [sp, #8]
 8007f10:	9f06      	ldrge	r7, [sp, #24]
 8007f12:	1a9f      	sublt	r7, r3, r2
 8007f14:	bfac      	ite	ge
 8007f16:	9b02      	ldrge	r3, [sp, #8]
 8007f18:	2300      	movlt	r3, #0
 8007f1a:	e73e      	b.n	8007d9a <_dtoa_r+0x74a>
 8007f1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f1e:	9f06      	ldr	r7, [sp, #24]
 8007f20:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007f22:	e745      	b.n	8007db0 <_dtoa_r+0x760>
 8007f24:	3fe00000 	.word	0x3fe00000
 8007f28:	40240000 	.word	0x40240000
 8007f2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f2e:	e76a      	b.n	8007e06 <_dtoa_r+0x7b6>
 8007f30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	dc19      	bgt.n	8007f6a <_dtoa_r+0x91a>
 8007f36:	9b04      	ldr	r3, [sp, #16]
 8007f38:	b9bb      	cbnz	r3, 8007f6a <_dtoa_r+0x91a>
 8007f3a:	9b05      	ldr	r3, [sp, #20]
 8007f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f40:	b99b      	cbnz	r3, 8007f6a <_dtoa_r+0x91a>
 8007f42:	9b05      	ldr	r3, [sp, #20]
 8007f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f48:	0d1b      	lsrs	r3, r3, #20
 8007f4a:	051b      	lsls	r3, r3, #20
 8007f4c:	b183      	cbz	r3, 8007f70 <_dtoa_r+0x920>
 8007f4e:	f04f 0801 	mov.w	r8, #1
 8007f52:	9b06      	ldr	r3, [sp, #24]
 8007f54:	3301      	adds	r3, #1
 8007f56:	9306      	str	r3, [sp, #24]
 8007f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f47f af6a 	bne.w	8007e3a <_dtoa_r+0x7ea>
 8007f66:	2001      	movs	r0, #1
 8007f68:	e76f      	b.n	8007e4a <_dtoa_r+0x7fa>
 8007f6a:	f04f 0800 	mov.w	r8, #0
 8007f6e:	e7f6      	b.n	8007f5e <_dtoa_r+0x90e>
 8007f70:	4698      	mov	r8, r3
 8007f72:	e7f4      	b.n	8007f5e <_dtoa_r+0x90e>
 8007f74:	f43f af7d 	beq.w	8007e72 <_dtoa_r+0x822>
 8007f78:	4618      	mov	r0, r3
 8007f7a:	301c      	adds	r0, #28
 8007f7c:	e772      	b.n	8007e64 <_dtoa_r+0x814>
 8007f7e:	9b02      	ldr	r3, [sp, #8]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	dc36      	bgt.n	8007ff2 <_dtoa_r+0x9a2>
 8007f84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	dd33      	ble.n	8007ff2 <_dtoa_r+0x9a2>
 8007f8a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007f8e:	f1bb 0f00 	cmp.w	fp, #0
 8007f92:	d10d      	bne.n	8007fb0 <_dtoa_r+0x960>
 8007f94:	4621      	mov	r1, r4
 8007f96:	465b      	mov	r3, fp
 8007f98:	2205      	movs	r2, #5
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f000 faa2 	bl	80084e4 <__multadd>
 8007fa0:	4601      	mov	r1, r0
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	4650      	mov	r0, sl
 8007fa6:	f000 fcb5 	bl	8008914 <__mcmp>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	f73f adb6 	bgt.w	8007b1c <_dtoa_r+0x4cc>
 8007fb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fb2:	9f08      	ldr	r7, [sp, #32]
 8007fb4:	ea6f 0903 	mvn.w	r9, r3
 8007fb8:	f04f 0800 	mov.w	r8, #0
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	f000 fa6e 	bl	80084a0 <_Bfree>
 8007fc4:	2e00      	cmp	r6, #0
 8007fc6:	f43f aea4 	beq.w	8007d12 <_dtoa_r+0x6c2>
 8007fca:	f1b8 0f00 	cmp.w	r8, #0
 8007fce:	d005      	beq.n	8007fdc <_dtoa_r+0x98c>
 8007fd0:	45b0      	cmp	r8, r6
 8007fd2:	d003      	beq.n	8007fdc <_dtoa_r+0x98c>
 8007fd4:	4641      	mov	r1, r8
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f000 fa62 	bl	80084a0 <_Bfree>
 8007fdc:	4631      	mov	r1, r6
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f000 fa5e 	bl	80084a0 <_Bfree>
 8007fe4:	e695      	b.n	8007d12 <_dtoa_r+0x6c2>
 8007fe6:	2400      	movs	r4, #0
 8007fe8:	4626      	mov	r6, r4
 8007fea:	e7e1      	b.n	8007fb0 <_dtoa_r+0x960>
 8007fec:	46c1      	mov	r9, r8
 8007fee:	4626      	mov	r6, r4
 8007ff0:	e594      	b.n	8007b1c <_dtoa_r+0x4cc>
 8007ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ff4:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f000 80fc 	beq.w	80081f6 <_dtoa_r+0xba6>
 8007ffe:	2f00      	cmp	r7, #0
 8008000:	dd05      	ble.n	800800e <_dtoa_r+0x9be>
 8008002:	4631      	mov	r1, r6
 8008004:	463a      	mov	r2, r7
 8008006:	4628      	mov	r0, r5
 8008008:	f000 fc18 	bl	800883c <__lshift>
 800800c:	4606      	mov	r6, r0
 800800e:	f1b8 0f00 	cmp.w	r8, #0
 8008012:	d05c      	beq.n	80080ce <_dtoa_r+0xa7e>
 8008014:	4628      	mov	r0, r5
 8008016:	6871      	ldr	r1, [r6, #4]
 8008018:	f000 fa02 	bl	8008420 <_Balloc>
 800801c:	4607      	mov	r7, r0
 800801e:	b928      	cbnz	r0, 800802c <_dtoa_r+0x9dc>
 8008020:	4602      	mov	r2, r0
 8008022:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008026:	4b7e      	ldr	r3, [pc, #504]	; (8008220 <_dtoa_r+0xbd0>)
 8008028:	f7ff bb26 	b.w	8007678 <_dtoa_r+0x28>
 800802c:	6932      	ldr	r2, [r6, #16]
 800802e:	f106 010c 	add.w	r1, r6, #12
 8008032:	3202      	adds	r2, #2
 8008034:	0092      	lsls	r2, r2, #2
 8008036:	300c      	adds	r0, #12
 8008038:	f7fe fcab 	bl	8006992 <memcpy>
 800803c:	2201      	movs	r2, #1
 800803e:	4639      	mov	r1, r7
 8008040:	4628      	mov	r0, r5
 8008042:	f000 fbfb 	bl	800883c <__lshift>
 8008046:	46b0      	mov	r8, r6
 8008048:	4606      	mov	r6, r0
 800804a:	9b08      	ldr	r3, [sp, #32]
 800804c:	3301      	adds	r3, #1
 800804e:	9302      	str	r3, [sp, #8]
 8008050:	9b08      	ldr	r3, [sp, #32]
 8008052:	445b      	add	r3, fp
 8008054:	930a      	str	r3, [sp, #40]	; 0x28
 8008056:	9b04      	ldr	r3, [sp, #16]
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	9309      	str	r3, [sp, #36]	; 0x24
 800805e:	9b02      	ldr	r3, [sp, #8]
 8008060:	4621      	mov	r1, r4
 8008062:	4650      	mov	r0, sl
 8008064:	f103 3bff 	add.w	fp, r3, #4294967295
 8008068:	f7ff fa64 	bl	8007534 <quorem>
 800806c:	4603      	mov	r3, r0
 800806e:	4641      	mov	r1, r8
 8008070:	3330      	adds	r3, #48	; 0x30
 8008072:	9004      	str	r0, [sp, #16]
 8008074:	4650      	mov	r0, sl
 8008076:	930b      	str	r3, [sp, #44]	; 0x2c
 8008078:	f000 fc4c 	bl	8008914 <__mcmp>
 800807c:	4632      	mov	r2, r6
 800807e:	9006      	str	r0, [sp, #24]
 8008080:	4621      	mov	r1, r4
 8008082:	4628      	mov	r0, r5
 8008084:	f000 fc62 	bl	800894c <__mdiff>
 8008088:	68c2      	ldr	r2, [r0, #12]
 800808a:	4607      	mov	r7, r0
 800808c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800808e:	bb02      	cbnz	r2, 80080d2 <_dtoa_r+0xa82>
 8008090:	4601      	mov	r1, r0
 8008092:	4650      	mov	r0, sl
 8008094:	f000 fc3e 	bl	8008914 <__mcmp>
 8008098:	4602      	mov	r2, r0
 800809a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800809c:	4639      	mov	r1, r7
 800809e:	4628      	mov	r0, r5
 80080a0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80080a4:	f000 f9fc 	bl	80084a0 <_Bfree>
 80080a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080ac:	9f02      	ldr	r7, [sp, #8]
 80080ae:	ea43 0102 	orr.w	r1, r3, r2
 80080b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b4:	430b      	orrs	r3, r1
 80080b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080b8:	d10d      	bne.n	80080d6 <_dtoa_r+0xa86>
 80080ba:	2b39      	cmp	r3, #57	; 0x39
 80080bc:	d027      	beq.n	800810e <_dtoa_r+0xabe>
 80080be:	9a06      	ldr	r2, [sp, #24]
 80080c0:	2a00      	cmp	r2, #0
 80080c2:	dd01      	ble.n	80080c8 <_dtoa_r+0xa78>
 80080c4:	9b04      	ldr	r3, [sp, #16]
 80080c6:	3331      	adds	r3, #49	; 0x31
 80080c8:	f88b 3000 	strb.w	r3, [fp]
 80080cc:	e776      	b.n	8007fbc <_dtoa_r+0x96c>
 80080ce:	4630      	mov	r0, r6
 80080d0:	e7b9      	b.n	8008046 <_dtoa_r+0x9f6>
 80080d2:	2201      	movs	r2, #1
 80080d4:	e7e2      	b.n	800809c <_dtoa_r+0xa4c>
 80080d6:	9906      	ldr	r1, [sp, #24]
 80080d8:	2900      	cmp	r1, #0
 80080da:	db04      	blt.n	80080e6 <_dtoa_r+0xa96>
 80080dc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80080de:	4301      	orrs	r1, r0
 80080e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080e2:	4301      	orrs	r1, r0
 80080e4:	d120      	bne.n	8008128 <_dtoa_r+0xad8>
 80080e6:	2a00      	cmp	r2, #0
 80080e8:	ddee      	ble.n	80080c8 <_dtoa_r+0xa78>
 80080ea:	4651      	mov	r1, sl
 80080ec:	2201      	movs	r2, #1
 80080ee:	4628      	mov	r0, r5
 80080f0:	9302      	str	r3, [sp, #8]
 80080f2:	f000 fba3 	bl	800883c <__lshift>
 80080f6:	4621      	mov	r1, r4
 80080f8:	4682      	mov	sl, r0
 80080fa:	f000 fc0b 	bl	8008914 <__mcmp>
 80080fe:	2800      	cmp	r0, #0
 8008100:	9b02      	ldr	r3, [sp, #8]
 8008102:	dc02      	bgt.n	800810a <_dtoa_r+0xaba>
 8008104:	d1e0      	bne.n	80080c8 <_dtoa_r+0xa78>
 8008106:	07da      	lsls	r2, r3, #31
 8008108:	d5de      	bpl.n	80080c8 <_dtoa_r+0xa78>
 800810a:	2b39      	cmp	r3, #57	; 0x39
 800810c:	d1da      	bne.n	80080c4 <_dtoa_r+0xa74>
 800810e:	2339      	movs	r3, #57	; 0x39
 8008110:	f88b 3000 	strb.w	r3, [fp]
 8008114:	463b      	mov	r3, r7
 8008116:	461f      	mov	r7, r3
 8008118:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800811c:	3b01      	subs	r3, #1
 800811e:	2a39      	cmp	r2, #57	; 0x39
 8008120:	d050      	beq.n	80081c4 <_dtoa_r+0xb74>
 8008122:	3201      	adds	r2, #1
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	e749      	b.n	8007fbc <_dtoa_r+0x96c>
 8008128:	2a00      	cmp	r2, #0
 800812a:	dd03      	ble.n	8008134 <_dtoa_r+0xae4>
 800812c:	2b39      	cmp	r3, #57	; 0x39
 800812e:	d0ee      	beq.n	800810e <_dtoa_r+0xabe>
 8008130:	3301      	adds	r3, #1
 8008132:	e7c9      	b.n	80080c8 <_dtoa_r+0xa78>
 8008134:	9a02      	ldr	r2, [sp, #8]
 8008136:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008138:	f802 3c01 	strb.w	r3, [r2, #-1]
 800813c:	428a      	cmp	r2, r1
 800813e:	d02a      	beq.n	8008196 <_dtoa_r+0xb46>
 8008140:	4651      	mov	r1, sl
 8008142:	2300      	movs	r3, #0
 8008144:	220a      	movs	r2, #10
 8008146:	4628      	mov	r0, r5
 8008148:	f000 f9cc 	bl	80084e4 <__multadd>
 800814c:	45b0      	cmp	r8, r6
 800814e:	4682      	mov	sl, r0
 8008150:	f04f 0300 	mov.w	r3, #0
 8008154:	f04f 020a 	mov.w	r2, #10
 8008158:	4641      	mov	r1, r8
 800815a:	4628      	mov	r0, r5
 800815c:	d107      	bne.n	800816e <_dtoa_r+0xb1e>
 800815e:	f000 f9c1 	bl	80084e4 <__multadd>
 8008162:	4680      	mov	r8, r0
 8008164:	4606      	mov	r6, r0
 8008166:	9b02      	ldr	r3, [sp, #8]
 8008168:	3301      	adds	r3, #1
 800816a:	9302      	str	r3, [sp, #8]
 800816c:	e777      	b.n	800805e <_dtoa_r+0xa0e>
 800816e:	f000 f9b9 	bl	80084e4 <__multadd>
 8008172:	4631      	mov	r1, r6
 8008174:	4680      	mov	r8, r0
 8008176:	2300      	movs	r3, #0
 8008178:	220a      	movs	r2, #10
 800817a:	4628      	mov	r0, r5
 800817c:	f000 f9b2 	bl	80084e4 <__multadd>
 8008180:	4606      	mov	r6, r0
 8008182:	e7f0      	b.n	8008166 <_dtoa_r+0xb16>
 8008184:	f1bb 0f00 	cmp.w	fp, #0
 8008188:	bfcc      	ite	gt
 800818a:	465f      	movgt	r7, fp
 800818c:	2701      	movle	r7, #1
 800818e:	f04f 0800 	mov.w	r8, #0
 8008192:	9a08      	ldr	r2, [sp, #32]
 8008194:	4417      	add	r7, r2
 8008196:	4651      	mov	r1, sl
 8008198:	2201      	movs	r2, #1
 800819a:	4628      	mov	r0, r5
 800819c:	9302      	str	r3, [sp, #8]
 800819e:	f000 fb4d 	bl	800883c <__lshift>
 80081a2:	4621      	mov	r1, r4
 80081a4:	4682      	mov	sl, r0
 80081a6:	f000 fbb5 	bl	8008914 <__mcmp>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	dcb2      	bgt.n	8008114 <_dtoa_r+0xac4>
 80081ae:	d102      	bne.n	80081b6 <_dtoa_r+0xb66>
 80081b0:	9b02      	ldr	r3, [sp, #8]
 80081b2:	07db      	lsls	r3, r3, #31
 80081b4:	d4ae      	bmi.n	8008114 <_dtoa_r+0xac4>
 80081b6:	463b      	mov	r3, r7
 80081b8:	461f      	mov	r7, r3
 80081ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081be:	2a30      	cmp	r2, #48	; 0x30
 80081c0:	d0fa      	beq.n	80081b8 <_dtoa_r+0xb68>
 80081c2:	e6fb      	b.n	8007fbc <_dtoa_r+0x96c>
 80081c4:	9a08      	ldr	r2, [sp, #32]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d1a5      	bne.n	8008116 <_dtoa_r+0xac6>
 80081ca:	2331      	movs	r3, #49	; 0x31
 80081cc:	f109 0901 	add.w	r9, r9, #1
 80081d0:	7013      	strb	r3, [r2, #0]
 80081d2:	e6f3      	b.n	8007fbc <_dtoa_r+0x96c>
 80081d4:	4b13      	ldr	r3, [pc, #76]	; (8008224 <_dtoa_r+0xbd4>)
 80081d6:	f7ff baa7 	b.w	8007728 <_dtoa_r+0xd8>
 80081da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f47f aa80 	bne.w	80076e2 <_dtoa_r+0x92>
 80081e2:	4b11      	ldr	r3, [pc, #68]	; (8008228 <_dtoa_r+0xbd8>)
 80081e4:	f7ff baa0 	b.w	8007728 <_dtoa_r+0xd8>
 80081e8:	f1bb 0f00 	cmp.w	fp, #0
 80081ec:	dc03      	bgt.n	80081f6 <_dtoa_r+0xba6>
 80081ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	f73f aecc 	bgt.w	8007f8e <_dtoa_r+0x93e>
 80081f6:	9f08      	ldr	r7, [sp, #32]
 80081f8:	4621      	mov	r1, r4
 80081fa:	4650      	mov	r0, sl
 80081fc:	f7ff f99a 	bl	8007534 <quorem>
 8008200:	9a08      	ldr	r2, [sp, #32]
 8008202:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008206:	f807 3b01 	strb.w	r3, [r7], #1
 800820a:	1aba      	subs	r2, r7, r2
 800820c:	4593      	cmp	fp, r2
 800820e:	ddb9      	ble.n	8008184 <_dtoa_r+0xb34>
 8008210:	4651      	mov	r1, sl
 8008212:	2300      	movs	r3, #0
 8008214:	220a      	movs	r2, #10
 8008216:	4628      	mov	r0, r5
 8008218:	f000 f964 	bl	80084e4 <__multadd>
 800821c:	4682      	mov	sl, r0
 800821e:	e7eb      	b.n	80081f8 <_dtoa_r+0xba8>
 8008220:	0800976b 	.word	0x0800976b
 8008224:	080096c4 	.word	0x080096c4
 8008228:	080096e8 	.word	0x080096e8

0800822c <__sflush_r>:
 800822c:	898a      	ldrh	r2, [r1, #12]
 800822e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008232:	4605      	mov	r5, r0
 8008234:	0710      	lsls	r0, r2, #28
 8008236:	460c      	mov	r4, r1
 8008238:	d458      	bmi.n	80082ec <__sflush_r+0xc0>
 800823a:	684b      	ldr	r3, [r1, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	dc05      	bgt.n	800824c <__sflush_r+0x20>
 8008240:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008242:	2b00      	cmp	r3, #0
 8008244:	dc02      	bgt.n	800824c <__sflush_r+0x20>
 8008246:	2000      	movs	r0, #0
 8008248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800824c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800824e:	2e00      	cmp	r6, #0
 8008250:	d0f9      	beq.n	8008246 <__sflush_r+0x1a>
 8008252:	2300      	movs	r3, #0
 8008254:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008258:	682f      	ldr	r7, [r5, #0]
 800825a:	602b      	str	r3, [r5, #0]
 800825c:	d032      	beq.n	80082c4 <__sflush_r+0x98>
 800825e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	075a      	lsls	r2, r3, #29
 8008264:	d505      	bpl.n	8008272 <__sflush_r+0x46>
 8008266:	6863      	ldr	r3, [r4, #4]
 8008268:	1ac0      	subs	r0, r0, r3
 800826a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800826c:	b10b      	cbz	r3, 8008272 <__sflush_r+0x46>
 800826e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008270:	1ac0      	subs	r0, r0, r3
 8008272:	2300      	movs	r3, #0
 8008274:	4602      	mov	r2, r0
 8008276:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008278:	4628      	mov	r0, r5
 800827a:	6a21      	ldr	r1, [r4, #32]
 800827c:	47b0      	blx	r6
 800827e:	1c43      	adds	r3, r0, #1
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	d106      	bne.n	8008292 <__sflush_r+0x66>
 8008284:	6829      	ldr	r1, [r5, #0]
 8008286:	291d      	cmp	r1, #29
 8008288:	d82c      	bhi.n	80082e4 <__sflush_r+0xb8>
 800828a:	4a2a      	ldr	r2, [pc, #168]	; (8008334 <__sflush_r+0x108>)
 800828c:	40ca      	lsrs	r2, r1
 800828e:	07d6      	lsls	r6, r2, #31
 8008290:	d528      	bpl.n	80082e4 <__sflush_r+0xb8>
 8008292:	2200      	movs	r2, #0
 8008294:	6062      	str	r2, [r4, #4]
 8008296:	6922      	ldr	r2, [r4, #16]
 8008298:	04d9      	lsls	r1, r3, #19
 800829a:	6022      	str	r2, [r4, #0]
 800829c:	d504      	bpl.n	80082a8 <__sflush_r+0x7c>
 800829e:	1c42      	adds	r2, r0, #1
 80082a0:	d101      	bne.n	80082a6 <__sflush_r+0x7a>
 80082a2:	682b      	ldr	r3, [r5, #0]
 80082a4:	b903      	cbnz	r3, 80082a8 <__sflush_r+0x7c>
 80082a6:	6560      	str	r0, [r4, #84]	; 0x54
 80082a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082aa:	602f      	str	r7, [r5, #0]
 80082ac:	2900      	cmp	r1, #0
 80082ae:	d0ca      	beq.n	8008246 <__sflush_r+0x1a>
 80082b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082b4:	4299      	cmp	r1, r3
 80082b6:	d002      	beq.n	80082be <__sflush_r+0x92>
 80082b8:	4628      	mov	r0, r5
 80082ba:	f000 fc41 	bl	8008b40 <_free_r>
 80082be:	2000      	movs	r0, #0
 80082c0:	6360      	str	r0, [r4, #52]	; 0x34
 80082c2:	e7c1      	b.n	8008248 <__sflush_r+0x1c>
 80082c4:	6a21      	ldr	r1, [r4, #32]
 80082c6:	2301      	movs	r3, #1
 80082c8:	4628      	mov	r0, r5
 80082ca:	47b0      	blx	r6
 80082cc:	1c41      	adds	r1, r0, #1
 80082ce:	d1c7      	bne.n	8008260 <__sflush_r+0x34>
 80082d0:	682b      	ldr	r3, [r5, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d0c4      	beq.n	8008260 <__sflush_r+0x34>
 80082d6:	2b1d      	cmp	r3, #29
 80082d8:	d001      	beq.n	80082de <__sflush_r+0xb2>
 80082da:	2b16      	cmp	r3, #22
 80082dc:	d101      	bne.n	80082e2 <__sflush_r+0xb6>
 80082de:	602f      	str	r7, [r5, #0]
 80082e0:	e7b1      	b.n	8008246 <__sflush_r+0x1a>
 80082e2:	89a3      	ldrh	r3, [r4, #12]
 80082e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082e8:	81a3      	strh	r3, [r4, #12]
 80082ea:	e7ad      	b.n	8008248 <__sflush_r+0x1c>
 80082ec:	690f      	ldr	r7, [r1, #16]
 80082ee:	2f00      	cmp	r7, #0
 80082f0:	d0a9      	beq.n	8008246 <__sflush_r+0x1a>
 80082f2:	0793      	lsls	r3, r2, #30
 80082f4:	bf18      	it	ne
 80082f6:	2300      	movne	r3, #0
 80082f8:	680e      	ldr	r6, [r1, #0]
 80082fa:	bf08      	it	eq
 80082fc:	694b      	ldreq	r3, [r1, #20]
 80082fe:	eba6 0807 	sub.w	r8, r6, r7
 8008302:	600f      	str	r7, [r1, #0]
 8008304:	608b      	str	r3, [r1, #8]
 8008306:	f1b8 0f00 	cmp.w	r8, #0
 800830a:	dd9c      	ble.n	8008246 <__sflush_r+0x1a>
 800830c:	4643      	mov	r3, r8
 800830e:	463a      	mov	r2, r7
 8008310:	4628      	mov	r0, r5
 8008312:	6a21      	ldr	r1, [r4, #32]
 8008314:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008316:	47b0      	blx	r6
 8008318:	2800      	cmp	r0, #0
 800831a:	dc06      	bgt.n	800832a <__sflush_r+0xfe>
 800831c:	89a3      	ldrh	r3, [r4, #12]
 800831e:	f04f 30ff 	mov.w	r0, #4294967295
 8008322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008326:	81a3      	strh	r3, [r4, #12]
 8008328:	e78e      	b.n	8008248 <__sflush_r+0x1c>
 800832a:	4407      	add	r7, r0
 800832c:	eba8 0800 	sub.w	r8, r8, r0
 8008330:	e7e9      	b.n	8008306 <__sflush_r+0xda>
 8008332:	bf00      	nop
 8008334:	20400001 	.word	0x20400001

08008338 <_fflush_r>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	690b      	ldr	r3, [r1, #16]
 800833c:	4605      	mov	r5, r0
 800833e:	460c      	mov	r4, r1
 8008340:	b913      	cbnz	r3, 8008348 <_fflush_r+0x10>
 8008342:	2500      	movs	r5, #0
 8008344:	4628      	mov	r0, r5
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	b118      	cbz	r0, 8008352 <_fflush_r+0x1a>
 800834a:	6983      	ldr	r3, [r0, #24]
 800834c:	b90b      	cbnz	r3, 8008352 <_fflush_r+0x1a>
 800834e:	f7fe fa5b 	bl	8006808 <__sinit>
 8008352:	4b14      	ldr	r3, [pc, #80]	; (80083a4 <_fflush_r+0x6c>)
 8008354:	429c      	cmp	r4, r3
 8008356:	d11b      	bne.n	8008390 <_fflush_r+0x58>
 8008358:	686c      	ldr	r4, [r5, #4]
 800835a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0ef      	beq.n	8008342 <_fflush_r+0xa>
 8008362:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008364:	07d0      	lsls	r0, r2, #31
 8008366:	d404      	bmi.n	8008372 <_fflush_r+0x3a>
 8008368:	0599      	lsls	r1, r3, #22
 800836a:	d402      	bmi.n	8008372 <_fflush_r+0x3a>
 800836c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800836e:	f7fe fb0e 	bl	800698e <__retarget_lock_acquire_recursive>
 8008372:	4628      	mov	r0, r5
 8008374:	4621      	mov	r1, r4
 8008376:	f7ff ff59 	bl	800822c <__sflush_r>
 800837a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800837c:	4605      	mov	r5, r0
 800837e:	07da      	lsls	r2, r3, #31
 8008380:	d4e0      	bmi.n	8008344 <_fflush_r+0xc>
 8008382:	89a3      	ldrh	r3, [r4, #12]
 8008384:	059b      	lsls	r3, r3, #22
 8008386:	d4dd      	bmi.n	8008344 <_fflush_r+0xc>
 8008388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800838a:	f7fe fb01 	bl	8006990 <__retarget_lock_release_recursive>
 800838e:	e7d9      	b.n	8008344 <_fflush_r+0xc>
 8008390:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <_fflush_r+0x70>)
 8008392:	429c      	cmp	r4, r3
 8008394:	d101      	bne.n	800839a <_fflush_r+0x62>
 8008396:	68ac      	ldr	r4, [r5, #8]
 8008398:	e7df      	b.n	800835a <_fflush_r+0x22>
 800839a:	4b04      	ldr	r3, [pc, #16]	; (80083ac <_fflush_r+0x74>)
 800839c:	429c      	cmp	r4, r3
 800839e:	bf08      	it	eq
 80083a0:	68ec      	ldreq	r4, [r5, #12]
 80083a2:	e7da      	b.n	800835a <_fflush_r+0x22>
 80083a4:	08009670 	.word	0x08009670
 80083a8:	08009690 	.word	0x08009690
 80083ac:	08009650 	.word	0x08009650

080083b0 <_localeconv_r>:
 80083b0:	4800      	ldr	r0, [pc, #0]	; (80083b4 <_localeconv_r+0x4>)
 80083b2:	4770      	bx	lr
 80083b4:	20000164 	.word	0x20000164

080083b8 <_lseek_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4604      	mov	r4, r0
 80083bc:	4608      	mov	r0, r1
 80083be:	4611      	mov	r1, r2
 80083c0:	2200      	movs	r2, #0
 80083c2:	4d05      	ldr	r5, [pc, #20]	; (80083d8 <_lseek_r+0x20>)
 80083c4:	602a      	str	r2, [r5, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	f7f8 ffe8 	bl	800139c <_lseek>
 80083cc:	1c43      	adds	r3, r0, #1
 80083ce:	d102      	bne.n	80083d6 <_lseek_r+0x1e>
 80083d0:	682b      	ldr	r3, [r5, #0]
 80083d2:	b103      	cbz	r3, 80083d6 <_lseek_r+0x1e>
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	bd38      	pop	{r3, r4, r5, pc}
 80083d8:	20001d20 	.word	0x20001d20

080083dc <malloc>:
 80083dc:	4b02      	ldr	r3, [pc, #8]	; (80083e8 <malloc+0xc>)
 80083de:	4601      	mov	r1, r0
 80083e0:	6818      	ldr	r0, [r3, #0]
 80083e2:	f7fe baed 	b.w	80069c0 <_malloc_r>
 80083e6:	bf00      	nop
 80083e8:	20000010 	.word	0x20000010

080083ec <memchr>:
 80083ec:	4603      	mov	r3, r0
 80083ee:	b510      	push	{r4, lr}
 80083f0:	b2c9      	uxtb	r1, r1
 80083f2:	4402      	add	r2, r0
 80083f4:	4293      	cmp	r3, r2
 80083f6:	4618      	mov	r0, r3
 80083f8:	d101      	bne.n	80083fe <memchr+0x12>
 80083fa:	2000      	movs	r0, #0
 80083fc:	e003      	b.n	8008406 <memchr+0x1a>
 80083fe:	7804      	ldrb	r4, [r0, #0]
 8008400:	3301      	adds	r3, #1
 8008402:	428c      	cmp	r4, r1
 8008404:	d1f6      	bne.n	80083f4 <memchr+0x8>
 8008406:	bd10      	pop	{r4, pc}

08008408 <__malloc_lock>:
 8008408:	4801      	ldr	r0, [pc, #4]	; (8008410 <__malloc_lock+0x8>)
 800840a:	f7fe bac0 	b.w	800698e <__retarget_lock_acquire_recursive>
 800840e:	bf00      	nop
 8008410:	20001d18 	.word	0x20001d18

08008414 <__malloc_unlock>:
 8008414:	4801      	ldr	r0, [pc, #4]	; (800841c <__malloc_unlock+0x8>)
 8008416:	f7fe babb 	b.w	8006990 <__retarget_lock_release_recursive>
 800841a:	bf00      	nop
 800841c:	20001d18 	.word	0x20001d18

08008420 <_Balloc>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008424:	4604      	mov	r4, r0
 8008426:	460d      	mov	r5, r1
 8008428:	b976      	cbnz	r6, 8008448 <_Balloc+0x28>
 800842a:	2010      	movs	r0, #16
 800842c:	f7ff ffd6 	bl	80083dc <malloc>
 8008430:	4602      	mov	r2, r0
 8008432:	6260      	str	r0, [r4, #36]	; 0x24
 8008434:	b920      	cbnz	r0, 8008440 <_Balloc+0x20>
 8008436:	2166      	movs	r1, #102	; 0x66
 8008438:	4b17      	ldr	r3, [pc, #92]	; (8008498 <_Balloc+0x78>)
 800843a:	4818      	ldr	r0, [pc, #96]	; (800849c <_Balloc+0x7c>)
 800843c:	f000 fd3a 	bl	8008eb4 <__assert_func>
 8008440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008444:	6006      	str	r6, [r0, #0]
 8008446:	60c6      	str	r6, [r0, #12]
 8008448:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800844a:	68f3      	ldr	r3, [r6, #12]
 800844c:	b183      	cbz	r3, 8008470 <_Balloc+0x50>
 800844e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008456:	b9b8      	cbnz	r0, 8008488 <_Balloc+0x68>
 8008458:	2101      	movs	r1, #1
 800845a:	fa01 f605 	lsl.w	r6, r1, r5
 800845e:	1d72      	adds	r2, r6, #5
 8008460:	4620      	mov	r0, r4
 8008462:	0092      	lsls	r2, r2, #2
 8008464:	f000 fb5e 	bl	8008b24 <_calloc_r>
 8008468:	b160      	cbz	r0, 8008484 <_Balloc+0x64>
 800846a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800846e:	e00e      	b.n	800848e <_Balloc+0x6e>
 8008470:	2221      	movs	r2, #33	; 0x21
 8008472:	2104      	movs	r1, #4
 8008474:	4620      	mov	r0, r4
 8008476:	f000 fb55 	bl	8008b24 <_calloc_r>
 800847a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800847c:	60f0      	str	r0, [r6, #12]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1e4      	bne.n	800844e <_Balloc+0x2e>
 8008484:	2000      	movs	r0, #0
 8008486:	bd70      	pop	{r4, r5, r6, pc}
 8008488:	6802      	ldr	r2, [r0, #0]
 800848a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800848e:	2300      	movs	r3, #0
 8008490:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008494:	e7f7      	b.n	8008486 <_Balloc+0x66>
 8008496:	bf00      	nop
 8008498:	080096f5 	.word	0x080096f5
 800849c:	0800977c 	.word	0x0800977c

080084a0 <_Bfree>:
 80084a0:	b570      	push	{r4, r5, r6, lr}
 80084a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084a4:	4605      	mov	r5, r0
 80084a6:	460c      	mov	r4, r1
 80084a8:	b976      	cbnz	r6, 80084c8 <_Bfree+0x28>
 80084aa:	2010      	movs	r0, #16
 80084ac:	f7ff ff96 	bl	80083dc <malloc>
 80084b0:	4602      	mov	r2, r0
 80084b2:	6268      	str	r0, [r5, #36]	; 0x24
 80084b4:	b920      	cbnz	r0, 80084c0 <_Bfree+0x20>
 80084b6:	218a      	movs	r1, #138	; 0x8a
 80084b8:	4b08      	ldr	r3, [pc, #32]	; (80084dc <_Bfree+0x3c>)
 80084ba:	4809      	ldr	r0, [pc, #36]	; (80084e0 <_Bfree+0x40>)
 80084bc:	f000 fcfa 	bl	8008eb4 <__assert_func>
 80084c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084c4:	6006      	str	r6, [r0, #0]
 80084c6:	60c6      	str	r6, [r0, #12]
 80084c8:	b13c      	cbz	r4, 80084da <_Bfree+0x3a>
 80084ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084cc:	6862      	ldr	r2, [r4, #4]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084d4:	6021      	str	r1, [r4, #0]
 80084d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084da:	bd70      	pop	{r4, r5, r6, pc}
 80084dc:	080096f5 	.word	0x080096f5
 80084e0:	0800977c 	.word	0x0800977c

080084e4 <__multadd>:
 80084e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084e8:	4698      	mov	r8, r3
 80084ea:	460c      	mov	r4, r1
 80084ec:	2300      	movs	r3, #0
 80084ee:	690e      	ldr	r6, [r1, #16]
 80084f0:	4607      	mov	r7, r0
 80084f2:	f101 0014 	add.w	r0, r1, #20
 80084f6:	6805      	ldr	r5, [r0, #0]
 80084f8:	3301      	adds	r3, #1
 80084fa:	b2a9      	uxth	r1, r5
 80084fc:	fb02 8101 	mla	r1, r2, r1, r8
 8008500:	0c2d      	lsrs	r5, r5, #16
 8008502:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008506:	fb02 c505 	mla	r5, r2, r5, ip
 800850a:	b289      	uxth	r1, r1
 800850c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008510:	429e      	cmp	r6, r3
 8008512:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008516:	f840 1b04 	str.w	r1, [r0], #4
 800851a:	dcec      	bgt.n	80084f6 <__multadd+0x12>
 800851c:	f1b8 0f00 	cmp.w	r8, #0
 8008520:	d022      	beq.n	8008568 <__multadd+0x84>
 8008522:	68a3      	ldr	r3, [r4, #8]
 8008524:	42b3      	cmp	r3, r6
 8008526:	dc19      	bgt.n	800855c <__multadd+0x78>
 8008528:	6861      	ldr	r1, [r4, #4]
 800852a:	4638      	mov	r0, r7
 800852c:	3101      	adds	r1, #1
 800852e:	f7ff ff77 	bl	8008420 <_Balloc>
 8008532:	4605      	mov	r5, r0
 8008534:	b928      	cbnz	r0, 8008542 <__multadd+0x5e>
 8008536:	4602      	mov	r2, r0
 8008538:	21b5      	movs	r1, #181	; 0xb5
 800853a:	4b0d      	ldr	r3, [pc, #52]	; (8008570 <__multadd+0x8c>)
 800853c:	480d      	ldr	r0, [pc, #52]	; (8008574 <__multadd+0x90>)
 800853e:	f000 fcb9 	bl	8008eb4 <__assert_func>
 8008542:	6922      	ldr	r2, [r4, #16]
 8008544:	f104 010c 	add.w	r1, r4, #12
 8008548:	3202      	adds	r2, #2
 800854a:	0092      	lsls	r2, r2, #2
 800854c:	300c      	adds	r0, #12
 800854e:	f7fe fa20 	bl	8006992 <memcpy>
 8008552:	4621      	mov	r1, r4
 8008554:	4638      	mov	r0, r7
 8008556:	f7ff ffa3 	bl	80084a0 <_Bfree>
 800855a:	462c      	mov	r4, r5
 800855c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008560:	3601      	adds	r6, #1
 8008562:	f8c3 8014 	str.w	r8, [r3, #20]
 8008566:	6126      	str	r6, [r4, #16]
 8008568:	4620      	mov	r0, r4
 800856a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800856e:	bf00      	nop
 8008570:	0800976b 	.word	0x0800976b
 8008574:	0800977c 	.word	0x0800977c

08008578 <__hi0bits>:
 8008578:	0c02      	lsrs	r2, r0, #16
 800857a:	0412      	lsls	r2, r2, #16
 800857c:	4603      	mov	r3, r0
 800857e:	b9ca      	cbnz	r2, 80085b4 <__hi0bits+0x3c>
 8008580:	0403      	lsls	r3, r0, #16
 8008582:	2010      	movs	r0, #16
 8008584:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008588:	bf04      	itt	eq
 800858a:	021b      	lsleq	r3, r3, #8
 800858c:	3008      	addeq	r0, #8
 800858e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008592:	bf04      	itt	eq
 8008594:	011b      	lsleq	r3, r3, #4
 8008596:	3004      	addeq	r0, #4
 8008598:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800859c:	bf04      	itt	eq
 800859e:	009b      	lsleq	r3, r3, #2
 80085a0:	3002      	addeq	r0, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	db05      	blt.n	80085b2 <__hi0bits+0x3a>
 80085a6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80085aa:	f100 0001 	add.w	r0, r0, #1
 80085ae:	bf08      	it	eq
 80085b0:	2020      	moveq	r0, #32
 80085b2:	4770      	bx	lr
 80085b4:	2000      	movs	r0, #0
 80085b6:	e7e5      	b.n	8008584 <__hi0bits+0xc>

080085b8 <__lo0bits>:
 80085b8:	6803      	ldr	r3, [r0, #0]
 80085ba:	4602      	mov	r2, r0
 80085bc:	f013 0007 	ands.w	r0, r3, #7
 80085c0:	d00b      	beq.n	80085da <__lo0bits+0x22>
 80085c2:	07d9      	lsls	r1, r3, #31
 80085c4:	d422      	bmi.n	800860c <__lo0bits+0x54>
 80085c6:	0798      	lsls	r0, r3, #30
 80085c8:	bf49      	itett	mi
 80085ca:	085b      	lsrmi	r3, r3, #1
 80085cc:	089b      	lsrpl	r3, r3, #2
 80085ce:	2001      	movmi	r0, #1
 80085d0:	6013      	strmi	r3, [r2, #0]
 80085d2:	bf5c      	itt	pl
 80085d4:	2002      	movpl	r0, #2
 80085d6:	6013      	strpl	r3, [r2, #0]
 80085d8:	4770      	bx	lr
 80085da:	b299      	uxth	r1, r3
 80085dc:	b909      	cbnz	r1, 80085e2 <__lo0bits+0x2a>
 80085de:	2010      	movs	r0, #16
 80085e0:	0c1b      	lsrs	r3, r3, #16
 80085e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80085e6:	bf04      	itt	eq
 80085e8:	0a1b      	lsreq	r3, r3, #8
 80085ea:	3008      	addeq	r0, #8
 80085ec:	0719      	lsls	r1, r3, #28
 80085ee:	bf04      	itt	eq
 80085f0:	091b      	lsreq	r3, r3, #4
 80085f2:	3004      	addeq	r0, #4
 80085f4:	0799      	lsls	r1, r3, #30
 80085f6:	bf04      	itt	eq
 80085f8:	089b      	lsreq	r3, r3, #2
 80085fa:	3002      	addeq	r0, #2
 80085fc:	07d9      	lsls	r1, r3, #31
 80085fe:	d403      	bmi.n	8008608 <__lo0bits+0x50>
 8008600:	085b      	lsrs	r3, r3, #1
 8008602:	f100 0001 	add.w	r0, r0, #1
 8008606:	d003      	beq.n	8008610 <__lo0bits+0x58>
 8008608:	6013      	str	r3, [r2, #0]
 800860a:	4770      	bx	lr
 800860c:	2000      	movs	r0, #0
 800860e:	4770      	bx	lr
 8008610:	2020      	movs	r0, #32
 8008612:	4770      	bx	lr

08008614 <__i2b>:
 8008614:	b510      	push	{r4, lr}
 8008616:	460c      	mov	r4, r1
 8008618:	2101      	movs	r1, #1
 800861a:	f7ff ff01 	bl	8008420 <_Balloc>
 800861e:	4602      	mov	r2, r0
 8008620:	b928      	cbnz	r0, 800862e <__i2b+0x1a>
 8008622:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008626:	4b04      	ldr	r3, [pc, #16]	; (8008638 <__i2b+0x24>)
 8008628:	4804      	ldr	r0, [pc, #16]	; (800863c <__i2b+0x28>)
 800862a:	f000 fc43 	bl	8008eb4 <__assert_func>
 800862e:	2301      	movs	r3, #1
 8008630:	6144      	str	r4, [r0, #20]
 8008632:	6103      	str	r3, [r0, #16]
 8008634:	bd10      	pop	{r4, pc}
 8008636:	bf00      	nop
 8008638:	0800976b 	.word	0x0800976b
 800863c:	0800977c 	.word	0x0800977c

08008640 <__multiply>:
 8008640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	4614      	mov	r4, r2
 8008646:	690a      	ldr	r2, [r1, #16]
 8008648:	6923      	ldr	r3, [r4, #16]
 800864a:	460d      	mov	r5, r1
 800864c:	429a      	cmp	r2, r3
 800864e:	bfbe      	ittt	lt
 8008650:	460b      	movlt	r3, r1
 8008652:	4625      	movlt	r5, r4
 8008654:	461c      	movlt	r4, r3
 8008656:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800865a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800865e:	68ab      	ldr	r3, [r5, #8]
 8008660:	6869      	ldr	r1, [r5, #4]
 8008662:	eb0a 0709 	add.w	r7, sl, r9
 8008666:	42bb      	cmp	r3, r7
 8008668:	b085      	sub	sp, #20
 800866a:	bfb8      	it	lt
 800866c:	3101      	addlt	r1, #1
 800866e:	f7ff fed7 	bl	8008420 <_Balloc>
 8008672:	b930      	cbnz	r0, 8008682 <__multiply+0x42>
 8008674:	4602      	mov	r2, r0
 8008676:	f240 115d 	movw	r1, #349	; 0x15d
 800867a:	4b41      	ldr	r3, [pc, #260]	; (8008780 <__multiply+0x140>)
 800867c:	4841      	ldr	r0, [pc, #260]	; (8008784 <__multiply+0x144>)
 800867e:	f000 fc19 	bl	8008eb4 <__assert_func>
 8008682:	f100 0614 	add.w	r6, r0, #20
 8008686:	4633      	mov	r3, r6
 8008688:	2200      	movs	r2, #0
 800868a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800868e:	4543      	cmp	r3, r8
 8008690:	d31e      	bcc.n	80086d0 <__multiply+0x90>
 8008692:	f105 0c14 	add.w	ip, r5, #20
 8008696:	f104 0314 	add.w	r3, r4, #20
 800869a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800869e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80086a2:	9202      	str	r2, [sp, #8]
 80086a4:	ebac 0205 	sub.w	r2, ip, r5
 80086a8:	3a15      	subs	r2, #21
 80086aa:	f022 0203 	bic.w	r2, r2, #3
 80086ae:	3204      	adds	r2, #4
 80086b0:	f105 0115 	add.w	r1, r5, #21
 80086b4:	458c      	cmp	ip, r1
 80086b6:	bf38      	it	cc
 80086b8:	2204      	movcc	r2, #4
 80086ba:	9201      	str	r2, [sp, #4]
 80086bc:	9a02      	ldr	r2, [sp, #8]
 80086be:	9303      	str	r3, [sp, #12]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d808      	bhi.n	80086d6 <__multiply+0x96>
 80086c4:	2f00      	cmp	r7, #0
 80086c6:	dc55      	bgt.n	8008774 <__multiply+0x134>
 80086c8:	6107      	str	r7, [r0, #16]
 80086ca:	b005      	add	sp, #20
 80086cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d0:	f843 2b04 	str.w	r2, [r3], #4
 80086d4:	e7db      	b.n	800868e <__multiply+0x4e>
 80086d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80086da:	f1ba 0f00 	cmp.w	sl, #0
 80086de:	d020      	beq.n	8008722 <__multiply+0xe2>
 80086e0:	46b1      	mov	r9, r6
 80086e2:	2200      	movs	r2, #0
 80086e4:	f105 0e14 	add.w	lr, r5, #20
 80086e8:	f85e 4b04 	ldr.w	r4, [lr], #4
 80086ec:	f8d9 b000 	ldr.w	fp, [r9]
 80086f0:	b2a1      	uxth	r1, r4
 80086f2:	fa1f fb8b 	uxth.w	fp, fp
 80086f6:	fb0a b101 	mla	r1, sl, r1, fp
 80086fa:	4411      	add	r1, r2
 80086fc:	f8d9 2000 	ldr.w	r2, [r9]
 8008700:	0c24      	lsrs	r4, r4, #16
 8008702:	0c12      	lsrs	r2, r2, #16
 8008704:	fb0a 2404 	mla	r4, sl, r4, r2
 8008708:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800870c:	b289      	uxth	r1, r1
 800870e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008712:	45f4      	cmp	ip, lr
 8008714:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008718:	f849 1b04 	str.w	r1, [r9], #4
 800871c:	d8e4      	bhi.n	80086e8 <__multiply+0xa8>
 800871e:	9901      	ldr	r1, [sp, #4]
 8008720:	5072      	str	r2, [r6, r1]
 8008722:	9a03      	ldr	r2, [sp, #12]
 8008724:	3304      	adds	r3, #4
 8008726:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800872a:	f1b9 0f00 	cmp.w	r9, #0
 800872e:	d01f      	beq.n	8008770 <__multiply+0x130>
 8008730:	46b6      	mov	lr, r6
 8008732:	f04f 0a00 	mov.w	sl, #0
 8008736:	6834      	ldr	r4, [r6, #0]
 8008738:	f105 0114 	add.w	r1, r5, #20
 800873c:	880a      	ldrh	r2, [r1, #0]
 800873e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008742:	b2a4      	uxth	r4, r4
 8008744:	fb09 b202 	mla	r2, r9, r2, fp
 8008748:	4492      	add	sl, r2
 800874a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800874e:	f84e 4b04 	str.w	r4, [lr], #4
 8008752:	f851 4b04 	ldr.w	r4, [r1], #4
 8008756:	f8be 2000 	ldrh.w	r2, [lr]
 800875a:	0c24      	lsrs	r4, r4, #16
 800875c:	fb09 2404 	mla	r4, r9, r4, r2
 8008760:	458c      	cmp	ip, r1
 8008762:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008766:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800876a:	d8e7      	bhi.n	800873c <__multiply+0xfc>
 800876c:	9a01      	ldr	r2, [sp, #4]
 800876e:	50b4      	str	r4, [r6, r2]
 8008770:	3604      	adds	r6, #4
 8008772:	e7a3      	b.n	80086bc <__multiply+0x7c>
 8008774:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1a5      	bne.n	80086c8 <__multiply+0x88>
 800877c:	3f01      	subs	r7, #1
 800877e:	e7a1      	b.n	80086c4 <__multiply+0x84>
 8008780:	0800976b 	.word	0x0800976b
 8008784:	0800977c 	.word	0x0800977c

08008788 <__pow5mult>:
 8008788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800878c:	4615      	mov	r5, r2
 800878e:	f012 0203 	ands.w	r2, r2, #3
 8008792:	4606      	mov	r6, r0
 8008794:	460f      	mov	r7, r1
 8008796:	d007      	beq.n	80087a8 <__pow5mult+0x20>
 8008798:	4c25      	ldr	r4, [pc, #148]	; (8008830 <__pow5mult+0xa8>)
 800879a:	3a01      	subs	r2, #1
 800879c:	2300      	movs	r3, #0
 800879e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087a2:	f7ff fe9f 	bl	80084e4 <__multadd>
 80087a6:	4607      	mov	r7, r0
 80087a8:	10ad      	asrs	r5, r5, #2
 80087aa:	d03d      	beq.n	8008828 <__pow5mult+0xa0>
 80087ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80087ae:	b97c      	cbnz	r4, 80087d0 <__pow5mult+0x48>
 80087b0:	2010      	movs	r0, #16
 80087b2:	f7ff fe13 	bl	80083dc <malloc>
 80087b6:	4602      	mov	r2, r0
 80087b8:	6270      	str	r0, [r6, #36]	; 0x24
 80087ba:	b928      	cbnz	r0, 80087c8 <__pow5mult+0x40>
 80087bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80087c0:	4b1c      	ldr	r3, [pc, #112]	; (8008834 <__pow5mult+0xac>)
 80087c2:	481d      	ldr	r0, [pc, #116]	; (8008838 <__pow5mult+0xb0>)
 80087c4:	f000 fb76 	bl	8008eb4 <__assert_func>
 80087c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087cc:	6004      	str	r4, [r0, #0]
 80087ce:	60c4      	str	r4, [r0, #12]
 80087d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80087d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087d8:	b94c      	cbnz	r4, 80087ee <__pow5mult+0x66>
 80087da:	f240 2171 	movw	r1, #625	; 0x271
 80087de:	4630      	mov	r0, r6
 80087e0:	f7ff ff18 	bl	8008614 <__i2b>
 80087e4:	2300      	movs	r3, #0
 80087e6:	4604      	mov	r4, r0
 80087e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80087ec:	6003      	str	r3, [r0, #0]
 80087ee:	f04f 0900 	mov.w	r9, #0
 80087f2:	07eb      	lsls	r3, r5, #31
 80087f4:	d50a      	bpl.n	800880c <__pow5mult+0x84>
 80087f6:	4639      	mov	r1, r7
 80087f8:	4622      	mov	r2, r4
 80087fa:	4630      	mov	r0, r6
 80087fc:	f7ff ff20 	bl	8008640 <__multiply>
 8008800:	4680      	mov	r8, r0
 8008802:	4639      	mov	r1, r7
 8008804:	4630      	mov	r0, r6
 8008806:	f7ff fe4b 	bl	80084a0 <_Bfree>
 800880a:	4647      	mov	r7, r8
 800880c:	106d      	asrs	r5, r5, #1
 800880e:	d00b      	beq.n	8008828 <__pow5mult+0xa0>
 8008810:	6820      	ldr	r0, [r4, #0]
 8008812:	b938      	cbnz	r0, 8008824 <__pow5mult+0x9c>
 8008814:	4622      	mov	r2, r4
 8008816:	4621      	mov	r1, r4
 8008818:	4630      	mov	r0, r6
 800881a:	f7ff ff11 	bl	8008640 <__multiply>
 800881e:	6020      	str	r0, [r4, #0]
 8008820:	f8c0 9000 	str.w	r9, [r0]
 8008824:	4604      	mov	r4, r0
 8008826:	e7e4      	b.n	80087f2 <__pow5mult+0x6a>
 8008828:	4638      	mov	r0, r7
 800882a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800882e:	bf00      	nop
 8008830:	080098d0 	.word	0x080098d0
 8008834:	080096f5 	.word	0x080096f5
 8008838:	0800977c 	.word	0x0800977c

0800883c <__lshift>:
 800883c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008840:	460c      	mov	r4, r1
 8008842:	4607      	mov	r7, r0
 8008844:	4691      	mov	r9, r2
 8008846:	6923      	ldr	r3, [r4, #16]
 8008848:	6849      	ldr	r1, [r1, #4]
 800884a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800884e:	68a3      	ldr	r3, [r4, #8]
 8008850:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008854:	f108 0601 	add.w	r6, r8, #1
 8008858:	42b3      	cmp	r3, r6
 800885a:	db0b      	blt.n	8008874 <__lshift+0x38>
 800885c:	4638      	mov	r0, r7
 800885e:	f7ff fddf 	bl	8008420 <_Balloc>
 8008862:	4605      	mov	r5, r0
 8008864:	b948      	cbnz	r0, 800887a <__lshift+0x3e>
 8008866:	4602      	mov	r2, r0
 8008868:	f240 11d9 	movw	r1, #473	; 0x1d9
 800886c:	4b27      	ldr	r3, [pc, #156]	; (800890c <__lshift+0xd0>)
 800886e:	4828      	ldr	r0, [pc, #160]	; (8008910 <__lshift+0xd4>)
 8008870:	f000 fb20 	bl	8008eb4 <__assert_func>
 8008874:	3101      	adds	r1, #1
 8008876:	005b      	lsls	r3, r3, #1
 8008878:	e7ee      	b.n	8008858 <__lshift+0x1c>
 800887a:	2300      	movs	r3, #0
 800887c:	f100 0114 	add.w	r1, r0, #20
 8008880:	f100 0210 	add.w	r2, r0, #16
 8008884:	4618      	mov	r0, r3
 8008886:	4553      	cmp	r3, sl
 8008888:	db33      	blt.n	80088f2 <__lshift+0xb6>
 800888a:	6920      	ldr	r0, [r4, #16]
 800888c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008890:	f104 0314 	add.w	r3, r4, #20
 8008894:	f019 091f 	ands.w	r9, r9, #31
 8008898:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800889c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088a0:	d02b      	beq.n	80088fa <__lshift+0xbe>
 80088a2:	468a      	mov	sl, r1
 80088a4:	2200      	movs	r2, #0
 80088a6:	f1c9 0e20 	rsb	lr, r9, #32
 80088aa:	6818      	ldr	r0, [r3, #0]
 80088ac:	fa00 f009 	lsl.w	r0, r0, r9
 80088b0:	4302      	orrs	r2, r0
 80088b2:	f84a 2b04 	str.w	r2, [sl], #4
 80088b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ba:	459c      	cmp	ip, r3
 80088bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80088c0:	d8f3      	bhi.n	80088aa <__lshift+0x6e>
 80088c2:	ebac 0304 	sub.w	r3, ip, r4
 80088c6:	3b15      	subs	r3, #21
 80088c8:	f023 0303 	bic.w	r3, r3, #3
 80088cc:	3304      	adds	r3, #4
 80088ce:	f104 0015 	add.w	r0, r4, #21
 80088d2:	4584      	cmp	ip, r0
 80088d4:	bf38      	it	cc
 80088d6:	2304      	movcc	r3, #4
 80088d8:	50ca      	str	r2, [r1, r3]
 80088da:	b10a      	cbz	r2, 80088e0 <__lshift+0xa4>
 80088dc:	f108 0602 	add.w	r6, r8, #2
 80088e0:	3e01      	subs	r6, #1
 80088e2:	4638      	mov	r0, r7
 80088e4:	4621      	mov	r1, r4
 80088e6:	612e      	str	r6, [r5, #16]
 80088e8:	f7ff fdda 	bl	80084a0 <_Bfree>
 80088ec:	4628      	mov	r0, r5
 80088ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80088f6:	3301      	adds	r3, #1
 80088f8:	e7c5      	b.n	8008886 <__lshift+0x4a>
 80088fa:	3904      	subs	r1, #4
 80088fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008900:	459c      	cmp	ip, r3
 8008902:	f841 2f04 	str.w	r2, [r1, #4]!
 8008906:	d8f9      	bhi.n	80088fc <__lshift+0xc0>
 8008908:	e7ea      	b.n	80088e0 <__lshift+0xa4>
 800890a:	bf00      	nop
 800890c:	0800976b 	.word	0x0800976b
 8008910:	0800977c 	.word	0x0800977c

08008914 <__mcmp>:
 8008914:	4603      	mov	r3, r0
 8008916:	690a      	ldr	r2, [r1, #16]
 8008918:	6900      	ldr	r0, [r0, #16]
 800891a:	b530      	push	{r4, r5, lr}
 800891c:	1a80      	subs	r0, r0, r2
 800891e:	d10d      	bne.n	800893c <__mcmp+0x28>
 8008920:	3314      	adds	r3, #20
 8008922:	3114      	adds	r1, #20
 8008924:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008928:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800892c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008930:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008934:	4295      	cmp	r5, r2
 8008936:	d002      	beq.n	800893e <__mcmp+0x2a>
 8008938:	d304      	bcc.n	8008944 <__mcmp+0x30>
 800893a:	2001      	movs	r0, #1
 800893c:	bd30      	pop	{r4, r5, pc}
 800893e:	42a3      	cmp	r3, r4
 8008940:	d3f4      	bcc.n	800892c <__mcmp+0x18>
 8008942:	e7fb      	b.n	800893c <__mcmp+0x28>
 8008944:	f04f 30ff 	mov.w	r0, #4294967295
 8008948:	e7f8      	b.n	800893c <__mcmp+0x28>
	...

0800894c <__mdiff>:
 800894c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008950:	460c      	mov	r4, r1
 8008952:	4606      	mov	r6, r0
 8008954:	4611      	mov	r1, r2
 8008956:	4620      	mov	r0, r4
 8008958:	4692      	mov	sl, r2
 800895a:	f7ff ffdb 	bl	8008914 <__mcmp>
 800895e:	1e05      	subs	r5, r0, #0
 8008960:	d111      	bne.n	8008986 <__mdiff+0x3a>
 8008962:	4629      	mov	r1, r5
 8008964:	4630      	mov	r0, r6
 8008966:	f7ff fd5b 	bl	8008420 <_Balloc>
 800896a:	4602      	mov	r2, r0
 800896c:	b928      	cbnz	r0, 800897a <__mdiff+0x2e>
 800896e:	f240 2132 	movw	r1, #562	; 0x232
 8008972:	4b3c      	ldr	r3, [pc, #240]	; (8008a64 <__mdiff+0x118>)
 8008974:	483c      	ldr	r0, [pc, #240]	; (8008a68 <__mdiff+0x11c>)
 8008976:	f000 fa9d 	bl	8008eb4 <__assert_func>
 800897a:	2301      	movs	r3, #1
 800897c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008980:	4610      	mov	r0, r2
 8008982:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008986:	bfa4      	itt	ge
 8008988:	4653      	movge	r3, sl
 800898a:	46a2      	movge	sl, r4
 800898c:	4630      	mov	r0, r6
 800898e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008992:	bfa6      	itte	ge
 8008994:	461c      	movge	r4, r3
 8008996:	2500      	movge	r5, #0
 8008998:	2501      	movlt	r5, #1
 800899a:	f7ff fd41 	bl	8008420 <_Balloc>
 800899e:	4602      	mov	r2, r0
 80089a0:	b918      	cbnz	r0, 80089aa <__mdiff+0x5e>
 80089a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80089a6:	4b2f      	ldr	r3, [pc, #188]	; (8008a64 <__mdiff+0x118>)
 80089a8:	e7e4      	b.n	8008974 <__mdiff+0x28>
 80089aa:	f100 0814 	add.w	r8, r0, #20
 80089ae:	f8da 7010 	ldr.w	r7, [sl, #16]
 80089b2:	60c5      	str	r5, [r0, #12]
 80089b4:	f04f 0c00 	mov.w	ip, #0
 80089b8:	f10a 0514 	add.w	r5, sl, #20
 80089bc:	f10a 0010 	add.w	r0, sl, #16
 80089c0:	46c2      	mov	sl, r8
 80089c2:	6926      	ldr	r6, [r4, #16]
 80089c4:	f104 0914 	add.w	r9, r4, #20
 80089c8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80089cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80089d0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80089d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80089d8:	fa1f f18b 	uxth.w	r1, fp
 80089dc:	4461      	add	r1, ip
 80089de:	fa1f fc83 	uxth.w	ip, r3
 80089e2:	0c1b      	lsrs	r3, r3, #16
 80089e4:	eba1 010c 	sub.w	r1, r1, ip
 80089e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80089ec:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80089f0:	b289      	uxth	r1, r1
 80089f2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80089f6:	454e      	cmp	r6, r9
 80089f8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80089fc:	f84a 3b04 	str.w	r3, [sl], #4
 8008a00:	d8e6      	bhi.n	80089d0 <__mdiff+0x84>
 8008a02:	1b33      	subs	r3, r6, r4
 8008a04:	3b15      	subs	r3, #21
 8008a06:	f023 0303 	bic.w	r3, r3, #3
 8008a0a:	3415      	adds	r4, #21
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	42a6      	cmp	r6, r4
 8008a10:	bf38      	it	cc
 8008a12:	2304      	movcc	r3, #4
 8008a14:	441d      	add	r5, r3
 8008a16:	4443      	add	r3, r8
 8008a18:	461e      	mov	r6, r3
 8008a1a:	462c      	mov	r4, r5
 8008a1c:	4574      	cmp	r4, lr
 8008a1e:	d30e      	bcc.n	8008a3e <__mdiff+0xf2>
 8008a20:	f10e 0103 	add.w	r1, lr, #3
 8008a24:	1b49      	subs	r1, r1, r5
 8008a26:	f021 0103 	bic.w	r1, r1, #3
 8008a2a:	3d03      	subs	r5, #3
 8008a2c:	45ae      	cmp	lr, r5
 8008a2e:	bf38      	it	cc
 8008a30:	2100      	movcc	r1, #0
 8008a32:	4419      	add	r1, r3
 8008a34:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008a38:	b18b      	cbz	r3, 8008a5e <__mdiff+0x112>
 8008a3a:	6117      	str	r7, [r2, #16]
 8008a3c:	e7a0      	b.n	8008980 <__mdiff+0x34>
 8008a3e:	f854 8b04 	ldr.w	r8, [r4], #4
 8008a42:	fa1f f188 	uxth.w	r1, r8
 8008a46:	4461      	add	r1, ip
 8008a48:	1408      	asrs	r0, r1, #16
 8008a4a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008a4e:	b289      	uxth	r1, r1
 8008a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a58:	f846 1b04 	str.w	r1, [r6], #4
 8008a5c:	e7de      	b.n	8008a1c <__mdiff+0xd0>
 8008a5e:	3f01      	subs	r7, #1
 8008a60:	e7e8      	b.n	8008a34 <__mdiff+0xe8>
 8008a62:	bf00      	nop
 8008a64:	0800976b 	.word	0x0800976b
 8008a68:	0800977c 	.word	0x0800977c

08008a6c <__d2b>:
 8008a6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008a70:	2101      	movs	r1, #1
 8008a72:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008a76:	4690      	mov	r8, r2
 8008a78:	461d      	mov	r5, r3
 8008a7a:	f7ff fcd1 	bl	8008420 <_Balloc>
 8008a7e:	4604      	mov	r4, r0
 8008a80:	b930      	cbnz	r0, 8008a90 <__d2b+0x24>
 8008a82:	4602      	mov	r2, r0
 8008a84:	f240 310a 	movw	r1, #778	; 0x30a
 8008a88:	4b24      	ldr	r3, [pc, #144]	; (8008b1c <__d2b+0xb0>)
 8008a8a:	4825      	ldr	r0, [pc, #148]	; (8008b20 <__d2b+0xb4>)
 8008a8c:	f000 fa12 	bl	8008eb4 <__assert_func>
 8008a90:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008a94:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008a98:	bb2d      	cbnz	r5, 8008ae6 <__d2b+0x7a>
 8008a9a:	9301      	str	r3, [sp, #4]
 8008a9c:	f1b8 0300 	subs.w	r3, r8, #0
 8008aa0:	d026      	beq.n	8008af0 <__d2b+0x84>
 8008aa2:	4668      	mov	r0, sp
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	f7ff fd87 	bl	80085b8 <__lo0bits>
 8008aaa:	9900      	ldr	r1, [sp, #0]
 8008aac:	b1f0      	cbz	r0, 8008aec <__d2b+0x80>
 8008aae:	9a01      	ldr	r2, [sp, #4]
 8008ab0:	f1c0 0320 	rsb	r3, r0, #32
 8008ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab8:	430b      	orrs	r3, r1
 8008aba:	40c2      	lsrs	r2, r0
 8008abc:	6163      	str	r3, [r4, #20]
 8008abe:	9201      	str	r2, [sp, #4]
 8008ac0:	9b01      	ldr	r3, [sp, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	bf14      	ite	ne
 8008ac6:	2102      	movne	r1, #2
 8008ac8:	2101      	moveq	r1, #1
 8008aca:	61a3      	str	r3, [r4, #24]
 8008acc:	6121      	str	r1, [r4, #16]
 8008ace:	b1c5      	cbz	r5, 8008b02 <__d2b+0x96>
 8008ad0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ad4:	4405      	add	r5, r0
 8008ad6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ada:	603d      	str	r5, [r7, #0]
 8008adc:	6030      	str	r0, [r6, #0]
 8008ade:	4620      	mov	r0, r4
 8008ae0:	b002      	add	sp, #8
 8008ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008aea:	e7d6      	b.n	8008a9a <__d2b+0x2e>
 8008aec:	6161      	str	r1, [r4, #20]
 8008aee:	e7e7      	b.n	8008ac0 <__d2b+0x54>
 8008af0:	a801      	add	r0, sp, #4
 8008af2:	f7ff fd61 	bl	80085b8 <__lo0bits>
 8008af6:	2101      	movs	r1, #1
 8008af8:	9b01      	ldr	r3, [sp, #4]
 8008afa:	6121      	str	r1, [r4, #16]
 8008afc:	6163      	str	r3, [r4, #20]
 8008afe:	3020      	adds	r0, #32
 8008b00:	e7e5      	b.n	8008ace <__d2b+0x62>
 8008b02:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008b06:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b0a:	6038      	str	r0, [r7, #0]
 8008b0c:	6918      	ldr	r0, [r3, #16]
 8008b0e:	f7ff fd33 	bl	8008578 <__hi0bits>
 8008b12:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008b16:	6031      	str	r1, [r6, #0]
 8008b18:	e7e1      	b.n	8008ade <__d2b+0x72>
 8008b1a:	bf00      	nop
 8008b1c:	0800976b 	.word	0x0800976b
 8008b20:	0800977c 	.word	0x0800977c

08008b24 <_calloc_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	fb02 f501 	mul.w	r5, r2, r1
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	f7fd ff48 	bl	80069c0 <_malloc_r>
 8008b30:	4604      	mov	r4, r0
 8008b32:	b118      	cbz	r0, 8008b3c <_calloc_r+0x18>
 8008b34:	462a      	mov	r2, r5
 8008b36:	2100      	movs	r1, #0
 8008b38:	f7fd ff39 	bl	80069ae <memset>
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}

08008b40 <_free_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	4605      	mov	r5, r0
 8008b44:	2900      	cmp	r1, #0
 8008b46:	d043      	beq.n	8008bd0 <_free_r+0x90>
 8008b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b4c:	1f0c      	subs	r4, r1, #4
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	bfb8      	it	lt
 8008b52:	18e4      	addlt	r4, r4, r3
 8008b54:	f7ff fc58 	bl	8008408 <__malloc_lock>
 8008b58:	4a1e      	ldr	r2, [pc, #120]	; (8008bd4 <_free_r+0x94>)
 8008b5a:	6813      	ldr	r3, [r2, #0]
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	b933      	cbnz	r3, 8008b6e <_free_r+0x2e>
 8008b60:	6063      	str	r3, [r4, #4]
 8008b62:	6014      	str	r4, [r2, #0]
 8008b64:	4628      	mov	r0, r5
 8008b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b6a:	f7ff bc53 	b.w	8008414 <__malloc_unlock>
 8008b6e:	42a3      	cmp	r3, r4
 8008b70:	d90a      	bls.n	8008b88 <_free_r+0x48>
 8008b72:	6821      	ldr	r1, [r4, #0]
 8008b74:	1862      	adds	r2, r4, r1
 8008b76:	4293      	cmp	r3, r2
 8008b78:	bf01      	itttt	eq
 8008b7a:	681a      	ldreq	r2, [r3, #0]
 8008b7c:	685b      	ldreq	r3, [r3, #4]
 8008b7e:	1852      	addeq	r2, r2, r1
 8008b80:	6022      	streq	r2, [r4, #0]
 8008b82:	6063      	str	r3, [r4, #4]
 8008b84:	6004      	str	r4, [r0, #0]
 8008b86:	e7ed      	b.n	8008b64 <_free_r+0x24>
 8008b88:	461a      	mov	r2, r3
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	b10b      	cbz	r3, 8008b92 <_free_r+0x52>
 8008b8e:	42a3      	cmp	r3, r4
 8008b90:	d9fa      	bls.n	8008b88 <_free_r+0x48>
 8008b92:	6811      	ldr	r1, [r2, #0]
 8008b94:	1850      	adds	r0, r2, r1
 8008b96:	42a0      	cmp	r0, r4
 8008b98:	d10b      	bne.n	8008bb2 <_free_r+0x72>
 8008b9a:	6820      	ldr	r0, [r4, #0]
 8008b9c:	4401      	add	r1, r0
 8008b9e:	1850      	adds	r0, r2, r1
 8008ba0:	4283      	cmp	r3, r0
 8008ba2:	6011      	str	r1, [r2, #0]
 8008ba4:	d1de      	bne.n	8008b64 <_free_r+0x24>
 8008ba6:	6818      	ldr	r0, [r3, #0]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	4401      	add	r1, r0
 8008bac:	6011      	str	r1, [r2, #0]
 8008bae:	6053      	str	r3, [r2, #4]
 8008bb0:	e7d8      	b.n	8008b64 <_free_r+0x24>
 8008bb2:	d902      	bls.n	8008bba <_free_r+0x7a>
 8008bb4:	230c      	movs	r3, #12
 8008bb6:	602b      	str	r3, [r5, #0]
 8008bb8:	e7d4      	b.n	8008b64 <_free_r+0x24>
 8008bba:	6820      	ldr	r0, [r4, #0]
 8008bbc:	1821      	adds	r1, r4, r0
 8008bbe:	428b      	cmp	r3, r1
 8008bc0:	bf01      	itttt	eq
 8008bc2:	6819      	ldreq	r1, [r3, #0]
 8008bc4:	685b      	ldreq	r3, [r3, #4]
 8008bc6:	1809      	addeq	r1, r1, r0
 8008bc8:	6021      	streq	r1, [r4, #0]
 8008bca:	6063      	str	r3, [r4, #4]
 8008bcc:	6054      	str	r4, [r2, #4]
 8008bce:	e7c9      	b.n	8008b64 <_free_r+0x24>
 8008bd0:	bd38      	pop	{r3, r4, r5, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20001bd0 	.word	0x20001bd0

08008bd8 <__ssputs_r>:
 8008bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bdc:	688e      	ldr	r6, [r1, #8]
 8008bde:	4682      	mov	sl, r0
 8008be0:	429e      	cmp	r6, r3
 8008be2:	460c      	mov	r4, r1
 8008be4:	4690      	mov	r8, r2
 8008be6:	461f      	mov	r7, r3
 8008be8:	d838      	bhi.n	8008c5c <__ssputs_r+0x84>
 8008bea:	898a      	ldrh	r2, [r1, #12]
 8008bec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bf0:	d032      	beq.n	8008c58 <__ssputs_r+0x80>
 8008bf2:	6825      	ldr	r5, [r4, #0]
 8008bf4:	6909      	ldr	r1, [r1, #16]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	eba5 0901 	sub.w	r9, r5, r1
 8008bfc:	6965      	ldr	r5, [r4, #20]
 8008bfe:	444b      	add	r3, r9
 8008c00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c08:	106d      	asrs	r5, r5, #1
 8008c0a:	429d      	cmp	r5, r3
 8008c0c:	bf38      	it	cc
 8008c0e:	461d      	movcc	r5, r3
 8008c10:	0553      	lsls	r3, r2, #21
 8008c12:	d531      	bpl.n	8008c78 <__ssputs_r+0xa0>
 8008c14:	4629      	mov	r1, r5
 8008c16:	f7fd fed3 	bl	80069c0 <_malloc_r>
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	b950      	cbnz	r0, 8008c34 <__ssputs_r+0x5c>
 8008c1e:	230c      	movs	r3, #12
 8008c20:	f04f 30ff 	mov.w	r0, #4294967295
 8008c24:	f8ca 3000 	str.w	r3, [sl]
 8008c28:	89a3      	ldrh	r3, [r4, #12]
 8008c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c2e:	81a3      	strh	r3, [r4, #12]
 8008c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c34:	464a      	mov	r2, r9
 8008c36:	6921      	ldr	r1, [r4, #16]
 8008c38:	f7fd feab 	bl	8006992 <memcpy>
 8008c3c:	89a3      	ldrh	r3, [r4, #12]
 8008c3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c46:	81a3      	strh	r3, [r4, #12]
 8008c48:	6126      	str	r6, [r4, #16]
 8008c4a:	444e      	add	r6, r9
 8008c4c:	6026      	str	r6, [r4, #0]
 8008c4e:	463e      	mov	r6, r7
 8008c50:	6165      	str	r5, [r4, #20]
 8008c52:	eba5 0509 	sub.w	r5, r5, r9
 8008c56:	60a5      	str	r5, [r4, #8]
 8008c58:	42be      	cmp	r6, r7
 8008c5a:	d900      	bls.n	8008c5e <__ssputs_r+0x86>
 8008c5c:	463e      	mov	r6, r7
 8008c5e:	4632      	mov	r2, r6
 8008c60:	4641      	mov	r1, r8
 8008c62:	6820      	ldr	r0, [r4, #0]
 8008c64:	f000 f968 	bl	8008f38 <memmove>
 8008c68:	68a3      	ldr	r3, [r4, #8]
 8008c6a:	6822      	ldr	r2, [r4, #0]
 8008c6c:	1b9b      	subs	r3, r3, r6
 8008c6e:	4432      	add	r2, r6
 8008c70:	2000      	movs	r0, #0
 8008c72:	60a3      	str	r3, [r4, #8]
 8008c74:	6022      	str	r2, [r4, #0]
 8008c76:	e7db      	b.n	8008c30 <__ssputs_r+0x58>
 8008c78:	462a      	mov	r2, r5
 8008c7a:	f000 f977 	bl	8008f6c <_realloc_r>
 8008c7e:	4606      	mov	r6, r0
 8008c80:	2800      	cmp	r0, #0
 8008c82:	d1e1      	bne.n	8008c48 <__ssputs_r+0x70>
 8008c84:	4650      	mov	r0, sl
 8008c86:	6921      	ldr	r1, [r4, #16]
 8008c88:	f7ff ff5a 	bl	8008b40 <_free_r>
 8008c8c:	e7c7      	b.n	8008c1e <__ssputs_r+0x46>
	...

08008c90 <_svfiprintf_r>:
 8008c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c94:	4698      	mov	r8, r3
 8008c96:	898b      	ldrh	r3, [r1, #12]
 8008c98:	4607      	mov	r7, r0
 8008c9a:	061b      	lsls	r3, r3, #24
 8008c9c:	460d      	mov	r5, r1
 8008c9e:	4614      	mov	r4, r2
 8008ca0:	b09d      	sub	sp, #116	; 0x74
 8008ca2:	d50e      	bpl.n	8008cc2 <_svfiprintf_r+0x32>
 8008ca4:	690b      	ldr	r3, [r1, #16]
 8008ca6:	b963      	cbnz	r3, 8008cc2 <_svfiprintf_r+0x32>
 8008ca8:	2140      	movs	r1, #64	; 0x40
 8008caa:	f7fd fe89 	bl	80069c0 <_malloc_r>
 8008cae:	6028      	str	r0, [r5, #0]
 8008cb0:	6128      	str	r0, [r5, #16]
 8008cb2:	b920      	cbnz	r0, 8008cbe <_svfiprintf_r+0x2e>
 8008cb4:	230c      	movs	r3, #12
 8008cb6:	603b      	str	r3, [r7, #0]
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbc:	e0d1      	b.n	8008e62 <_svfiprintf_r+0x1d2>
 8008cbe:	2340      	movs	r3, #64	; 0x40
 8008cc0:	616b      	str	r3, [r5, #20]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc6:	2320      	movs	r3, #32
 8008cc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ccc:	2330      	movs	r3, #48	; 0x30
 8008cce:	f04f 0901 	mov.w	r9, #1
 8008cd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cd6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008e7c <_svfiprintf_r+0x1ec>
 8008cda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cde:	4623      	mov	r3, r4
 8008ce0:	469a      	mov	sl, r3
 8008ce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ce6:	b10a      	cbz	r2, 8008cec <_svfiprintf_r+0x5c>
 8008ce8:	2a25      	cmp	r2, #37	; 0x25
 8008cea:	d1f9      	bne.n	8008ce0 <_svfiprintf_r+0x50>
 8008cec:	ebba 0b04 	subs.w	fp, sl, r4
 8008cf0:	d00b      	beq.n	8008d0a <_svfiprintf_r+0x7a>
 8008cf2:	465b      	mov	r3, fp
 8008cf4:	4622      	mov	r2, r4
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	f7ff ff6d 	bl	8008bd8 <__ssputs_r>
 8008cfe:	3001      	adds	r0, #1
 8008d00:	f000 80aa 	beq.w	8008e58 <_svfiprintf_r+0x1c8>
 8008d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d06:	445a      	add	r2, fp
 8008d08:	9209      	str	r2, [sp, #36]	; 0x24
 8008d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 80a2 	beq.w	8008e58 <_svfiprintf_r+0x1c8>
 8008d14:	2300      	movs	r3, #0
 8008d16:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d1e:	f10a 0a01 	add.w	sl, sl, #1
 8008d22:	9304      	str	r3, [sp, #16]
 8008d24:	9307      	str	r3, [sp, #28]
 8008d26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d2a:	931a      	str	r3, [sp, #104]	; 0x68
 8008d2c:	4654      	mov	r4, sl
 8008d2e:	2205      	movs	r2, #5
 8008d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d34:	4851      	ldr	r0, [pc, #324]	; (8008e7c <_svfiprintf_r+0x1ec>)
 8008d36:	f7ff fb59 	bl	80083ec <memchr>
 8008d3a:	9a04      	ldr	r2, [sp, #16]
 8008d3c:	b9d8      	cbnz	r0, 8008d76 <_svfiprintf_r+0xe6>
 8008d3e:	06d0      	lsls	r0, r2, #27
 8008d40:	bf44      	itt	mi
 8008d42:	2320      	movmi	r3, #32
 8008d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d48:	0711      	lsls	r1, r2, #28
 8008d4a:	bf44      	itt	mi
 8008d4c:	232b      	movmi	r3, #43	; 0x2b
 8008d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d52:	f89a 3000 	ldrb.w	r3, [sl]
 8008d56:	2b2a      	cmp	r3, #42	; 0x2a
 8008d58:	d015      	beq.n	8008d86 <_svfiprintf_r+0xf6>
 8008d5a:	4654      	mov	r4, sl
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	f04f 0c0a 	mov.w	ip, #10
 8008d62:	9a07      	ldr	r2, [sp, #28]
 8008d64:	4621      	mov	r1, r4
 8008d66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d6a:	3b30      	subs	r3, #48	; 0x30
 8008d6c:	2b09      	cmp	r3, #9
 8008d6e:	d94e      	bls.n	8008e0e <_svfiprintf_r+0x17e>
 8008d70:	b1b0      	cbz	r0, 8008da0 <_svfiprintf_r+0x110>
 8008d72:	9207      	str	r2, [sp, #28]
 8008d74:	e014      	b.n	8008da0 <_svfiprintf_r+0x110>
 8008d76:	eba0 0308 	sub.w	r3, r0, r8
 8008d7a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	46a2      	mov	sl, r4
 8008d82:	9304      	str	r3, [sp, #16]
 8008d84:	e7d2      	b.n	8008d2c <_svfiprintf_r+0x9c>
 8008d86:	9b03      	ldr	r3, [sp, #12]
 8008d88:	1d19      	adds	r1, r3, #4
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	9103      	str	r1, [sp, #12]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	bfbb      	ittet	lt
 8008d92:	425b      	neglt	r3, r3
 8008d94:	f042 0202 	orrlt.w	r2, r2, #2
 8008d98:	9307      	strge	r3, [sp, #28]
 8008d9a:	9307      	strlt	r3, [sp, #28]
 8008d9c:	bfb8      	it	lt
 8008d9e:	9204      	strlt	r2, [sp, #16]
 8008da0:	7823      	ldrb	r3, [r4, #0]
 8008da2:	2b2e      	cmp	r3, #46	; 0x2e
 8008da4:	d10c      	bne.n	8008dc0 <_svfiprintf_r+0x130>
 8008da6:	7863      	ldrb	r3, [r4, #1]
 8008da8:	2b2a      	cmp	r3, #42	; 0x2a
 8008daa:	d135      	bne.n	8008e18 <_svfiprintf_r+0x188>
 8008dac:	9b03      	ldr	r3, [sp, #12]
 8008dae:	3402      	adds	r4, #2
 8008db0:	1d1a      	adds	r2, r3, #4
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	9203      	str	r2, [sp, #12]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	bfb8      	it	lt
 8008dba:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dbe:	9305      	str	r3, [sp, #20]
 8008dc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e8c <_svfiprintf_r+0x1fc>
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	4650      	mov	r0, sl
 8008dc8:	7821      	ldrb	r1, [r4, #0]
 8008dca:	f7ff fb0f 	bl	80083ec <memchr>
 8008dce:	b140      	cbz	r0, 8008de2 <_svfiprintf_r+0x152>
 8008dd0:	2340      	movs	r3, #64	; 0x40
 8008dd2:	eba0 000a 	sub.w	r0, r0, sl
 8008dd6:	fa03 f000 	lsl.w	r0, r3, r0
 8008dda:	9b04      	ldr	r3, [sp, #16]
 8008ddc:	3401      	adds	r4, #1
 8008dde:	4303      	orrs	r3, r0
 8008de0:	9304      	str	r3, [sp, #16]
 8008de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de6:	2206      	movs	r2, #6
 8008de8:	4825      	ldr	r0, [pc, #148]	; (8008e80 <_svfiprintf_r+0x1f0>)
 8008dea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dee:	f7ff fafd 	bl	80083ec <memchr>
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d038      	beq.n	8008e68 <_svfiprintf_r+0x1d8>
 8008df6:	4b23      	ldr	r3, [pc, #140]	; (8008e84 <_svfiprintf_r+0x1f4>)
 8008df8:	bb1b      	cbnz	r3, 8008e42 <_svfiprintf_r+0x1b2>
 8008dfa:	9b03      	ldr	r3, [sp, #12]
 8008dfc:	3307      	adds	r3, #7
 8008dfe:	f023 0307 	bic.w	r3, r3, #7
 8008e02:	3308      	adds	r3, #8
 8008e04:	9303      	str	r3, [sp, #12]
 8008e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e08:	4433      	add	r3, r6
 8008e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e0c:	e767      	b.n	8008cde <_svfiprintf_r+0x4e>
 8008e0e:	460c      	mov	r4, r1
 8008e10:	2001      	movs	r0, #1
 8008e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e16:	e7a5      	b.n	8008d64 <_svfiprintf_r+0xd4>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f04f 0c0a 	mov.w	ip, #10
 8008e1e:	4619      	mov	r1, r3
 8008e20:	3401      	adds	r4, #1
 8008e22:	9305      	str	r3, [sp, #20]
 8008e24:	4620      	mov	r0, r4
 8008e26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e2a:	3a30      	subs	r2, #48	; 0x30
 8008e2c:	2a09      	cmp	r2, #9
 8008e2e:	d903      	bls.n	8008e38 <_svfiprintf_r+0x1a8>
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d0c5      	beq.n	8008dc0 <_svfiprintf_r+0x130>
 8008e34:	9105      	str	r1, [sp, #20]
 8008e36:	e7c3      	b.n	8008dc0 <_svfiprintf_r+0x130>
 8008e38:	4604      	mov	r4, r0
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e40:	e7f0      	b.n	8008e24 <_svfiprintf_r+0x194>
 8008e42:	ab03      	add	r3, sp, #12
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	462a      	mov	r2, r5
 8008e48:	4638      	mov	r0, r7
 8008e4a:	4b0f      	ldr	r3, [pc, #60]	; (8008e88 <_svfiprintf_r+0x1f8>)
 8008e4c:	a904      	add	r1, sp, #16
 8008e4e:	f7fd feaf 	bl	8006bb0 <_printf_float>
 8008e52:	1c42      	adds	r2, r0, #1
 8008e54:	4606      	mov	r6, r0
 8008e56:	d1d6      	bne.n	8008e06 <_svfiprintf_r+0x176>
 8008e58:	89ab      	ldrh	r3, [r5, #12]
 8008e5a:	065b      	lsls	r3, r3, #25
 8008e5c:	f53f af2c 	bmi.w	8008cb8 <_svfiprintf_r+0x28>
 8008e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e62:	b01d      	add	sp, #116	; 0x74
 8008e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e68:	ab03      	add	r3, sp, #12
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	462a      	mov	r2, r5
 8008e6e:	4638      	mov	r0, r7
 8008e70:	4b05      	ldr	r3, [pc, #20]	; (8008e88 <_svfiprintf_r+0x1f8>)
 8008e72:	a904      	add	r1, sp, #16
 8008e74:	f7fe f938 	bl	80070e8 <_printf_i>
 8008e78:	e7eb      	b.n	8008e52 <_svfiprintf_r+0x1c2>
 8008e7a:	bf00      	nop
 8008e7c:	080098dc 	.word	0x080098dc
 8008e80:	080098e6 	.word	0x080098e6
 8008e84:	08006bb1 	.word	0x08006bb1
 8008e88:	08008bd9 	.word	0x08008bd9
 8008e8c:	080098e2 	.word	0x080098e2

08008e90 <_read_r>:
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	4604      	mov	r4, r0
 8008e94:	4608      	mov	r0, r1
 8008e96:	4611      	mov	r1, r2
 8008e98:	2200      	movs	r2, #0
 8008e9a:	4d05      	ldr	r5, [pc, #20]	; (8008eb0 <_read_r+0x20>)
 8008e9c:	602a      	str	r2, [r5, #0]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	f7f8 fa1f 	bl	80012e2 <_read>
 8008ea4:	1c43      	adds	r3, r0, #1
 8008ea6:	d102      	bne.n	8008eae <_read_r+0x1e>
 8008ea8:	682b      	ldr	r3, [r5, #0]
 8008eaa:	b103      	cbz	r3, 8008eae <_read_r+0x1e>
 8008eac:	6023      	str	r3, [r4, #0]
 8008eae:	bd38      	pop	{r3, r4, r5, pc}
 8008eb0:	20001d20 	.word	0x20001d20

08008eb4 <__assert_func>:
 8008eb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008eb6:	4614      	mov	r4, r2
 8008eb8:	461a      	mov	r2, r3
 8008eba:	4b09      	ldr	r3, [pc, #36]	; (8008ee0 <__assert_func+0x2c>)
 8008ebc:	4605      	mov	r5, r0
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68d8      	ldr	r0, [r3, #12]
 8008ec2:	b14c      	cbz	r4, 8008ed8 <__assert_func+0x24>
 8008ec4:	4b07      	ldr	r3, [pc, #28]	; (8008ee4 <__assert_func+0x30>)
 8008ec6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008eca:	9100      	str	r1, [sp, #0]
 8008ecc:	462b      	mov	r3, r5
 8008ece:	4906      	ldr	r1, [pc, #24]	; (8008ee8 <__assert_func+0x34>)
 8008ed0:	f000 f80e 	bl	8008ef0 <fiprintf>
 8008ed4:	f000 fa96 	bl	8009404 <abort>
 8008ed8:	4b04      	ldr	r3, [pc, #16]	; (8008eec <__assert_func+0x38>)
 8008eda:	461c      	mov	r4, r3
 8008edc:	e7f3      	b.n	8008ec6 <__assert_func+0x12>
 8008ede:	bf00      	nop
 8008ee0:	20000010 	.word	0x20000010
 8008ee4:	080098ed 	.word	0x080098ed
 8008ee8:	080098fa 	.word	0x080098fa
 8008eec:	08009928 	.word	0x08009928

08008ef0 <fiprintf>:
 8008ef0:	b40e      	push	{r1, r2, r3}
 8008ef2:	b503      	push	{r0, r1, lr}
 8008ef4:	4601      	mov	r1, r0
 8008ef6:	ab03      	add	r3, sp, #12
 8008ef8:	4805      	ldr	r0, [pc, #20]	; (8008f10 <fiprintf+0x20>)
 8008efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008efe:	6800      	ldr	r0, [r0, #0]
 8008f00:	9301      	str	r3, [sp, #4]
 8008f02:	f000 f881 	bl	8009008 <_vfiprintf_r>
 8008f06:	b002      	add	sp, #8
 8008f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f0c:	b003      	add	sp, #12
 8008f0e:	4770      	bx	lr
 8008f10:	20000010 	.word	0x20000010

08008f14 <__ascii_mbtowc>:
 8008f14:	b082      	sub	sp, #8
 8008f16:	b901      	cbnz	r1, 8008f1a <__ascii_mbtowc+0x6>
 8008f18:	a901      	add	r1, sp, #4
 8008f1a:	b142      	cbz	r2, 8008f2e <__ascii_mbtowc+0x1a>
 8008f1c:	b14b      	cbz	r3, 8008f32 <__ascii_mbtowc+0x1e>
 8008f1e:	7813      	ldrb	r3, [r2, #0]
 8008f20:	600b      	str	r3, [r1, #0]
 8008f22:	7812      	ldrb	r2, [r2, #0]
 8008f24:	1e10      	subs	r0, r2, #0
 8008f26:	bf18      	it	ne
 8008f28:	2001      	movne	r0, #1
 8008f2a:	b002      	add	sp, #8
 8008f2c:	4770      	bx	lr
 8008f2e:	4610      	mov	r0, r2
 8008f30:	e7fb      	b.n	8008f2a <__ascii_mbtowc+0x16>
 8008f32:	f06f 0001 	mvn.w	r0, #1
 8008f36:	e7f8      	b.n	8008f2a <__ascii_mbtowc+0x16>

08008f38 <memmove>:
 8008f38:	4288      	cmp	r0, r1
 8008f3a:	b510      	push	{r4, lr}
 8008f3c:	eb01 0402 	add.w	r4, r1, r2
 8008f40:	d902      	bls.n	8008f48 <memmove+0x10>
 8008f42:	4284      	cmp	r4, r0
 8008f44:	4623      	mov	r3, r4
 8008f46:	d807      	bhi.n	8008f58 <memmove+0x20>
 8008f48:	1e43      	subs	r3, r0, #1
 8008f4a:	42a1      	cmp	r1, r4
 8008f4c:	d008      	beq.n	8008f60 <memmove+0x28>
 8008f4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f56:	e7f8      	b.n	8008f4a <memmove+0x12>
 8008f58:	4601      	mov	r1, r0
 8008f5a:	4402      	add	r2, r0
 8008f5c:	428a      	cmp	r2, r1
 8008f5e:	d100      	bne.n	8008f62 <memmove+0x2a>
 8008f60:	bd10      	pop	{r4, pc}
 8008f62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f6a:	e7f7      	b.n	8008f5c <memmove+0x24>

08008f6c <_realloc_r>:
 8008f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6e:	4607      	mov	r7, r0
 8008f70:	4614      	mov	r4, r2
 8008f72:	460e      	mov	r6, r1
 8008f74:	b921      	cbnz	r1, 8008f80 <_realloc_r+0x14>
 8008f76:	4611      	mov	r1, r2
 8008f78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f7c:	f7fd bd20 	b.w	80069c0 <_malloc_r>
 8008f80:	b922      	cbnz	r2, 8008f8c <_realloc_r+0x20>
 8008f82:	f7ff fddd 	bl	8008b40 <_free_r>
 8008f86:	4625      	mov	r5, r4
 8008f88:	4628      	mov	r0, r5
 8008f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f8c:	f000 faa6 	bl	80094dc <_malloc_usable_size_r>
 8008f90:	42a0      	cmp	r0, r4
 8008f92:	d20f      	bcs.n	8008fb4 <_realloc_r+0x48>
 8008f94:	4621      	mov	r1, r4
 8008f96:	4638      	mov	r0, r7
 8008f98:	f7fd fd12 	bl	80069c0 <_malloc_r>
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d0f2      	beq.n	8008f88 <_realloc_r+0x1c>
 8008fa2:	4631      	mov	r1, r6
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	f7fd fcf4 	bl	8006992 <memcpy>
 8008faa:	4631      	mov	r1, r6
 8008fac:	4638      	mov	r0, r7
 8008fae:	f7ff fdc7 	bl	8008b40 <_free_r>
 8008fb2:	e7e9      	b.n	8008f88 <_realloc_r+0x1c>
 8008fb4:	4635      	mov	r5, r6
 8008fb6:	e7e7      	b.n	8008f88 <_realloc_r+0x1c>

08008fb8 <__sfputc_r>:
 8008fb8:	6893      	ldr	r3, [r2, #8]
 8008fba:	b410      	push	{r4}
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	6093      	str	r3, [r2, #8]
 8008fc2:	da07      	bge.n	8008fd4 <__sfputc_r+0x1c>
 8008fc4:	6994      	ldr	r4, [r2, #24]
 8008fc6:	42a3      	cmp	r3, r4
 8008fc8:	db01      	blt.n	8008fce <__sfputc_r+0x16>
 8008fca:	290a      	cmp	r1, #10
 8008fcc:	d102      	bne.n	8008fd4 <__sfputc_r+0x1c>
 8008fce:	bc10      	pop	{r4}
 8008fd0:	f000 b94a 	b.w	8009268 <__swbuf_r>
 8008fd4:	6813      	ldr	r3, [r2, #0]
 8008fd6:	1c58      	adds	r0, r3, #1
 8008fd8:	6010      	str	r0, [r2, #0]
 8008fda:	7019      	strb	r1, [r3, #0]
 8008fdc:	4608      	mov	r0, r1
 8008fde:	bc10      	pop	{r4}
 8008fe0:	4770      	bx	lr

08008fe2 <__sfputs_r>:
 8008fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe4:	4606      	mov	r6, r0
 8008fe6:	460f      	mov	r7, r1
 8008fe8:	4614      	mov	r4, r2
 8008fea:	18d5      	adds	r5, r2, r3
 8008fec:	42ac      	cmp	r4, r5
 8008fee:	d101      	bne.n	8008ff4 <__sfputs_r+0x12>
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	e007      	b.n	8009004 <__sfputs_r+0x22>
 8008ff4:	463a      	mov	r2, r7
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ffc:	f7ff ffdc 	bl	8008fb8 <__sfputc_r>
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	d1f3      	bne.n	8008fec <__sfputs_r+0xa>
 8009004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009008 <_vfiprintf_r>:
 8009008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	460d      	mov	r5, r1
 800900e:	4614      	mov	r4, r2
 8009010:	4698      	mov	r8, r3
 8009012:	4606      	mov	r6, r0
 8009014:	b09d      	sub	sp, #116	; 0x74
 8009016:	b118      	cbz	r0, 8009020 <_vfiprintf_r+0x18>
 8009018:	6983      	ldr	r3, [r0, #24]
 800901a:	b90b      	cbnz	r3, 8009020 <_vfiprintf_r+0x18>
 800901c:	f7fd fbf4 	bl	8006808 <__sinit>
 8009020:	4b89      	ldr	r3, [pc, #548]	; (8009248 <_vfiprintf_r+0x240>)
 8009022:	429d      	cmp	r5, r3
 8009024:	d11b      	bne.n	800905e <_vfiprintf_r+0x56>
 8009026:	6875      	ldr	r5, [r6, #4]
 8009028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800902a:	07d9      	lsls	r1, r3, #31
 800902c:	d405      	bmi.n	800903a <_vfiprintf_r+0x32>
 800902e:	89ab      	ldrh	r3, [r5, #12]
 8009030:	059a      	lsls	r2, r3, #22
 8009032:	d402      	bmi.n	800903a <_vfiprintf_r+0x32>
 8009034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009036:	f7fd fcaa 	bl	800698e <__retarget_lock_acquire_recursive>
 800903a:	89ab      	ldrh	r3, [r5, #12]
 800903c:	071b      	lsls	r3, r3, #28
 800903e:	d501      	bpl.n	8009044 <_vfiprintf_r+0x3c>
 8009040:	692b      	ldr	r3, [r5, #16]
 8009042:	b9eb      	cbnz	r3, 8009080 <_vfiprintf_r+0x78>
 8009044:	4629      	mov	r1, r5
 8009046:	4630      	mov	r0, r6
 8009048:	f000 f96e 	bl	8009328 <__swsetup_r>
 800904c:	b1c0      	cbz	r0, 8009080 <_vfiprintf_r+0x78>
 800904e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009050:	07dc      	lsls	r4, r3, #31
 8009052:	d50e      	bpl.n	8009072 <_vfiprintf_r+0x6a>
 8009054:	f04f 30ff 	mov.w	r0, #4294967295
 8009058:	b01d      	add	sp, #116	; 0x74
 800905a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800905e:	4b7b      	ldr	r3, [pc, #492]	; (800924c <_vfiprintf_r+0x244>)
 8009060:	429d      	cmp	r5, r3
 8009062:	d101      	bne.n	8009068 <_vfiprintf_r+0x60>
 8009064:	68b5      	ldr	r5, [r6, #8]
 8009066:	e7df      	b.n	8009028 <_vfiprintf_r+0x20>
 8009068:	4b79      	ldr	r3, [pc, #484]	; (8009250 <_vfiprintf_r+0x248>)
 800906a:	429d      	cmp	r5, r3
 800906c:	bf08      	it	eq
 800906e:	68f5      	ldreq	r5, [r6, #12]
 8009070:	e7da      	b.n	8009028 <_vfiprintf_r+0x20>
 8009072:	89ab      	ldrh	r3, [r5, #12]
 8009074:	0598      	lsls	r0, r3, #22
 8009076:	d4ed      	bmi.n	8009054 <_vfiprintf_r+0x4c>
 8009078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800907a:	f7fd fc89 	bl	8006990 <__retarget_lock_release_recursive>
 800907e:	e7e9      	b.n	8009054 <_vfiprintf_r+0x4c>
 8009080:	2300      	movs	r3, #0
 8009082:	9309      	str	r3, [sp, #36]	; 0x24
 8009084:	2320      	movs	r3, #32
 8009086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800908a:	2330      	movs	r3, #48	; 0x30
 800908c:	f04f 0901 	mov.w	r9, #1
 8009090:	f8cd 800c 	str.w	r8, [sp, #12]
 8009094:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009254 <_vfiprintf_r+0x24c>
 8009098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800909c:	4623      	mov	r3, r4
 800909e:	469a      	mov	sl, r3
 80090a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090a4:	b10a      	cbz	r2, 80090aa <_vfiprintf_r+0xa2>
 80090a6:	2a25      	cmp	r2, #37	; 0x25
 80090a8:	d1f9      	bne.n	800909e <_vfiprintf_r+0x96>
 80090aa:	ebba 0b04 	subs.w	fp, sl, r4
 80090ae:	d00b      	beq.n	80090c8 <_vfiprintf_r+0xc0>
 80090b0:	465b      	mov	r3, fp
 80090b2:	4622      	mov	r2, r4
 80090b4:	4629      	mov	r1, r5
 80090b6:	4630      	mov	r0, r6
 80090b8:	f7ff ff93 	bl	8008fe2 <__sfputs_r>
 80090bc:	3001      	adds	r0, #1
 80090be:	f000 80aa 	beq.w	8009216 <_vfiprintf_r+0x20e>
 80090c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090c4:	445a      	add	r2, fp
 80090c6:	9209      	str	r2, [sp, #36]	; 0x24
 80090c8:	f89a 3000 	ldrb.w	r3, [sl]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 80a2 	beq.w	8009216 <_vfiprintf_r+0x20e>
 80090d2:	2300      	movs	r3, #0
 80090d4:	f04f 32ff 	mov.w	r2, #4294967295
 80090d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090dc:	f10a 0a01 	add.w	sl, sl, #1
 80090e0:	9304      	str	r3, [sp, #16]
 80090e2:	9307      	str	r3, [sp, #28]
 80090e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090e8:	931a      	str	r3, [sp, #104]	; 0x68
 80090ea:	4654      	mov	r4, sl
 80090ec:	2205      	movs	r2, #5
 80090ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f2:	4858      	ldr	r0, [pc, #352]	; (8009254 <_vfiprintf_r+0x24c>)
 80090f4:	f7ff f97a 	bl	80083ec <memchr>
 80090f8:	9a04      	ldr	r2, [sp, #16]
 80090fa:	b9d8      	cbnz	r0, 8009134 <_vfiprintf_r+0x12c>
 80090fc:	06d1      	lsls	r1, r2, #27
 80090fe:	bf44      	itt	mi
 8009100:	2320      	movmi	r3, #32
 8009102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009106:	0713      	lsls	r3, r2, #28
 8009108:	bf44      	itt	mi
 800910a:	232b      	movmi	r3, #43	; 0x2b
 800910c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009110:	f89a 3000 	ldrb.w	r3, [sl]
 8009114:	2b2a      	cmp	r3, #42	; 0x2a
 8009116:	d015      	beq.n	8009144 <_vfiprintf_r+0x13c>
 8009118:	4654      	mov	r4, sl
 800911a:	2000      	movs	r0, #0
 800911c:	f04f 0c0a 	mov.w	ip, #10
 8009120:	9a07      	ldr	r2, [sp, #28]
 8009122:	4621      	mov	r1, r4
 8009124:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009128:	3b30      	subs	r3, #48	; 0x30
 800912a:	2b09      	cmp	r3, #9
 800912c:	d94e      	bls.n	80091cc <_vfiprintf_r+0x1c4>
 800912e:	b1b0      	cbz	r0, 800915e <_vfiprintf_r+0x156>
 8009130:	9207      	str	r2, [sp, #28]
 8009132:	e014      	b.n	800915e <_vfiprintf_r+0x156>
 8009134:	eba0 0308 	sub.w	r3, r0, r8
 8009138:	fa09 f303 	lsl.w	r3, r9, r3
 800913c:	4313      	orrs	r3, r2
 800913e:	46a2      	mov	sl, r4
 8009140:	9304      	str	r3, [sp, #16]
 8009142:	e7d2      	b.n	80090ea <_vfiprintf_r+0xe2>
 8009144:	9b03      	ldr	r3, [sp, #12]
 8009146:	1d19      	adds	r1, r3, #4
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	9103      	str	r1, [sp, #12]
 800914c:	2b00      	cmp	r3, #0
 800914e:	bfbb      	ittet	lt
 8009150:	425b      	neglt	r3, r3
 8009152:	f042 0202 	orrlt.w	r2, r2, #2
 8009156:	9307      	strge	r3, [sp, #28]
 8009158:	9307      	strlt	r3, [sp, #28]
 800915a:	bfb8      	it	lt
 800915c:	9204      	strlt	r2, [sp, #16]
 800915e:	7823      	ldrb	r3, [r4, #0]
 8009160:	2b2e      	cmp	r3, #46	; 0x2e
 8009162:	d10c      	bne.n	800917e <_vfiprintf_r+0x176>
 8009164:	7863      	ldrb	r3, [r4, #1]
 8009166:	2b2a      	cmp	r3, #42	; 0x2a
 8009168:	d135      	bne.n	80091d6 <_vfiprintf_r+0x1ce>
 800916a:	9b03      	ldr	r3, [sp, #12]
 800916c:	3402      	adds	r4, #2
 800916e:	1d1a      	adds	r2, r3, #4
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	9203      	str	r2, [sp, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	bfb8      	it	lt
 8009178:	f04f 33ff 	movlt.w	r3, #4294967295
 800917c:	9305      	str	r3, [sp, #20]
 800917e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009264 <_vfiprintf_r+0x25c>
 8009182:	2203      	movs	r2, #3
 8009184:	4650      	mov	r0, sl
 8009186:	7821      	ldrb	r1, [r4, #0]
 8009188:	f7ff f930 	bl	80083ec <memchr>
 800918c:	b140      	cbz	r0, 80091a0 <_vfiprintf_r+0x198>
 800918e:	2340      	movs	r3, #64	; 0x40
 8009190:	eba0 000a 	sub.w	r0, r0, sl
 8009194:	fa03 f000 	lsl.w	r0, r3, r0
 8009198:	9b04      	ldr	r3, [sp, #16]
 800919a:	3401      	adds	r4, #1
 800919c:	4303      	orrs	r3, r0
 800919e:	9304      	str	r3, [sp, #16]
 80091a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a4:	2206      	movs	r2, #6
 80091a6:	482c      	ldr	r0, [pc, #176]	; (8009258 <_vfiprintf_r+0x250>)
 80091a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091ac:	f7ff f91e 	bl	80083ec <memchr>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d03f      	beq.n	8009234 <_vfiprintf_r+0x22c>
 80091b4:	4b29      	ldr	r3, [pc, #164]	; (800925c <_vfiprintf_r+0x254>)
 80091b6:	bb1b      	cbnz	r3, 8009200 <_vfiprintf_r+0x1f8>
 80091b8:	9b03      	ldr	r3, [sp, #12]
 80091ba:	3307      	adds	r3, #7
 80091bc:	f023 0307 	bic.w	r3, r3, #7
 80091c0:	3308      	adds	r3, #8
 80091c2:	9303      	str	r3, [sp, #12]
 80091c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c6:	443b      	add	r3, r7
 80091c8:	9309      	str	r3, [sp, #36]	; 0x24
 80091ca:	e767      	b.n	800909c <_vfiprintf_r+0x94>
 80091cc:	460c      	mov	r4, r1
 80091ce:	2001      	movs	r0, #1
 80091d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80091d4:	e7a5      	b.n	8009122 <_vfiprintf_r+0x11a>
 80091d6:	2300      	movs	r3, #0
 80091d8:	f04f 0c0a 	mov.w	ip, #10
 80091dc:	4619      	mov	r1, r3
 80091de:	3401      	adds	r4, #1
 80091e0:	9305      	str	r3, [sp, #20]
 80091e2:	4620      	mov	r0, r4
 80091e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091e8:	3a30      	subs	r2, #48	; 0x30
 80091ea:	2a09      	cmp	r2, #9
 80091ec:	d903      	bls.n	80091f6 <_vfiprintf_r+0x1ee>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0c5      	beq.n	800917e <_vfiprintf_r+0x176>
 80091f2:	9105      	str	r1, [sp, #20]
 80091f4:	e7c3      	b.n	800917e <_vfiprintf_r+0x176>
 80091f6:	4604      	mov	r4, r0
 80091f8:	2301      	movs	r3, #1
 80091fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80091fe:	e7f0      	b.n	80091e2 <_vfiprintf_r+0x1da>
 8009200:	ab03      	add	r3, sp, #12
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	462a      	mov	r2, r5
 8009206:	4630      	mov	r0, r6
 8009208:	4b15      	ldr	r3, [pc, #84]	; (8009260 <_vfiprintf_r+0x258>)
 800920a:	a904      	add	r1, sp, #16
 800920c:	f7fd fcd0 	bl	8006bb0 <_printf_float>
 8009210:	4607      	mov	r7, r0
 8009212:	1c78      	adds	r0, r7, #1
 8009214:	d1d6      	bne.n	80091c4 <_vfiprintf_r+0x1bc>
 8009216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009218:	07d9      	lsls	r1, r3, #31
 800921a:	d405      	bmi.n	8009228 <_vfiprintf_r+0x220>
 800921c:	89ab      	ldrh	r3, [r5, #12]
 800921e:	059a      	lsls	r2, r3, #22
 8009220:	d402      	bmi.n	8009228 <_vfiprintf_r+0x220>
 8009222:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009224:	f7fd fbb4 	bl	8006990 <__retarget_lock_release_recursive>
 8009228:	89ab      	ldrh	r3, [r5, #12]
 800922a:	065b      	lsls	r3, r3, #25
 800922c:	f53f af12 	bmi.w	8009054 <_vfiprintf_r+0x4c>
 8009230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009232:	e711      	b.n	8009058 <_vfiprintf_r+0x50>
 8009234:	ab03      	add	r3, sp, #12
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	462a      	mov	r2, r5
 800923a:	4630      	mov	r0, r6
 800923c:	4b08      	ldr	r3, [pc, #32]	; (8009260 <_vfiprintf_r+0x258>)
 800923e:	a904      	add	r1, sp, #16
 8009240:	f7fd ff52 	bl	80070e8 <_printf_i>
 8009244:	e7e4      	b.n	8009210 <_vfiprintf_r+0x208>
 8009246:	bf00      	nop
 8009248:	08009670 	.word	0x08009670
 800924c:	08009690 	.word	0x08009690
 8009250:	08009650 	.word	0x08009650
 8009254:	080098dc 	.word	0x080098dc
 8009258:	080098e6 	.word	0x080098e6
 800925c:	08006bb1 	.word	0x08006bb1
 8009260:	08008fe3 	.word	0x08008fe3
 8009264:	080098e2 	.word	0x080098e2

08009268 <__swbuf_r>:
 8009268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926a:	460e      	mov	r6, r1
 800926c:	4614      	mov	r4, r2
 800926e:	4605      	mov	r5, r0
 8009270:	b118      	cbz	r0, 800927a <__swbuf_r+0x12>
 8009272:	6983      	ldr	r3, [r0, #24]
 8009274:	b90b      	cbnz	r3, 800927a <__swbuf_r+0x12>
 8009276:	f7fd fac7 	bl	8006808 <__sinit>
 800927a:	4b21      	ldr	r3, [pc, #132]	; (8009300 <__swbuf_r+0x98>)
 800927c:	429c      	cmp	r4, r3
 800927e:	d12b      	bne.n	80092d8 <__swbuf_r+0x70>
 8009280:	686c      	ldr	r4, [r5, #4]
 8009282:	69a3      	ldr	r3, [r4, #24]
 8009284:	60a3      	str	r3, [r4, #8]
 8009286:	89a3      	ldrh	r3, [r4, #12]
 8009288:	071a      	lsls	r2, r3, #28
 800928a:	d52f      	bpl.n	80092ec <__swbuf_r+0x84>
 800928c:	6923      	ldr	r3, [r4, #16]
 800928e:	b36b      	cbz	r3, 80092ec <__swbuf_r+0x84>
 8009290:	6923      	ldr	r3, [r4, #16]
 8009292:	6820      	ldr	r0, [r4, #0]
 8009294:	b2f6      	uxtb	r6, r6
 8009296:	1ac0      	subs	r0, r0, r3
 8009298:	6963      	ldr	r3, [r4, #20]
 800929a:	4637      	mov	r7, r6
 800929c:	4283      	cmp	r3, r0
 800929e:	dc04      	bgt.n	80092aa <__swbuf_r+0x42>
 80092a0:	4621      	mov	r1, r4
 80092a2:	4628      	mov	r0, r5
 80092a4:	f7ff f848 	bl	8008338 <_fflush_r>
 80092a8:	bb30      	cbnz	r0, 80092f8 <__swbuf_r+0x90>
 80092aa:	68a3      	ldr	r3, [r4, #8]
 80092ac:	3001      	adds	r0, #1
 80092ae:	3b01      	subs	r3, #1
 80092b0:	60a3      	str	r3, [r4, #8]
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	1c5a      	adds	r2, r3, #1
 80092b6:	6022      	str	r2, [r4, #0]
 80092b8:	701e      	strb	r6, [r3, #0]
 80092ba:	6963      	ldr	r3, [r4, #20]
 80092bc:	4283      	cmp	r3, r0
 80092be:	d004      	beq.n	80092ca <__swbuf_r+0x62>
 80092c0:	89a3      	ldrh	r3, [r4, #12]
 80092c2:	07db      	lsls	r3, r3, #31
 80092c4:	d506      	bpl.n	80092d4 <__swbuf_r+0x6c>
 80092c6:	2e0a      	cmp	r6, #10
 80092c8:	d104      	bne.n	80092d4 <__swbuf_r+0x6c>
 80092ca:	4621      	mov	r1, r4
 80092cc:	4628      	mov	r0, r5
 80092ce:	f7ff f833 	bl	8008338 <_fflush_r>
 80092d2:	b988      	cbnz	r0, 80092f8 <__swbuf_r+0x90>
 80092d4:	4638      	mov	r0, r7
 80092d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092d8:	4b0a      	ldr	r3, [pc, #40]	; (8009304 <__swbuf_r+0x9c>)
 80092da:	429c      	cmp	r4, r3
 80092dc:	d101      	bne.n	80092e2 <__swbuf_r+0x7a>
 80092de:	68ac      	ldr	r4, [r5, #8]
 80092e0:	e7cf      	b.n	8009282 <__swbuf_r+0x1a>
 80092e2:	4b09      	ldr	r3, [pc, #36]	; (8009308 <__swbuf_r+0xa0>)
 80092e4:	429c      	cmp	r4, r3
 80092e6:	bf08      	it	eq
 80092e8:	68ec      	ldreq	r4, [r5, #12]
 80092ea:	e7ca      	b.n	8009282 <__swbuf_r+0x1a>
 80092ec:	4621      	mov	r1, r4
 80092ee:	4628      	mov	r0, r5
 80092f0:	f000 f81a 	bl	8009328 <__swsetup_r>
 80092f4:	2800      	cmp	r0, #0
 80092f6:	d0cb      	beq.n	8009290 <__swbuf_r+0x28>
 80092f8:	f04f 37ff 	mov.w	r7, #4294967295
 80092fc:	e7ea      	b.n	80092d4 <__swbuf_r+0x6c>
 80092fe:	bf00      	nop
 8009300:	08009670 	.word	0x08009670
 8009304:	08009690 	.word	0x08009690
 8009308:	08009650 	.word	0x08009650

0800930c <__ascii_wctomb>:
 800930c:	4603      	mov	r3, r0
 800930e:	4608      	mov	r0, r1
 8009310:	b141      	cbz	r1, 8009324 <__ascii_wctomb+0x18>
 8009312:	2aff      	cmp	r2, #255	; 0xff
 8009314:	d904      	bls.n	8009320 <__ascii_wctomb+0x14>
 8009316:	228a      	movs	r2, #138	; 0x8a
 8009318:	f04f 30ff 	mov.w	r0, #4294967295
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	4770      	bx	lr
 8009320:	2001      	movs	r0, #1
 8009322:	700a      	strb	r2, [r1, #0]
 8009324:	4770      	bx	lr
	...

08009328 <__swsetup_r>:
 8009328:	4b32      	ldr	r3, [pc, #200]	; (80093f4 <__swsetup_r+0xcc>)
 800932a:	b570      	push	{r4, r5, r6, lr}
 800932c:	681d      	ldr	r5, [r3, #0]
 800932e:	4606      	mov	r6, r0
 8009330:	460c      	mov	r4, r1
 8009332:	b125      	cbz	r5, 800933e <__swsetup_r+0x16>
 8009334:	69ab      	ldr	r3, [r5, #24]
 8009336:	b913      	cbnz	r3, 800933e <__swsetup_r+0x16>
 8009338:	4628      	mov	r0, r5
 800933a:	f7fd fa65 	bl	8006808 <__sinit>
 800933e:	4b2e      	ldr	r3, [pc, #184]	; (80093f8 <__swsetup_r+0xd0>)
 8009340:	429c      	cmp	r4, r3
 8009342:	d10f      	bne.n	8009364 <__swsetup_r+0x3c>
 8009344:	686c      	ldr	r4, [r5, #4]
 8009346:	89a3      	ldrh	r3, [r4, #12]
 8009348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800934c:	0719      	lsls	r1, r3, #28
 800934e:	d42c      	bmi.n	80093aa <__swsetup_r+0x82>
 8009350:	06dd      	lsls	r5, r3, #27
 8009352:	d411      	bmi.n	8009378 <__swsetup_r+0x50>
 8009354:	2309      	movs	r3, #9
 8009356:	6033      	str	r3, [r6, #0]
 8009358:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800935c:	f04f 30ff 	mov.w	r0, #4294967295
 8009360:	81a3      	strh	r3, [r4, #12]
 8009362:	e03e      	b.n	80093e2 <__swsetup_r+0xba>
 8009364:	4b25      	ldr	r3, [pc, #148]	; (80093fc <__swsetup_r+0xd4>)
 8009366:	429c      	cmp	r4, r3
 8009368:	d101      	bne.n	800936e <__swsetup_r+0x46>
 800936a:	68ac      	ldr	r4, [r5, #8]
 800936c:	e7eb      	b.n	8009346 <__swsetup_r+0x1e>
 800936e:	4b24      	ldr	r3, [pc, #144]	; (8009400 <__swsetup_r+0xd8>)
 8009370:	429c      	cmp	r4, r3
 8009372:	bf08      	it	eq
 8009374:	68ec      	ldreq	r4, [r5, #12]
 8009376:	e7e6      	b.n	8009346 <__swsetup_r+0x1e>
 8009378:	0758      	lsls	r0, r3, #29
 800937a:	d512      	bpl.n	80093a2 <__swsetup_r+0x7a>
 800937c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800937e:	b141      	cbz	r1, 8009392 <__swsetup_r+0x6a>
 8009380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009384:	4299      	cmp	r1, r3
 8009386:	d002      	beq.n	800938e <__swsetup_r+0x66>
 8009388:	4630      	mov	r0, r6
 800938a:	f7ff fbd9 	bl	8008b40 <_free_r>
 800938e:	2300      	movs	r3, #0
 8009390:	6363      	str	r3, [r4, #52]	; 0x34
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009398:	81a3      	strh	r3, [r4, #12]
 800939a:	2300      	movs	r3, #0
 800939c:	6063      	str	r3, [r4, #4]
 800939e:	6923      	ldr	r3, [r4, #16]
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	f043 0308 	orr.w	r3, r3, #8
 80093a8:	81a3      	strh	r3, [r4, #12]
 80093aa:	6923      	ldr	r3, [r4, #16]
 80093ac:	b94b      	cbnz	r3, 80093c2 <__swsetup_r+0x9a>
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093b8:	d003      	beq.n	80093c2 <__swsetup_r+0x9a>
 80093ba:	4621      	mov	r1, r4
 80093bc:	4630      	mov	r0, r6
 80093be:	f000 f84d 	bl	800945c <__smakebuf_r>
 80093c2:	89a0      	ldrh	r0, [r4, #12]
 80093c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093c8:	f010 0301 	ands.w	r3, r0, #1
 80093cc:	d00a      	beq.n	80093e4 <__swsetup_r+0xbc>
 80093ce:	2300      	movs	r3, #0
 80093d0:	60a3      	str	r3, [r4, #8]
 80093d2:	6963      	ldr	r3, [r4, #20]
 80093d4:	425b      	negs	r3, r3
 80093d6:	61a3      	str	r3, [r4, #24]
 80093d8:	6923      	ldr	r3, [r4, #16]
 80093da:	b943      	cbnz	r3, 80093ee <__swsetup_r+0xc6>
 80093dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093e0:	d1ba      	bne.n	8009358 <__swsetup_r+0x30>
 80093e2:	bd70      	pop	{r4, r5, r6, pc}
 80093e4:	0781      	lsls	r1, r0, #30
 80093e6:	bf58      	it	pl
 80093e8:	6963      	ldrpl	r3, [r4, #20]
 80093ea:	60a3      	str	r3, [r4, #8]
 80093ec:	e7f4      	b.n	80093d8 <__swsetup_r+0xb0>
 80093ee:	2000      	movs	r0, #0
 80093f0:	e7f7      	b.n	80093e2 <__swsetup_r+0xba>
 80093f2:	bf00      	nop
 80093f4:	20000010 	.word	0x20000010
 80093f8:	08009670 	.word	0x08009670
 80093fc:	08009690 	.word	0x08009690
 8009400:	08009650 	.word	0x08009650

08009404 <abort>:
 8009404:	2006      	movs	r0, #6
 8009406:	b508      	push	{r3, lr}
 8009408:	f000 f898 	bl	800953c <raise>
 800940c:	2001      	movs	r0, #1
 800940e:	f7f7 ff5e 	bl	80012ce <_exit>

08009412 <__swhatbuf_r>:
 8009412:	b570      	push	{r4, r5, r6, lr}
 8009414:	460e      	mov	r6, r1
 8009416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800941a:	4614      	mov	r4, r2
 800941c:	2900      	cmp	r1, #0
 800941e:	461d      	mov	r5, r3
 8009420:	b096      	sub	sp, #88	; 0x58
 8009422:	da07      	bge.n	8009434 <__swhatbuf_r+0x22>
 8009424:	2300      	movs	r3, #0
 8009426:	602b      	str	r3, [r5, #0]
 8009428:	89b3      	ldrh	r3, [r6, #12]
 800942a:	061a      	lsls	r2, r3, #24
 800942c:	d410      	bmi.n	8009450 <__swhatbuf_r+0x3e>
 800942e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009432:	e00e      	b.n	8009452 <__swhatbuf_r+0x40>
 8009434:	466a      	mov	r2, sp
 8009436:	f000 f89d 	bl	8009574 <_fstat_r>
 800943a:	2800      	cmp	r0, #0
 800943c:	dbf2      	blt.n	8009424 <__swhatbuf_r+0x12>
 800943e:	9a01      	ldr	r2, [sp, #4]
 8009440:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009444:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009448:	425a      	negs	r2, r3
 800944a:	415a      	adcs	r2, r3
 800944c:	602a      	str	r2, [r5, #0]
 800944e:	e7ee      	b.n	800942e <__swhatbuf_r+0x1c>
 8009450:	2340      	movs	r3, #64	; 0x40
 8009452:	2000      	movs	r0, #0
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	b016      	add	sp, #88	; 0x58
 8009458:	bd70      	pop	{r4, r5, r6, pc}
	...

0800945c <__smakebuf_r>:
 800945c:	898b      	ldrh	r3, [r1, #12]
 800945e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009460:	079d      	lsls	r5, r3, #30
 8009462:	4606      	mov	r6, r0
 8009464:	460c      	mov	r4, r1
 8009466:	d507      	bpl.n	8009478 <__smakebuf_r+0x1c>
 8009468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	6123      	str	r3, [r4, #16]
 8009470:	2301      	movs	r3, #1
 8009472:	6163      	str	r3, [r4, #20]
 8009474:	b002      	add	sp, #8
 8009476:	bd70      	pop	{r4, r5, r6, pc}
 8009478:	466a      	mov	r2, sp
 800947a:	ab01      	add	r3, sp, #4
 800947c:	f7ff ffc9 	bl	8009412 <__swhatbuf_r>
 8009480:	9900      	ldr	r1, [sp, #0]
 8009482:	4605      	mov	r5, r0
 8009484:	4630      	mov	r0, r6
 8009486:	f7fd fa9b 	bl	80069c0 <_malloc_r>
 800948a:	b948      	cbnz	r0, 80094a0 <__smakebuf_r+0x44>
 800948c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009490:	059a      	lsls	r2, r3, #22
 8009492:	d4ef      	bmi.n	8009474 <__smakebuf_r+0x18>
 8009494:	f023 0303 	bic.w	r3, r3, #3
 8009498:	f043 0302 	orr.w	r3, r3, #2
 800949c:	81a3      	strh	r3, [r4, #12]
 800949e:	e7e3      	b.n	8009468 <__smakebuf_r+0xc>
 80094a0:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <__smakebuf_r+0x7c>)
 80094a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80094a4:	89a3      	ldrh	r3, [r4, #12]
 80094a6:	6020      	str	r0, [r4, #0]
 80094a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ac:	81a3      	strh	r3, [r4, #12]
 80094ae:	9b00      	ldr	r3, [sp, #0]
 80094b0:	6120      	str	r0, [r4, #16]
 80094b2:	6163      	str	r3, [r4, #20]
 80094b4:	9b01      	ldr	r3, [sp, #4]
 80094b6:	b15b      	cbz	r3, 80094d0 <__smakebuf_r+0x74>
 80094b8:	4630      	mov	r0, r6
 80094ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094be:	f000 f86b 	bl	8009598 <_isatty_r>
 80094c2:	b128      	cbz	r0, 80094d0 <__smakebuf_r+0x74>
 80094c4:	89a3      	ldrh	r3, [r4, #12]
 80094c6:	f023 0303 	bic.w	r3, r3, #3
 80094ca:	f043 0301 	orr.w	r3, r3, #1
 80094ce:	81a3      	strh	r3, [r4, #12]
 80094d0:	89a0      	ldrh	r0, [r4, #12]
 80094d2:	4305      	orrs	r5, r0
 80094d4:	81a5      	strh	r5, [r4, #12]
 80094d6:	e7cd      	b.n	8009474 <__smakebuf_r+0x18>
 80094d8:	080067a1 	.word	0x080067a1

080094dc <_malloc_usable_size_r>:
 80094dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094e0:	1f18      	subs	r0, r3, #4
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	bfbc      	itt	lt
 80094e6:	580b      	ldrlt	r3, [r1, r0]
 80094e8:	18c0      	addlt	r0, r0, r3
 80094ea:	4770      	bx	lr

080094ec <_raise_r>:
 80094ec:	291f      	cmp	r1, #31
 80094ee:	b538      	push	{r3, r4, r5, lr}
 80094f0:	4604      	mov	r4, r0
 80094f2:	460d      	mov	r5, r1
 80094f4:	d904      	bls.n	8009500 <_raise_r+0x14>
 80094f6:	2316      	movs	r3, #22
 80094f8:	6003      	str	r3, [r0, #0]
 80094fa:	f04f 30ff 	mov.w	r0, #4294967295
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
 8009500:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009502:	b112      	cbz	r2, 800950a <_raise_r+0x1e>
 8009504:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009508:	b94b      	cbnz	r3, 800951e <_raise_r+0x32>
 800950a:	4620      	mov	r0, r4
 800950c:	f000 f830 	bl	8009570 <_getpid_r>
 8009510:	462a      	mov	r2, r5
 8009512:	4601      	mov	r1, r0
 8009514:	4620      	mov	r0, r4
 8009516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800951a:	f000 b817 	b.w	800954c <_kill_r>
 800951e:	2b01      	cmp	r3, #1
 8009520:	d00a      	beq.n	8009538 <_raise_r+0x4c>
 8009522:	1c59      	adds	r1, r3, #1
 8009524:	d103      	bne.n	800952e <_raise_r+0x42>
 8009526:	2316      	movs	r3, #22
 8009528:	6003      	str	r3, [r0, #0]
 800952a:	2001      	movs	r0, #1
 800952c:	e7e7      	b.n	80094fe <_raise_r+0x12>
 800952e:	2400      	movs	r4, #0
 8009530:	4628      	mov	r0, r5
 8009532:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009536:	4798      	blx	r3
 8009538:	2000      	movs	r0, #0
 800953a:	e7e0      	b.n	80094fe <_raise_r+0x12>

0800953c <raise>:
 800953c:	4b02      	ldr	r3, [pc, #8]	; (8009548 <raise+0xc>)
 800953e:	4601      	mov	r1, r0
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	f7ff bfd3 	b.w	80094ec <_raise_r>
 8009546:	bf00      	nop
 8009548:	20000010 	.word	0x20000010

0800954c <_kill_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	2300      	movs	r3, #0
 8009550:	4d06      	ldr	r5, [pc, #24]	; (800956c <_kill_r+0x20>)
 8009552:	4604      	mov	r4, r0
 8009554:	4608      	mov	r0, r1
 8009556:	4611      	mov	r1, r2
 8009558:	602b      	str	r3, [r5, #0]
 800955a:	f7f7 fea8 	bl	80012ae <_kill>
 800955e:	1c43      	adds	r3, r0, #1
 8009560:	d102      	bne.n	8009568 <_kill_r+0x1c>
 8009562:	682b      	ldr	r3, [r5, #0]
 8009564:	b103      	cbz	r3, 8009568 <_kill_r+0x1c>
 8009566:	6023      	str	r3, [r4, #0]
 8009568:	bd38      	pop	{r3, r4, r5, pc}
 800956a:	bf00      	nop
 800956c:	20001d20 	.word	0x20001d20

08009570 <_getpid_r>:
 8009570:	f7f7 be96 	b.w	80012a0 <_getpid>

08009574 <_fstat_r>:
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	2300      	movs	r3, #0
 8009578:	4d06      	ldr	r5, [pc, #24]	; (8009594 <_fstat_r+0x20>)
 800957a:	4604      	mov	r4, r0
 800957c:	4608      	mov	r0, r1
 800957e:	4611      	mov	r1, r2
 8009580:	602b      	str	r3, [r5, #0]
 8009582:	f7f7 fef2 	bl	800136a <_fstat>
 8009586:	1c43      	adds	r3, r0, #1
 8009588:	d102      	bne.n	8009590 <_fstat_r+0x1c>
 800958a:	682b      	ldr	r3, [r5, #0]
 800958c:	b103      	cbz	r3, 8009590 <_fstat_r+0x1c>
 800958e:	6023      	str	r3, [r4, #0]
 8009590:	bd38      	pop	{r3, r4, r5, pc}
 8009592:	bf00      	nop
 8009594:	20001d20 	.word	0x20001d20

08009598 <_isatty_r>:
 8009598:	b538      	push	{r3, r4, r5, lr}
 800959a:	2300      	movs	r3, #0
 800959c:	4d05      	ldr	r5, [pc, #20]	; (80095b4 <_isatty_r+0x1c>)
 800959e:	4604      	mov	r4, r0
 80095a0:	4608      	mov	r0, r1
 80095a2:	602b      	str	r3, [r5, #0]
 80095a4:	f7f7 fef0 	bl	8001388 <_isatty>
 80095a8:	1c43      	adds	r3, r0, #1
 80095aa:	d102      	bne.n	80095b2 <_isatty_r+0x1a>
 80095ac:	682b      	ldr	r3, [r5, #0]
 80095ae:	b103      	cbz	r3, 80095b2 <_isatty_r+0x1a>
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
 80095b4:	20001d20 	.word	0x20001d20

080095b8 <_init>:
 80095b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ba:	bf00      	nop
 80095bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095be:	bc08      	pop	{r3}
 80095c0:	469e      	mov	lr, r3
 80095c2:	4770      	bx	lr

080095c4 <_fini>:
 80095c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c6:	bf00      	nop
 80095c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ca:	bc08      	pop	{r3}
 80095cc:	469e      	mov	lr, r3
 80095ce:	4770      	bx	lr
